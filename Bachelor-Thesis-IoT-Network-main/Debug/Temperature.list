
Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e98c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800eb2c  0800eb2c  0001eb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec40  0800ec40  000201c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec40  0800ec40  0001ec40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec48  0800ec48  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec48  0800ec48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec4c  0800ec4c  0001ec4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  0800ec50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001858  200001c0  0800ee10  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a18  0800ee10  00021a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036f0f  00000000  00000000  00020233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006723  00000000  00000000  00057142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003280  00000000  00000000  0005d868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026e8  00000000  00000000  00060ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000897a  00000000  00000000  000631d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033cb3  00000000  00000000  0006bb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d4ae  00000000  00000000  0009f7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000de90  00000000  00000000  001accac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001bab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c0 	.word	0x200001c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eb14 	.word	0x0800eb14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c4 	.word	0x200001c4
 80001dc:	0800eb14 	.word	0x0800eb14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b970 	b.w	8000940 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9e08      	ldr	r6, [sp, #32]
 800067e:	460d      	mov	r5, r1
 8000680:	4604      	mov	r4, r0
 8000682:	460f      	mov	r7, r1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d14a      	bne.n	800071e <__udivmoddi4+0xa6>
 8000688:	428a      	cmp	r2, r1
 800068a:	4694      	mov	ip, r2
 800068c:	d965      	bls.n	800075a <__udivmoddi4+0xe2>
 800068e:	fab2 f382 	clz	r3, r2
 8000692:	b143      	cbz	r3, 80006a6 <__udivmoddi4+0x2e>
 8000694:	fa02 fc03 	lsl.w	ip, r2, r3
 8000698:	f1c3 0220 	rsb	r2, r3, #32
 800069c:	409f      	lsls	r7, r3
 800069e:	fa20 f202 	lsr.w	r2, r0, r2
 80006a2:	4317      	orrs	r7, r2
 80006a4:	409c      	lsls	r4, r3
 80006a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006aa:	fa1f f58c 	uxth.w	r5, ip
 80006ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80006b2:	0c22      	lsrs	r2, r4, #16
 80006b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006bc:	fb01 f005 	mul.w	r0, r1, r5
 80006c0:	4290      	cmp	r0, r2
 80006c2:	d90a      	bls.n	80006da <__udivmoddi4+0x62>
 80006c4:	eb1c 0202 	adds.w	r2, ip, r2
 80006c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006cc:	f080 811c 	bcs.w	8000908 <__udivmoddi4+0x290>
 80006d0:	4290      	cmp	r0, r2
 80006d2:	f240 8119 	bls.w	8000908 <__udivmoddi4+0x290>
 80006d6:	3902      	subs	r1, #2
 80006d8:	4462      	add	r2, ip
 80006da:	1a12      	subs	r2, r2, r0
 80006dc:	b2a4      	uxth	r4, r4
 80006de:	fbb2 f0fe 	udiv	r0, r2, lr
 80006e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006ea:	fb00 f505 	mul.w	r5, r0, r5
 80006ee:	42a5      	cmp	r5, r4
 80006f0:	d90a      	bls.n	8000708 <__udivmoddi4+0x90>
 80006f2:	eb1c 0404 	adds.w	r4, ip, r4
 80006f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006fa:	f080 8107 	bcs.w	800090c <__udivmoddi4+0x294>
 80006fe:	42a5      	cmp	r5, r4
 8000700:	f240 8104 	bls.w	800090c <__udivmoddi4+0x294>
 8000704:	4464      	add	r4, ip
 8000706:	3802      	subs	r0, #2
 8000708:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800070c:	1b64      	subs	r4, r4, r5
 800070e:	2100      	movs	r1, #0
 8000710:	b11e      	cbz	r6, 800071a <__udivmoddi4+0xa2>
 8000712:	40dc      	lsrs	r4, r3
 8000714:	2300      	movs	r3, #0
 8000716:	e9c6 4300 	strd	r4, r3, [r6]
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	428b      	cmp	r3, r1
 8000720:	d908      	bls.n	8000734 <__udivmoddi4+0xbc>
 8000722:	2e00      	cmp	r6, #0
 8000724:	f000 80ed 	beq.w	8000902 <__udivmoddi4+0x28a>
 8000728:	2100      	movs	r1, #0
 800072a:	e9c6 0500 	strd	r0, r5, [r6]
 800072e:	4608      	mov	r0, r1
 8000730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000734:	fab3 f183 	clz	r1, r3
 8000738:	2900      	cmp	r1, #0
 800073a:	d149      	bne.n	80007d0 <__udivmoddi4+0x158>
 800073c:	42ab      	cmp	r3, r5
 800073e:	d302      	bcc.n	8000746 <__udivmoddi4+0xce>
 8000740:	4282      	cmp	r2, r0
 8000742:	f200 80f8 	bhi.w	8000936 <__udivmoddi4+0x2be>
 8000746:	1a84      	subs	r4, r0, r2
 8000748:	eb65 0203 	sbc.w	r2, r5, r3
 800074c:	2001      	movs	r0, #1
 800074e:	4617      	mov	r7, r2
 8000750:	2e00      	cmp	r6, #0
 8000752:	d0e2      	beq.n	800071a <__udivmoddi4+0xa2>
 8000754:	e9c6 4700 	strd	r4, r7, [r6]
 8000758:	e7df      	b.n	800071a <__udivmoddi4+0xa2>
 800075a:	b902      	cbnz	r2, 800075e <__udivmoddi4+0xe6>
 800075c:	deff      	udf	#255	; 0xff
 800075e:	fab2 f382 	clz	r3, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 8090 	bne.w	8000888 <__udivmoddi4+0x210>
 8000768:	1a8a      	subs	r2, r1, r2
 800076a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076e:	fa1f fe8c 	uxth.w	lr, ip
 8000772:	2101      	movs	r1, #1
 8000774:	fbb2 f5f7 	udiv	r5, r2, r7
 8000778:	fb07 2015 	mls	r0, r7, r5, r2
 800077c:	0c22      	lsrs	r2, r4, #16
 800077e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000782:	fb0e f005 	mul.w	r0, lr, r5
 8000786:	4290      	cmp	r0, r2
 8000788:	d908      	bls.n	800079c <__udivmoddi4+0x124>
 800078a:	eb1c 0202 	adds.w	r2, ip, r2
 800078e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x122>
 8000794:	4290      	cmp	r0, r2
 8000796:	f200 80cb 	bhi.w	8000930 <__udivmoddi4+0x2b8>
 800079a:	4645      	mov	r5, r8
 800079c:	1a12      	subs	r2, r2, r0
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007a4:	fb07 2210 	mls	r2, r7, r0, r2
 80007a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007ac:	fb0e fe00 	mul.w	lr, lr, r0
 80007b0:	45a6      	cmp	lr, r4
 80007b2:	d908      	bls.n	80007c6 <__udivmoddi4+0x14e>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007bc:	d202      	bcs.n	80007c4 <__udivmoddi4+0x14c>
 80007be:	45a6      	cmp	lr, r4
 80007c0:	f200 80bb 	bhi.w	800093a <__udivmoddi4+0x2c2>
 80007c4:	4610      	mov	r0, r2
 80007c6:	eba4 040e 	sub.w	r4, r4, lr
 80007ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007ce:	e79f      	b.n	8000710 <__udivmoddi4+0x98>
 80007d0:	f1c1 0720 	rsb	r7, r1, #32
 80007d4:	408b      	lsls	r3, r1
 80007d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007da:	ea4c 0c03 	orr.w	ip, ip, r3
 80007de:	fa05 f401 	lsl.w	r4, r5, r1
 80007e2:	fa20 f307 	lsr.w	r3, r0, r7
 80007e6:	40fd      	lsrs	r5, r7
 80007e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ec:	4323      	orrs	r3, r4
 80007ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80007f2:	fa1f fe8c 	uxth.w	lr, ip
 80007f6:	fb09 5518 	mls	r5, r9, r8, r5
 80007fa:	0c1c      	lsrs	r4, r3, #16
 80007fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000800:	fb08 f50e 	mul.w	r5, r8, lr
 8000804:	42a5      	cmp	r5, r4
 8000806:	fa02 f201 	lsl.w	r2, r2, r1
 800080a:	fa00 f001 	lsl.w	r0, r0, r1
 800080e:	d90b      	bls.n	8000828 <__udivmoddi4+0x1b0>
 8000810:	eb1c 0404 	adds.w	r4, ip, r4
 8000814:	f108 3aff 	add.w	sl, r8, #4294967295
 8000818:	f080 8088 	bcs.w	800092c <__udivmoddi4+0x2b4>
 800081c:	42a5      	cmp	r5, r4
 800081e:	f240 8085 	bls.w	800092c <__udivmoddi4+0x2b4>
 8000822:	f1a8 0802 	sub.w	r8, r8, #2
 8000826:	4464      	add	r4, ip
 8000828:	1b64      	subs	r4, r4, r5
 800082a:	b29d      	uxth	r5, r3
 800082c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000830:	fb09 4413 	mls	r4, r9, r3, r4
 8000834:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000838:	fb03 fe0e 	mul.w	lr, r3, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x1da>
 8000840:	eb1c 0404 	adds.w	r4, ip, r4
 8000844:	f103 35ff 	add.w	r5, r3, #4294967295
 8000848:	d26c      	bcs.n	8000924 <__udivmoddi4+0x2ac>
 800084a:	45a6      	cmp	lr, r4
 800084c:	d96a      	bls.n	8000924 <__udivmoddi4+0x2ac>
 800084e:	3b02      	subs	r3, #2
 8000850:	4464      	add	r4, ip
 8000852:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000856:	fba3 9502 	umull	r9, r5, r3, r2
 800085a:	eba4 040e 	sub.w	r4, r4, lr
 800085e:	42ac      	cmp	r4, r5
 8000860:	46c8      	mov	r8, r9
 8000862:	46ae      	mov	lr, r5
 8000864:	d356      	bcc.n	8000914 <__udivmoddi4+0x29c>
 8000866:	d053      	beq.n	8000910 <__udivmoddi4+0x298>
 8000868:	b156      	cbz	r6, 8000880 <__udivmoddi4+0x208>
 800086a:	ebb0 0208 	subs.w	r2, r0, r8
 800086e:	eb64 040e 	sbc.w	r4, r4, lr
 8000872:	fa04 f707 	lsl.w	r7, r4, r7
 8000876:	40ca      	lsrs	r2, r1
 8000878:	40cc      	lsrs	r4, r1
 800087a:	4317      	orrs	r7, r2
 800087c:	e9c6 7400 	strd	r7, r4, [r6]
 8000880:	4618      	mov	r0, r3
 8000882:	2100      	movs	r1, #0
 8000884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000888:	f1c3 0120 	rsb	r1, r3, #32
 800088c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000890:	fa20 f201 	lsr.w	r2, r0, r1
 8000894:	fa25 f101 	lsr.w	r1, r5, r1
 8000898:	409d      	lsls	r5, r3
 800089a:	432a      	orrs	r2, r5
 800089c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a0:	fa1f fe8c 	uxth.w	lr, ip
 80008a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008a8:	fb07 1510 	mls	r5, r7, r0, r1
 80008ac:	0c11      	lsrs	r1, r2, #16
 80008ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008b2:	fb00 f50e 	mul.w	r5, r0, lr
 80008b6:	428d      	cmp	r5, r1
 80008b8:	fa04 f403 	lsl.w	r4, r4, r3
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0x258>
 80008be:	eb1c 0101 	adds.w	r1, ip, r1
 80008c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008c6:	d22f      	bcs.n	8000928 <__udivmoddi4+0x2b0>
 80008c8:	428d      	cmp	r5, r1
 80008ca:	d92d      	bls.n	8000928 <__udivmoddi4+0x2b0>
 80008cc:	3802      	subs	r0, #2
 80008ce:	4461      	add	r1, ip
 80008d0:	1b49      	subs	r1, r1, r5
 80008d2:	b292      	uxth	r2, r2
 80008d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008d8:	fb07 1115 	mls	r1, r7, r5, r1
 80008dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008e0:	fb05 f10e 	mul.w	r1, r5, lr
 80008e4:	4291      	cmp	r1, r2
 80008e6:	d908      	bls.n	80008fa <__udivmoddi4+0x282>
 80008e8:	eb1c 0202 	adds.w	r2, ip, r2
 80008ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f0:	d216      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 80008f2:	4291      	cmp	r1, r2
 80008f4:	d914      	bls.n	8000920 <__udivmoddi4+0x2a8>
 80008f6:	3d02      	subs	r5, #2
 80008f8:	4462      	add	r2, ip
 80008fa:	1a52      	subs	r2, r2, r1
 80008fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000900:	e738      	b.n	8000774 <__udivmoddi4+0xfc>
 8000902:	4631      	mov	r1, r6
 8000904:	4630      	mov	r0, r6
 8000906:	e708      	b.n	800071a <__udivmoddi4+0xa2>
 8000908:	4639      	mov	r1, r7
 800090a:	e6e6      	b.n	80006da <__udivmoddi4+0x62>
 800090c:	4610      	mov	r0, r2
 800090e:	e6fb      	b.n	8000708 <__udivmoddi4+0x90>
 8000910:	4548      	cmp	r0, r9
 8000912:	d2a9      	bcs.n	8000868 <__udivmoddi4+0x1f0>
 8000914:	ebb9 0802 	subs.w	r8, r9, r2
 8000918:	eb65 0e0c 	sbc.w	lr, r5, ip
 800091c:	3b01      	subs	r3, #1
 800091e:	e7a3      	b.n	8000868 <__udivmoddi4+0x1f0>
 8000920:	4645      	mov	r5, r8
 8000922:	e7ea      	b.n	80008fa <__udivmoddi4+0x282>
 8000924:	462b      	mov	r3, r5
 8000926:	e794      	b.n	8000852 <__udivmoddi4+0x1da>
 8000928:	4640      	mov	r0, r8
 800092a:	e7d1      	b.n	80008d0 <__udivmoddi4+0x258>
 800092c:	46d0      	mov	r8, sl
 800092e:	e77b      	b.n	8000828 <__udivmoddi4+0x1b0>
 8000930:	3d02      	subs	r5, #2
 8000932:	4462      	add	r2, ip
 8000934:	e732      	b.n	800079c <__udivmoddi4+0x124>
 8000936:	4608      	mov	r0, r1
 8000938:	e70a      	b.n	8000750 <__udivmoddi4+0xd8>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	e742      	b.n	80007c6 <__udivmoddi4+0x14e>

08000940 <__aeabi_idiv0>:
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b09a      	sub	sp, #104	; 0x68
 8000948:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f005 fa00 	bl	8005d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f92f 	bl	8000bb0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000952:	f000 f995 	bl	8000c80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f000 fcb9 	bl	80012cc <MX_GPIO_Init>
  MX_ADC1_Init();
 800095a:	f000 f9c3 	bl	8000ce4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800095e:	f000 fa27 	bl	8000db0 <MX_I2C1_Init>
  MX_QUADSPI_Init();
 8000962:	f000 fa63 	bl	8000e2c <MX_QUADSPI_Init>
  MX_RNG_Init();
 8000966:	f000 fa8d 	bl	8000e84 <MX_RNG_Init>
  MX_RTC_Init();
 800096a:	f000 fa9f 	bl	8000eac <MX_RTC_Init>
  MX_SPI1_Init();
 800096e:	f000 fac5 	bl	8000efc <MX_SPI1_Init>
  MX_SPI3_Init();
 8000972:	f000 fb01 	bl	8000f78 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000976:	f000 fb3d 	bl	8000ff4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800097a:	f000 fb95 	bl	80010a8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800097e:	f000 fbed 	bl	800115c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000982:	f000 fc1b 	bl	80011bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000986:	f000 fc49 	bl	800121c <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 800098a:	f000 fc77 	bl	800127c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	221d      	movs	r2, #29
 8000994:	4977      	ldr	r1, [pc, #476]	; (8000b74 <main+0x230>)
 8000996:	4878      	ldr	r0, [pc, #480]	; (8000b78 <main+0x234>)
 8000998:	f00a f910 	bl	800abbc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800099c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a0:	221d      	movs	r2, #29
 80009a2:	4976      	ldr	r1, [pc, #472]	; (8000b7c <main+0x238>)
 80009a4:	4874      	ldr	r0, [pc, #464]	; (8000b78 <main+0x234>)
 80009a6:	f00a f909 	bl	800abbc <HAL_UART_Transmit>
  BSP_ENV_SENSOR_Init(0, ENV_TEMPERATURE);
 80009aa:	2101      	movs	r1, #1
 80009ac:	2000      	movs	r0, #0
 80009ae:	f001 fc97 	bl	80022e0 <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_Enable(0, ENV_TEMPERATURE);
 80009b2:	2101      	movs	r1, #1
 80009b4:	2000      	movs	r0, #0
 80009b6:	f001 fd59 	bl	800246c <BSP_ENV_SENSOR_Enable>
  BSP_ENV_SENSOR_Init(0, ENV_HUMIDITY);
 80009ba:	2104      	movs	r1, #4
 80009bc:	2000      	movs	r0, #0
 80009be:	f001 fc8f 	bl	80022e0 <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_Enable(0, ENV_HUMIDITY);
 80009c2:	2104      	movs	r1, #4
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 fd51 	bl	800246c <BSP_ENV_SENSOR_Enable>
  BSP_MOTION_SENSOR_Init_Acc();
 80009ca:	f001 ff3b 	bl	8002844 <BSP_MOTION_SENSOR_Init_Acc>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	221e      	movs	r2, #30
 80009d4:	496a      	ldr	r1, [pc, #424]	; (8000b80 <main+0x23c>)
 80009d6:	4868      	ldr	r0, [pc, #416]	; (8000b78 <main+0x234>)
 80009d8:	f00a f8f0 	bl	800abbc <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009dc:	4b69      	ldr	r3, [pc, #420]	; (8000b84 <main+0x240>)
 80009de:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f00b f9f2 	bl	800bde0 <osThreadCreate>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a62      	ldr	r2, [pc, #392]	; (8000b88 <main+0x244>)
 8000a00:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	BSP_ENV_SENSOR_GetValue(0, ENV_TEMPERATURE, &temp_value);
 8000a02:	4a62      	ldr	r2, [pc, #392]	; (8000b8c <main+0x248>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	2000      	movs	r0, #0
 8000a08:	f001 fd72 	bl	80024f0 <BSP_ENV_SENSOR_GetValue>
	int tempInt = (int)temp_value;
 8000a0c:	4b5f      	ldr	r3, [pc, #380]	; (8000b8c <main+0x248>)
 8000a0e:	edd3 7a00 	vldr	s15, [r3]
 8000a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a16:	ee17 3a90 	vmov	r3, s15
 8000a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int tmpInt1 = temp_value;
 8000a1c:	4b5b      	ldr	r3, [pc, #364]	; (8000b8c <main+0x248>)
 8000a1e:	edd3 7a00 	vldr	s15, [r3]
 8000a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a26:	ee17 3a90 	vmov	r3, s15
 8000a2a:	65bb      	str	r3, [r7, #88]	; 0x58
	float tmpFrac = temp_value - tmpInt1;
 8000a2c:	4b57      	ldr	r3, [pc, #348]	; (8000b8c <main+0x248>)
 8000a2e:	ed93 7a00 	vldr	s14, [r3]
 8000a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a40:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	int tmpInt2 = trunc(tmpFrac * 100);
 8000a44:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000a48:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000b90 <main+0x24c>
 8000a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a50:	ee17 0a90 	vmov	r0, s15
 8000a54:	f7ff fd78 	bl	8000548 <__aeabi_f2d>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	ec43 2b10 	vmov	d0, r2, r3
 8000a60:	f00e f81e 	bl	800eaa0 <trunc>
 8000a64:	ec53 2b10 	vmov	r2, r3, d0
 8000a68:	4610      	mov	r0, r2
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f7ff fdc4 	bl	80005f8 <__aeabi_d2iz>
 8000a70:	4603      	mov	r3, r0
 8000a72:	653b      	str	r3, [r7, #80]	; 0x50
	snprintf(str_tmp,100," TEMPERATURE = %d.%02d degree C\n\r", tmpInt1, tmpInt2);
 8000a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a7a:	4a46      	ldr	r2, [pc, #280]	; (8000b94 <main+0x250>)
 8000a7c:	2164      	movs	r1, #100	; 0x64
 8000a7e:	4846      	ldr	r0, [pc, #280]	; (8000b98 <main+0x254>)
 8000a80:	f00d fb56 	bl	800e130 <sniprintf>

	BSP_ENV_SENSOR_GetValue(0, ENV_HUMIDITY, &hum_value);
 8000a84:	4a45      	ldr	r2, [pc, #276]	; (8000b9c <main+0x258>)
 8000a86:	2104      	movs	r1, #4
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 fd31 	bl	80024f0 <BSP_ENV_SENSOR_GetValue>
	int humInt = (int)hum_value;
 8000a8e:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <main+0x258>)
 8000a90:	edd3 7a00 	vldr	s15, [r3]
 8000a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a98:	ee17 3a90 	vmov	r3, s15
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	int humInt1 = hum_value;
 8000a9e:	4b3f      	ldr	r3, [pc, #252]	; (8000b9c <main+0x258>)
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa8:	ee17 3a90 	vmov	r3, s15
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
	float humFrac = hum_value - humInt1;
 8000aae:	4b3b      	ldr	r3, [pc, #236]	; (8000b9c <main+0x258>)
 8000ab0:	ed93 7a00 	vldr	s14, [r3]
 8000ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ab6:	ee07 3a90 	vmov	s15, r3
 8000aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	int humInt2 = trunc(humFrac * 100);
 8000ac6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000aca:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000b90 <main+0x24c>
 8000ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad2:	ee17 0a90 	vmov	r0, s15
 8000ad6:	f7ff fd37 	bl	8000548 <__aeabi_f2d>
 8000ada:	4602      	mov	r2, r0
 8000adc:	460b      	mov	r3, r1
 8000ade:	ec43 2b10 	vmov	d0, r2, r3
 8000ae2:	f00d ffdd 	bl	800eaa0 <trunc>
 8000ae6:	ec53 2b10 	vmov	r2, r3, d0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4619      	mov	r1, r3
 8000aee:	f7ff fd83 	bl	80005f8 <__aeabi_d2iz>
 8000af2:	4603      	mov	r3, r0
 8000af4:	643b      	str	r3, [r7, #64]	; 0x40
	snprintf(str_hum,100," HUMIDITY = %d.%02d %%\n\r", humInt1, humInt2);
 8000af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <main+0x25c>)
 8000afe:	2164      	movs	r1, #100	; 0x64
 8000b00:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <main+0x260>)
 8000b02:	f00d fb15 	bl	800e130 <sniprintf>

	MOTION_SENSOR_Axes_t acceleration;
	BSP_MOTION_SENSOR_GetAxes(STM32L462E_CELL1_LSM303AGR_ACC_0, MOTION_ACCELERO, &acceleration);
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f001 ff68 	bl	80029e4 <BSP_MOTION_SENSOR_GetAxes>
	snprintf(str_acc,100," ACCELERATION = %d %d %d\n\r", acceleration.x, acceleration.y, acceleration.z);
 8000b14:	69b9      	ldr	r1, [r7, #24]
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <main+0x264>)
 8000b22:	2164      	movs	r1, #100	; 0x64
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <main+0x268>)
 8000b26:	f00d fb03 	bl	800e130 <sniprintf>

	HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	2264      	movs	r2, #100	; 0x64
 8000b30:	4919      	ldr	r1, [pc, #100]	; (8000b98 <main+0x254>)
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <main+0x234>)
 8000b34:	f00a f842 	bl	800abbc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,( uint8_t *)str_hum,sizeof(str_hum),1000);
 8000b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	4919      	ldr	r1, [pc, #100]	; (8000ba4 <main+0x260>)
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <main+0x234>)
 8000b42:	f00a f83b 	bl	800abbc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,( uint8_t *)str_acc,sizeof(str_acc),1000);
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	2264      	movs	r2, #100	; 0x64
 8000b4c:	4917      	ldr	r1, [pc, #92]	; (8000bac <main+0x268>)
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <main+0x234>)
 8000b50:	f00a f834 	bl	800abbc <HAL_UART_Transmit>

	SensorData data;
	data.temperature = tempInt;
 8000b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b56:	607b      	str	r3, [r7, #4]
	data.humidity = humInt;
 8000b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b5a:	60bb      	str	r3, [r7, #8]
	data.accelerometer = acceleration;
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	f107 0218 	add.w	r2, r7, #24
 8000b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f005 f927 	bl	8005dc0 <HAL_Delay>
  {
 8000b72:	e746      	b.n	8000a02 <main+0xbe>
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000478 	.word	0x20000478
 8000b7c:	20000020 	.word	0x20000020
 8000b80:	20000040 	.word	0x20000040
 8000b84:	0800eb94 	.word	0x0800eb94
 8000b88:	20000908 	.word	0x20000908
 8000b8c:	2000090c 	.word	0x2000090c
 8000b90:	42c80000 	.word	0x42c80000
 8000b94:	0800eb2c 	.word	0x0800eb2c
 8000b98:	20000914 	.word	0x20000914
 8000b9c:	20000910 	.word	0x20000910
 8000ba0:	0800eb50 	.word	0x0800eb50
 8000ba4:	20000978 	.word	0x20000978
 8000ba8:	0800eb6c 	.word	0x0800eb6c
 8000bac:	200009dc 	.word	0x200009dc

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b096      	sub	sp, #88	; 0x58
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	2244      	movs	r2, #68	; 0x44
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f00d faea 	bl	800e198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bd6:	f007 fb9b 	bl	8008310 <HAL_PWREx_ControlVoltageScaling>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000be0:	f000 fc40 	bl	8001464 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000be4:	f007 fb76 	bl	80082d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <SystemClock_Config+0xcc>)
 8000bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <SystemClock_Config+0xcc>)
 8000bf0:	f023 0318 	bic.w	r3, r3, #24
 8000bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bf8:	2314      	movs	r3, #20
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c08:	2360      	movs	r3, #96	; 0x60
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c10:	2301      	movs	r3, #1
 8000c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c18:	2328      	movs	r3, #40	; 0x28
 8000c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f007 fc87 	bl	8008540 <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c38:	f000 fc14 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2303      	movs	r3, #3
 8000c42:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	2104      	movs	r1, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f008 f887 	bl	8008d68 <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c60:	f000 fc00 	bl	8001464 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f008 f97c 	bl	8008f68 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c70:	f008 fd70 	bl	8009754 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c74:	bf00      	nop
 8000c76:	3758      	adds	r7, #88	; 0x58
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000

08000c80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09a      	sub	sp, #104	; 0x68
 8000c84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2268      	movs	r2, #104	; 0x68
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00d fa83 	bl	800e198 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 8000c92:	f44f 238c 	mov.w	r3, #286720	; 0x46000
 8000c96:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ca2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000ca4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000caa:	2301      	movs	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000cb2:	2318      	movs	r3, #24
 8000cb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000cc2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000cc6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f008 fad6 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000cd6:	f000 fbc5 	bl	8001464 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3768      	adds	r7, #104	; 0x68
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000cfc:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <MX_ADC1_Init+0xc0>)
 8000cfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d5c:	f005 f9f4 	bl	8006148 <HAL_ADC_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d66:	f000 fb7d 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_ADC1_Init+0xc4>)
 8000d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <MX_ADC1_Init+0xc8>)
 8000d78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_ADC1_Init+0xbc>)
 8000d88:	f005 fb24 	bl	80063d4 <HAL_ADC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d92:	f000 fb67 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001dc 	.word	0x200001dc
 8000da4:	50040000 	.word	0x50040000
 8000da8:	04300002 	.word	0x04300002
 8000dac:	407f0000 	.word	0x407f0000

08000db0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <MX_I2C1_Init+0x78>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000dbc:	f640 6214 	movw	r2, #3604	; 0xe14
 8000dc0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000dee:	f006 fade 	bl	80073ae <HAL_I2C_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000df8:	f000 fb34 	bl	8001464 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000e00:	f007 f8a0 	bl	8007f44 <HAL_I2CEx_ConfigAnalogFilter>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e0a:	f000 fb2b 	bl	8001464 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_I2C1_Init+0x74>)
 8000e12:	f007 f8e2 	bl	8007fda <HAL_I2CEx_ConfigDigitalFilter>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e1c:	f000 fb22 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000244 	.word	0x20000244
 8000e28:	40005400 	.word	0x40005400

08000e2c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_QUADSPI_Init+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e38:	22ff      	movs	r2, #255	; 0xff
 8000e3a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e68:	f007 faa8 	bl	80083bc <HAL_QSPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f000 faf7 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000298 	.word	0x20000298
 8000e80:	a0001000 	.word	0xa0001000

08000e84 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_RNG_Init+0x20>)
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <MX_RNG_Init+0x24>)
 8000e8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_RNG_Init+0x20>)
 8000e90:	f008 fd62 	bl	8009958 <HAL_RNG_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e9a:	f000 fae3 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200002e4 	.word	0x200002e4
 8000ea8:	50060800 	.word	0x50060800

08000eac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <MX_RTC_Init+0x4c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000ebe:	227f      	movs	r2, #127	; 0x7f
 8000ec0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_RTC_Init+0x48>)
 8000ee2:	f008 fd90 	bl	8009a06 <HAL_RTC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000eec:	f000 faba 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002f4 	.word	0x200002f4
 8000ef8:	40002800 	.word	0x40002800

08000efc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <MX_SPI1_Init+0x78>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f16:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_SPI1_Init+0x74>)
 8000f5c:	f008 fe72 	bl	8009c44 <HAL_SPI_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f000 fa7d 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000318 	.word	0x20000318
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_SPI3_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_SPI3_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_SPI3_Init+0x74>)
 8000f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_SPI3_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_SPI3_Init+0x74>)
 8000f92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_SPI3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fa6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000faa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_SPI3_Init+0x74>)
 8000fd8:	f008 fe34 	bl	8009c44 <HAL_SPI_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 fa3f 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000037c 	.word	0x2000037c
 8000ff0:	40003c00 	.word	0x40003c00

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
 8001014:	615a      	str	r2, [r3, #20]
 8001016:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_TIM2_Init+0xb0>)
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_TIM2_Init+0xb0>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_TIM2_Init+0xb0>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_TIM2_Init+0xb0>)
 800102e:	f04f 32ff 	mov.w	r2, #4294967295
 8001032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_TIM2_Init+0xb0>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_TIM2_Init+0xb0>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_TIM2_Init+0xb0>)
 8001042:	f008 ff5f 	bl	8009f04 <HAL_TIM_PWM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 fa0a 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_TIM2_Init+0xb0>)
 8001060:	f009 fcd2 	bl	800aa08 <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800106a:	f000 f9fb 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2360      	movs	r3, #96	; 0x60
 8001070:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2204      	movs	r2, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM2_Init+0xb0>)
 8001086:	f009 f897 	bl	800a1b8 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001090:	f000 f9e8 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM2_Init+0xb0>)
 8001096:	f000 fc9d 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200003e0 	.word	0x200003e0

080010a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_TIM3_Init+0xac>)
 80010ce:	4a22      	ldr	r2, [pc, #136]	; (8001158 <MX_TIM3_Init+0xb0>)
 80010d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_TIM3_Init+0xac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM3_Init+0xac>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM3_Init+0xac>)
 80010e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM3_Init+0xac>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_TIM3_Init+0xac>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010f2:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM3_Init+0xac>)
 80010f4:	f008 ff06 	bl	8009f04 <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80010fe:	f000 f9b1 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <MX_TIM3_Init+0xac>)
 8001112:	f009 fc79 	bl	800aa08 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800111c:	f000 f9a2 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	; 0x60
 8001122:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	220c      	movs	r2, #12
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM3_Init+0xac>)
 8001138:	f009 f83e 	bl	800a1b8 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001142:	f000 f98f 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM3_Init+0xac>)
 8001148:	f000 fc44 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000042c 	.word	0x2000042c
 8001158:	40000400 	.word	0x40000400

0800115c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <MX_USART1_UART_Init+0x5c>)
 8001164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART1_UART_Init+0x58>)
 80011a0:	f009 fcbe 	bl	800ab20 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011aa:	f000 f95b 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000478 	.word	0x20000478
 80011b8:	40013800 	.word	0x40013800

080011bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_USART2_UART_Init+0x5c>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_USART2_UART_Init+0x58>)
 8001202:	f009 fc8d 	bl	800ab20 <HAL_UART_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 800120c:	f000 f92a 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000500 	.word	0x20000500
 8001218:	40004400 	.word	0x40004400

0800121c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <MX_USART3_UART_Init+0x5c>)
 8001224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART3_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001248:	f44f 7240 	mov.w	r2, #768	; 0x300
 800124c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART3_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_USART3_UART_Init+0x58>)
 8001262:	f009 fc5d 	bl	800ab20 <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 800126c:	f000 f8fa 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000588 	.word	0x20000588
 8001278:	40004800 	.word	0x40004800

0800127c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <MX_USB_PCD_Init+0x4c>)
 8001284:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 8001288:	2208      	movs	r2, #8
 800128a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 800128e:	2202      	movs	r2, #2
 8001290:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 8001294:	2202      	movs	r2, #2
 8001296:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_USB_PCD_Init+0x48>)
 80012b2:	f006 fede 	bl	8008072 <HAL_PCD_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80012bc:	f000 f8d2 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000610 	.word	0x20000610
 80012c8:	40006800 	.word	0x40006800

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b50      	ldr	r3, [pc, #320]	; (8001424 <MX_GPIO_Init+0x158>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <MX_GPIO_Init+0x158>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <MX_GPIO_Init+0x158>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <MX_GPIO_Init+0x158>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a49      	ldr	r2, [pc, #292]	; (8001424 <MX_GPIO_Init+0x158>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <MX_GPIO_Init+0x158>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <MX_GPIO_Init+0x158>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a43      	ldr	r2, [pc, #268]	; (8001424 <MX_GPIO_Init+0x158>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <MX_GPIO_Init+0x158>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <MX_GPIO_Init+0x158>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <MX_GPIO_Init+0x158>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <MX_GPIO_Init+0x158>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <MX_GPIO_Init+0x158>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a37      	ldr	r2, [pc, #220]	; (8001424 <MX_GPIO_Init+0x158>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <MX_GPIO_Init+0x158>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 800135a:	2200      	movs	r2, #0
 800135c:	f24c 01c4 	movw	r1, #49348	; 0xc0c4
 8001360:	4831      	ldr	r0, [pc, #196]	; (8001428 <MX_GPIO_Init+0x15c>)
 8001362:	f005 ffe9 	bl	8007338 <HAL_GPIO_WritePin>
                          |ST33_VCC_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|MDM_DTR_OUT_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800136c:	482f      	ldr	r0, [pc, #188]	; (800142c <MX_GPIO_Init+0x160>)
 800136e:	f005 ffe3 	bl	8007338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDM_PWR_EN_OUT_Pin MDM_RST_OUT_Pin LED2_Pin LED3_Pin
                           ST33_VCC_CTRL_Pin */
  GPIO_InitStruct.Pin = MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 8001372:	f24c 03c4 	movw	r3, #49348	; 0xc0c4
 8001376:	617b      	str	r3, [r7, #20]
                          |ST33_VCC_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4827      	ldr	r0, [pc, #156]	; (8001428 <MX_GPIO_Init+0x15c>)
 800138c:	f005 fd80 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001396:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_GPIO_Init+0x160>)
 80013a8:	f005 fd72 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f005 fd60 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin MDM_DTR_OUT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MDM_DTR_OUT_Pin;
 80013d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <MX_GPIO_Init+0x160>)
 80013ea:	f005 fd51 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MDM_RING_Pin */
  GPIO_InitStruct.Pin = MDM_RING_Pin;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MDM_RING_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MX_GPIO_Init+0x15c>)
 8001406:	f005 fd43 	bl	8006e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2105      	movs	r1, #5
 800140e:	2028      	movs	r0, #40	; 0x28
 8001410:	f005 fc94 	bl	8006d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001414:	2028      	movs	r0, #40	; 0x28
 8001416:	f005 fcad 	bl	8006d74 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800

08001430 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f00a fd1d 	bl	800be78 <osDelay>
 800143e:	e7fb      	b.n	8001438 <StartDefaultTask+0x8>

08001440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001452:	f004 fc95 	bl	8005d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40012c00 	.word	0x40012c00

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>

0800146e <rtosalSemaphoreNew>:
  * @param  count         - number of available resources.
  * @note   At creation semaphore max count is set to count.
  * @retval osSemaphoreId - semaphore ID for reference by other functions or NULL in case of error.
  */
osSemaphoreId rtosalSemaphoreNew(const rtosal_char_t *p_name, uint32_t count)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  osSemaphoreId retval;

#if (osCMSIS < 0x20000U)
  (void)(p_name); /* To avoid gcc/g++ warnings */
  osSemaphoreDef(SEM); /* true name can not be used when (osCMSIS < 0x20000U) */
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  retval = osSemaphoreCreate(osSemaphore(SEM), (int32_t)count); /* No issue with cast to (int32_t) */
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f00a fd09 	bl	800bea0 <osSemaphoreCreate>
 800148e:	6178      	str	r0, [r7, #20]
  };

  retval = osSemaphoreNew(count, count, &rtosal_sem_attr); /* maximum count is set to initial count */
#endif /* osCMSIS < 0x20000U */

  return (retval);
 8001490:	697b      	ldr	r3, [r7, #20]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <rtosalSemaphoreAcquire>:
  * @note   With CMSIS RTOS V1, this function returns osErrorOS when no token is available.
  *         With CMSIS RTOS V2, this function returns osErrorResource when no token is available.
  *         Conclusion: test (rtosalStatus != osOK) to be independent of osCMSIS version.
  */
rtosalStatus rtosalSemaphoreAcquire(osSemaphoreId semaphore_id, uint32_t millisec)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  rtosalStatus status;

#if (osCMSIS < 0x20000U)
  /* Due to incompatibility between V1 and V2 return type retval is converted to osStatus
     see V1 API documentation for more details */
  status = (osStatus)osSemaphoreWait(semaphore_id, millisec);
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f00a fd2c 	bl	800bf04 <osSemaphoreWait>
 80014ac:	4603      	mov	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]
#else
  uint32_t ticks = rtosal_convert_ms_to_ticks(millisec);
  status = osSemaphoreAcquire(semaphore_id, ticks);
#endif /* osCMSIS < 0x20000U */

  return (status);
 80014b0:	68fb      	ldr	r3, [r7, #12]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <rtosalSemaphoreRelease>:
  * @brief  Release a Semaphore token.
  * @param  semaphore_id - semaphore ID obtained by rtosalSemaphoreNew.
  * @retval rtosalStatus - indicate the execution status of the function.
  */
rtosalStatus rtosalSemaphoreRelease(osSemaphoreId semaphore_id)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  rtosalStatus status;
  status = osSemaphoreRelease(semaphore_id);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f00a fd6c 	bl	800bfa0 <osSemaphoreRelease>
 80014c8:	60f8      	str	r0, [r7, #12]
  return (status);
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_MspInit+0x4c>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_MspInit+0x4c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6613      	str	r3, [r2, #96]	; 0x60
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_MspInit+0x4c>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_MspInit+0x4c>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6593      	str	r3, [r2, #88]	; 0x58
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_MspInit+0x4c>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210f      	movs	r1, #15
 800150e:	f06f 0001 	mvn.w	r0, #1
 8001512:	f005 fc13 	bl	8006d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a15      	ldr	r2, [pc, #84]	; (8001598 <HAL_ADC_MspInit+0x74>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d123      	bne.n	800158e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_ADC_MspInit+0x78>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_ADC_MspInit+0x78>)
 800154c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_ADC_MspInit+0x78>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_ADC_MspInit+0x78>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_ADC_MspInit+0x78>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_ADC_MspInit+0x78>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A2_Pin|ARD_A5_Pin|ARD_A3_Pin;
 8001576:	230f      	movs	r3, #15
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800157a:	230b      	movs	r3, #11
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_ADC_MspInit+0x7c>)
 800158a:	f005 fc81 	bl	8006e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	50040000 	.word	0x50040000
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000800 	.word	0x48000800

080015a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0a4      	sub	sp, #144	; 0x90
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2268      	movs	r2, #104	; 0x68
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00c fde7 	bl	800e198 <memset>
  if(hi2c->Instance==I2C1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a21      	ldr	r2, [pc, #132]	; (8001654 <HAL_I2C_MspInit+0xb0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d13a      	bne.n	800164a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d8:	2300      	movs	r3, #0
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4618      	mov	r0, r3
 80015e2:	f007 fe4b 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015ec:	f7ff ff3a 	bl	8001464 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_I2C_MspInit+0xb4>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_I2C_MspInit+0xb4>)
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_I2C_MspInit+0xb4>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001608:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	2312      	movs	r3, #18
 8001610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001614:	2301      	movs	r3, #1
 8001616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001620:	2304      	movs	r3, #4
 8001622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800162a:	4619      	mov	r1, r3
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <HAL_I2C_MspInit+0xb8>)
 800162e:	f005 fc2f 	bl	8006e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_I2C_MspInit+0xb4>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_I2C_MspInit+0xb4>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_I2C_MspInit+0xb4>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3790      	adds	r7, #144	; 0x90
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400
 8001658:	40021000 	.word	0x40021000
 800165c:	48000400 	.word	0x48000400

08001660 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_I2C_MspDeInit+0x3c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10f      	bne.n	8001692 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_I2C_MspDeInit+0x40>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_I2C_MspDeInit+0x40>)
 8001678:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800167c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <HAL_I2C_MspDeInit+0x44>)
 8001684:	f005 fd7e 	bl	8007184 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_I2C_MspDeInit+0x44>)
 800168e:	f005 fd79 	bl	8007184 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005400 	.word	0x40005400
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000400 	.word	0x48000400

080016a8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a26      	ldr	r2, [pc, #152]	; (8001760 <HAL_QSPI_MspInit+0xb8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d145      	bne.n	8001756 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 80016cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ce:	4a25      	ldr	r2, [pc, #148]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6513      	str	r3, [r2, #80]	; 0x50
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 80016d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_QSPI_MspInit+0xbc>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> QUADSPI_BK1_NCS
    PB10     ------> QUADSPI_CLK
    PB0     ------> QUADSPI_BK1_IO1
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001722:	230a      	movs	r3, #10
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f005 fbae 	bl	8006e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0;
 8001734:	f640 4303 	movw	r3, #3075	; 0xc03
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001746:	230a      	movs	r3, #10
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_QSPI_MspInit+0xc0>)
 8001752:	f005 fb9d 	bl	8006e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	a0001000 	.word	0xa0001000
 8001764:	40021000 	.word	0x40021000
 8001768:	48000400 	.word	0x48000400

0800176c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_RNG_MspInit+0x38>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10b      	bne.n	8001796 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_RNG_MspInit+0x3c>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_RNG_MspInit+0x3c>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <HAL_RNG_MspInit+0x3c>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	50060800 	.word	0x50060800
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b09c      	sub	sp, #112	; 0x70
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	2268      	movs	r2, #104	; 0x68
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f00c fceb 	bl	800e198 <memset>
  if(hrtc->Instance==RTC)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_RTC_MspInit+0x58>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d117      	bne.n	80017fc <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4618      	mov	r0, r3
 80017de:	f007 fd4d 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017e8:	f7ff fe3c 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RTC_MspInit+0x5c>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_RTC_MspInit+0x5c>)
 80017f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3770      	adds	r7, #112	; 0x70
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40002800 	.word	0x40002800
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08e      	sub	sp, #56	; 0x38
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_SPI_MspInit+0x150>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d146      	bne.n	80018bc <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800182e:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001838:	6613      	str	r3, [r2, #96]	; 0x60
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <HAL_SPI_MspInit+0x154>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	623b      	str	r3, [r7, #32]
 8001844:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a45      	ldr	r2, [pc, #276]	; (8001960 <HAL_SPI_MspInit+0x154>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b40      	ldr	r3, [pc, #256]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_SPI_MspInit+0x154>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001876:	f248 0320 	movw	r3, #32800	; 0x8020
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001888:	2305      	movs	r3, #5
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001896:	f005 fafb 	bl	8006e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800189a:	2330      	movs	r3, #48	; 0x30
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018aa:	2305      	movs	r3, #5
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	482b      	ldr	r0, [pc, #172]	; (8001964 <HAL_SPI_MspInit+0x158>)
 80018b6:	f005 faeb 	bl	8006e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018ba:	e04a      	b.n	8001952 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a29      	ldr	r2, [pc, #164]	; (8001968 <HAL_SPI_MspInit+0x15c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d145      	bne.n	8001952 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a25      	ldr	r2, [pc, #148]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_SPI_MspInit+0x154>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST33_MOSI_Pin|ST33_MISO_Pin|ST33_SCK_Pin;
 800190e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001920:	2306      	movs	r3, #6
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	4810      	ldr	r0, [pc, #64]	; (800196c <HAL_SPI_MspInit+0x160>)
 800192c:	f005 fab0 	bl	8006e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ST33_CS_Pin;
 8001930:	2310      	movs	r3, #16
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001940:	2306      	movs	r3, #6
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ST33_CS_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194e:	f005 fa9f 	bl	8006e90 <HAL_GPIO_Init>
}
 8001952:	bf00      	nop
 8001954:	3738      	adds	r7, #56	; 0x38
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40013000 	.word	0x40013000
 8001960:	40021000 	.word	0x40021000
 8001964:	48000400 	.word	0x48000400
 8001968:	40003c00 	.word	0x40003c00
 800196c:	48000800 	.word	0x48000800

08001970 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d10c      	bne.n	800199c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_TIM_PWM_MspInit+0x5c>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_TIM_PWM_MspInit+0x5c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_TIM_PWM_MspInit+0x5c>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800199a:	e010      	b.n	80019be <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_TIM_PWM_MspInit+0x60>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10b      	bne.n	80019be <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_TIM_PWM_MspInit+0x5c>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_TIM_PWM_MspInit+0x5c>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_TIM_PWM_MspInit+0x5c>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40000400 	.word	0x40000400

080019d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f4:	d11c      	bne.n	8001a30 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_TIM_MspPostInit+0xa8>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_TIM_MspPostInit+0xa8>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_TIM_MspPostInit+0xa8>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4815      	ldr	r0, [pc, #84]	; (8001a80 <HAL_TIM_MspPostInit+0xac>)
 8001a2a:	f005 fa31 	bl	8006e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a2e:	e021      	b.n	8001a74 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_TIM_MspPostInit+0xb0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11c      	bne.n	8001a74 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_TIM_MspPostInit+0xa8>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_TIM_MspPostInit+0xa8>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_TIM_MspPostInit+0xa8>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a64:	2302      	movs	r3, #2
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	; (8001a88 <HAL_TIM_MspPostInit+0xb4>)
 8001a70:	f005 fa0e 	bl	8006e90 <HAL_GPIO_Init>
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400
 8001a84:	40000400 	.word	0x40000400
 8001a88:	48000800 	.word	0x48000800

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b0aa      	sub	sp, #168	; 0xa8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	2268      	movs	r2, #104	; 0x68
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00c fb73 	bl	800e198 <memset>
  if(huart->Instance==USART1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a91      	ldr	r2, [pc, #580]	; (8001cfc <HAL_UART_MspInit+0x270>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d145      	bne.n	8001b48 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f007 fbd7 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad4:	f7ff fcc6 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad8:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001adc:	4a88      	ldr	r2, [pc, #544]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae4:	4b86      	ldr	r3, [pc, #536]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b83      	ldr	r3, [pc, #524]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	4a82      	ldr	r2, [pc, #520]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D8_Pin;
 8001b08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b22:	2307      	movs	r3, #7
 8001b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b32:	f005 f9ad 	bl	8006e90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	2025      	movs	r0, #37	; 0x25
 8001b3c:	f005 f8fe 	bl	8006d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b40:	2025      	movs	r0, #37	; 0x25
 8001b42:	f005 f917 	bl	8006d74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b46:	e0d5      	b.n	8001cf4 <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6d      	ldr	r2, [pc, #436]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d144      	bne.n	8001bdc <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f007 fb8c 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001b6a:	f7ff fc7b 	bl	8001464 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6e:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7a:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a5d      	ldr	r2, [pc, #372]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_D0_Pin|ARD_D1_Pin|ARD_A0_Pin;
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f005 f963 	bl	8006e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	2026      	movs	r0, #38	; 0x26
 8001bd0:	f005 f8b4 	bl	8006d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd4:	2026      	movs	r0, #38	; 0x26
 8001bd6:	f005 f8cd 	bl	8006d74 <HAL_NVIC_EnableIRQ>
}
 8001bda:	e08b      	b.n	8001cf4 <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_UART_MspInit+0x27c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	f040 8086 	bne.w	8001cf4 <HAL_UART_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001be8:	2304      	movs	r3, #4
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f007 fb41 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8001c00:	f7ff fc30 	bl	8001464 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c04:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a3d      	ldr	r2, [pc, #244]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1c:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	4a37      	ldr	r2, [pc, #220]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MDM_UART_RTS_Pin;
 8001c64:	2304      	movs	r3, #4
 8001c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(MDM_UART_RTS_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c86:	4619      	mov	r1, r3
 8001c88:	4820      	ldr	r0, [pc, #128]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001c8a:	f005 f901 	bl	8006e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_TX_Pin|MDM_UART_RX_Pin;
 8001c8e:	2330      	movs	r3, #48	; 0x30
 8001c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4817      	ldr	r0, [pc, #92]	; (8001d10 <HAL_UART_MspInit+0x284>)
 8001cb4:	f005 f8ec 	bl	8006e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_CTS_Pin;
 8001cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(MDM_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001ce0:	f005 f8d6 	bl	8006e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	2027      	movs	r0, #39	; 0x27
 8001cea:	f005 f827 	bl	8006d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cee:	2027      	movs	r0, #39	; 0x27
 8001cf0:	f005 f840 	bl	8006d74 <HAL_NVIC_EnableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	37a8      	adds	r7, #168	; 0xa8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40004400 	.word	0x40004400
 8001d08:	40004800 	.word	0x40004800
 8001d0c:	48000c00 	.word	0x48000c00
 8001d10:	48000800 	.word	0x48000800
 8001d14:	48000400 	.word	0x48000400

08001d18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_PCD_MspInit+0x80>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d129      	bne.n	8001d8e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_PCD_MspInit+0x84>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_PCD_MspInit+0x84>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_PCD_MspInit+0x84>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8001d64:	230a      	movs	r3, #10
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f005 f88d 	bl	8006e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_PCD_MspInit+0x84>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_PCD_MspInit+0x84>)
 8001d7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_PCD_MspInit+0x84>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	; 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40006800 	.word	0x40006800
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dae:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_InitTick+0xc8>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <HAL_InitTick+0xc8>)
 8001db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_InitTick+0xc8>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f007 f9c1 	bl	8009158 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dd6:	f007 f9a9 	bl	800912c <HAL_RCC_GetPCLK2Freq>
 8001dda:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_InitTick+0xcc>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	0c9b      	lsrs	r3, r3, #18
 8001de6:	3b01      	subs	r3, #1
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_InitTick+0xd0>)
 8001dec:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_InitTick+0xd4>)
 8001dee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_InitTick+0xd0>)
 8001df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_InitTick+0xd0>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_InitTick+0xd0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_InitTick+0xd0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_InitTick+0xd0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e10:	4817      	ldr	r0, [pc, #92]	; (8001e70 <HAL_InitTick+0xd0>)
 8001e12:	f007 ffba 	bl	8009d8a <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11b      	bne.n	8001e5c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e24:	4812      	ldr	r0, [pc, #72]	; (8001e70 <HAL_InitTick+0xd0>)
 8001e26:	f008 f811 	bl	8009e4c <HAL_TIM_Base_Start_IT>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d111      	bne.n	8001e5c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e38:	2019      	movs	r0, #25
 8001e3a:	f004 ff9b 	bl	8006d74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d808      	bhi.n	8001e56 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	2019      	movs	r0, #25
 8001e4a:	f004 ff77 	bl	8006d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_InitTick+0xd8>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e002      	b.n	8001e5c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	20000a40 	.word	0x20000a40
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	20000164 	.word	0x20000164

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	e7fe      	b.n	8001e80 <NMI_Handler+0x4>

08001e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <MemManage_Handler+0x4>

08001e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001eae:	f008 f880 	bl	8009fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000a40 	.word	0x20000a40

08001ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <USART1_IRQHandler+0x10>)
 8001ec2:	f008 ff05 	bl	800acd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000478 	.word	0x20000478

08001ed0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <USART2_IRQHandler+0x10>)
 8001ed6:	f008 fefb 	bl	800acd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000500 	.word	0x20000500

08001ee4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USART3_IRQHandler+0x10>)
 8001eea:	f008 fef1 	bl	800acd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000588 	.word	0x20000588

08001ef8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MDM_RING_Pin);
 8001efc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f00:	f005 fa32 	bl	8007368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001f04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f08:	f005 fa2e 	bl	8007368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f00c f932 	bl	800e1a8 <__errno>
 8001f44:	4603      	mov	r3, r0
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20028000 	.word	0x20028000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	20000a8c 	.word	0x20000a8c
 8001f78:	20001a18 	.word	0x20001a18

08001f7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <SystemInit+0x20>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <SystemInit+0x20>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa4:	f7ff ffea 	bl	8001f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f00c f8f1 	bl	800e1b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd2:	f7fe fcb7 	bl	8000944 <main>

08001fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8001fe4:	0800ec50 	.word	0x0800ec50
  ldr r2, =_sbss
 8001fe8:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8001fec:	20001a18 	.word	0x20001a18

08001ff0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_IRQHandler>

08001ff2 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  return ((int32_t)HAL_GetTick());
 8001ff6:	f003 fed7 	bl	8005da8 <HAL_GetTick>
 8001ffa:	4603      	mov	r3, r0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <BSP_I2C1_Init+0xa0>)
 800200c:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <BSP_I2C1_Init+0xa4>)
 800200e:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter == 0U)
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <BSP_I2C1_Init+0xa8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d13e      	bne.n	8002096 <BSP_I2C1_Init+0x96>
  {
    I2C1InitCounter++;
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <BSP_I2C1_Init+0xa8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <BSP_I2C1_Init+0xa8>)
 8002020:	6013      	str	r3, [r2, #0]

#if (USE_I2C1_SEMAPHORE == 1)
    if (I2C1_semaphore == NULL)
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <BSP_I2C1_Init+0xac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <BSP_I2C1_Init+0x38>
    {
      I2C1_semaphore = rtosalSemaphoreNew((const rtosal_char_t *)"I2C1_ACCESS_SEMA", 1U);
 800202a:	2101      	movs	r1, #1
 800202c:	4820      	ldr	r0, [pc, #128]	; (80020b0 <BSP_I2C1_Init+0xb0>)
 800202e:	f7ff fa1e 	bl	800146e <rtosalSemaphoreNew>
 8002032:	4603      	mov	r3, r0
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <BSP_I2C1_Init+0xac>)
 8002036:	6013      	str	r3, [r2, #0]
    }
#endif /* (USE_I2C1_SEMAPHORE == 1) */

    TAKE_SEMA_I2C1();
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <BSP_I2C1_Init+0xac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <BSP_I2C1_Init+0x4e>
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <BSP_I2C1_Init+0xac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f241 3188 	movw	r1, #5000	; 0x1388
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fa26 	bl	800149a <rtosalSemaphoreAcquire>
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800204e:	4814      	ldr	r0, [pc, #80]	; (80020a0 <BSP_I2C1_Init+0xa0>)
 8002050:	f005 fca6 	bl	80079a0 <HAL_I2C_GetState>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d114      	bne.n	8002084 <BSP_I2C1_Init+0x84>
        return BSP_ERROR_MSP_FAILURE;
      }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 1) */

      /* Init the I2C */
      if (I2C1_Configuration() != BSP_ERROR_NONE)
 800205a:	f000 f8f5 	bl	8002248 <I2C1_Configuration>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <BSP_I2C1_Init+0x6c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002064:	f06f 0307 	mvn.w	r3, #7
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	e00b      	b.n	8002084 <BSP_I2C1_Init+0x84>
      }
      else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206c:	2100      	movs	r1, #0
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <BSP_I2C1_Init+0xa0>)
 8002070:	f005 ff68 	bl	8007f44 <HAL_I2CEx_ConfigAnalogFilter>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <BSP_I2C1_Init+0x82>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800207a:	f06f 0307 	mvn.w	r3, #7
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	e000      	b.n	8002084 <BSP_I2C1_Init+0x84>
      }
      else
      {
        __NOP(); /* to avoid MISRA error */
 8002082:	bf00      	nop
      }
    }
    RELEASE_SEMA_I2C1();
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <BSP_I2C1_Init+0xac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <BSP_I2C1_Init+0x96>
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <BSP_I2C1_Init+0xac>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fa12 	bl	80014ba <rtosalSemaphoreRelease>
  }

  return ret;
 8002096:	687b      	ldr	r3, [r7, #4]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000244 	.word	0x20000244
 80020a4:	40005400 	.word	0x40005400
 80020a8:	20000a94 	.word	0x20000a94
 80020ac:	20000a90 	.word	0x20000a90
 80020b0:	0800ebb0 	.word	0x0800ebb0

080020b4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]

  TAKE_SEMA_I2C1();
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <BSP_I2C1_DeInit+0x68>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <BSP_I2C1_DeInit+0x20>
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <BSP_I2C1_DeInit+0x68>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f9e3 	bl	800149a <rtosalSemaphoreAcquire>
  if (I2C1InitCounter > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <BSP_I2C1_DeInit+0x6c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d011      	beq.n	8002100 <BSP_I2C1_DeInit+0x4c>
  {
    I2C1InitCounter--;
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <BSP_I2C1_DeInit+0x6c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <BSP_I2C1_DeInit+0x6c>)
 80020e4:	6013      	str	r3, [r2, #0]
    if (I2C1InitCounter == 0U)
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <BSP_I2C1_DeInit+0x6c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <BSP_I2C1_DeInit+0x4c>
    {
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <BSP_I2C1_DeInit+0x70>)
 80020f0:	f005 f9f8 	bl	80074e4 <HAL_I2C_DeInit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <BSP_I2C1_DeInit+0x4c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80020fa:	f06f 0307 	mvn.w	r3, #7
 80020fe:	607b      	str	r3, [r7, #4]
      }
    }
  }
  RELEASE_SEMA_I2C1();
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <BSP_I2C1_DeInit+0x68>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <BSP_I2C1_DeInit+0x5e>
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <BSP_I2C1_DeInit+0x68>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff f9d4 	bl	80014ba <rtosalSemaphoreRelease>
  return ret;
 8002112:	687b      	ldr	r3, [r7, #4]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000a90 	.word	0x20000a90
 8002120:	20000a94 	.word	0x20000a94
 8002124:	20000244 	.word	0x20000244

08002128 <BSP_I2C1_WriteReg_8b>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg_8b(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af04      	add	r7, sp, #16
 800212e:	60ba      	str	r2, [r7, #8]
 8002130:	461a      	mov	r2, r3
 8002132:	4603      	mov	r3, r0
 8002134:	81fb      	strh	r3, [r7, #14]
 8002136:	460b      	mov	r3, r1
 8002138:	81bb      	strh	r3, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]

  TAKE_SEMA_I2C1();
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <BSP_I2C1_WriteReg_8b+0x88>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <BSP_I2C1_WriteReg_8b+0x30>
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <BSP_I2C1_WriteReg_8b+0x88>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f9a1 	bl	800149a <rtosalSemaphoreAcquire>
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002158:	89ba      	ldrh	r2, [r7, #12]
 800215a:	89f9      	ldrh	r1, [r7, #14]
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	4811      	ldr	r0, [pc, #68]	; (80021b4 <BSP_I2C1_WriteReg_8b+0x8c>)
 800216e:	f005 f9e9 	bl	8007544 <HAL_I2C_Mem_Write>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00c      	beq.n	8002192 <BSP_I2C1_WriteReg_8b+0x6a>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002178:	480e      	ldr	r0, [pc, #56]	; (80021b4 <BSP_I2C1_WriteReg_8b+0x8c>)
 800217a:	f005 fc1f 	bl	80079bc <HAL_I2C_GetError>
 800217e:	4603      	mov	r3, r0
 8002180:	2b04      	cmp	r3, #4
 8002182:	d103      	bne.n	800218c <BSP_I2C1_WriteReg_8b+0x64>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002184:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e002      	b.n	8002192 <BSP_I2C1_WriteReg_8b+0x6a>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800218c:	f06f 0303 	mvn.w	r3, #3
 8002190:	617b      	str	r3, [r7, #20]
    }
  }
  RELEASE_SEMA_I2C1();
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <BSP_I2C1_WriteReg_8b+0x88>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <BSP_I2C1_WriteReg_8b+0x7c>
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <BSP_I2C1_WriteReg_8b+0x88>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f98b 	bl	80014ba <rtosalSemaphoreRelease>
  return ret;
 80021a4:	697b      	ldr	r3, [r7, #20]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000a90 	.word	0x20000a90
 80021b4:	20000244 	.word	0x20000244

080021b8 <BSP_I2C1_ReadReg_8b>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg_8b(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af04      	add	r7, sp, #16
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	81fb      	strh	r3, [r7, #14]
 80021c6:	460b      	mov	r3, r1
 80021c8:	81bb      	strh	r3, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]

  TAKE_SEMA_I2C1();
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <BSP_I2C1_ReadReg_8b+0x88>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <BSP_I2C1_ReadReg_8b+0x30>
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <BSP_I2C1_ReadReg_8b+0x88>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f241 3188 	movw	r1, #5000	; 0x1388
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f959 	bl	800149a <rtosalSemaphoreAcquire>
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80021e8:	89ba      	ldrh	r2, [r7, #12]
 80021ea:	89f9      	ldrh	r1, [r7, #14]
 80021ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2301      	movs	r3, #1
 80021fc:	4811      	ldr	r0, [pc, #68]	; (8002244 <BSP_I2C1_ReadReg_8b+0x8c>)
 80021fe:	f005 fab5 	bl	800776c <HAL_I2C_Mem_Read>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00c      	beq.n	8002222 <BSP_I2C1_ReadReg_8b+0x6a>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002208:	480e      	ldr	r0, [pc, #56]	; (8002244 <BSP_I2C1_ReadReg_8b+0x8c>)
 800220a:	f005 fbd7 	bl	80079bc <HAL_I2C_GetError>
 800220e:	4603      	mov	r3, r0
 8002210:	2b04      	cmp	r3, #4
 8002212:	d103      	bne.n	800221c <BSP_I2C1_ReadReg_8b+0x64>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002214:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e002      	b.n	8002222 <BSP_I2C1_ReadReg_8b+0x6a>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800221c:	f06f 0303 	mvn.w	r3, #3
 8002220:	617b      	str	r3, [r7, #20]
    }
  }
  RELEASE_SEMA_I2C1();
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <BSP_I2C1_ReadReg_8b+0x88>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <BSP_I2C1_ReadReg_8b+0x7c>
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <BSP_I2C1_ReadReg_8b+0x88>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f943 	bl	80014ba <rtosalSemaphoreRelease>
  return ret;
 8002234:	697b      	ldr	r3, [r7, #20]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000a90 	.word	0x20000a90
 8002244:	20000244 	.word	0x20000244

08002248 <I2C1_Configuration>:

/** @defgroup STM32L462E_CELL1_BUS_Private_Functions STM32L462E_CELL1 BUS Private Functions
  * @{
  */
static int32_t I2C1_Configuration(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  int32_t ret;

  hi2c1.Instance = I2C1;
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <I2C1_Configuration+0x8c>)
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <I2C1_Configuration+0x90>)
 8002252:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <I2C1_Configuration+0x8c>)
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <I2C1_Configuration+0x94>)
 8002258:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <I2C1_Configuration+0x8c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <I2C1_Configuration+0x8c>)
 8002262:	2201      	movs	r2, #1
 8002264:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <I2C1_Configuration+0x8c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <I2C1_Configuration+0x8c>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <I2C1_Configuration+0x8c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <I2C1_Configuration+0x8c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <I2C1_Configuration+0x8c>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002284:	4813      	ldr	r0, [pc, #76]	; (80022d4 <I2C1_Configuration+0x8c>)
 8002286:	f005 f892 	bl	80073ae <HAL_I2C_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <I2C1_Configuration+0x50>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8002290:	f06f 0307 	mvn.w	r3, #7
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	e017      	b.n	80022c8 <I2C1_Configuration+0x80>
  }
  /** Configure Analogue filter
    */
  else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002298:	2100      	movs	r1, #0
 800229a:	480e      	ldr	r0, [pc, #56]	; (80022d4 <I2C1_Configuration+0x8c>)
 800229c:	f005 fe52 	bl	8007f44 <HAL_I2CEx_ConfigAnalogFilter>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <I2C1_Configuration+0x66>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80022a6:	f06f 0307 	mvn.w	r3, #7
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	e00c      	b.n	80022c8 <I2C1_Configuration+0x80>
  }
  /** Configure Digital filter
    */
  else if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022ae:	2100      	movs	r1, #0
 80022b0:	4808      	ldr	r0, [pc, #32]	; (80022d4 <I2C1_Configuration+0x8c>)
 80022b2:	f005 fe92 	bl	8007fda <HAL_I2CEx_ConfigDigitalFilter>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <I2C1_Configuration+0x7c>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80022bc:	f06f 0307 	mvn.w	r3, #7
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	e001      	b.n	80022c8 <I2C1_Configuration+0x80>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
  }

  return (ret);
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000244 	.word	0x20000244
 80022d8:	40005400 	.word	0x40005400
 80022dc:	10909cec 	.word	0x10909cec

080022e0 <BSP_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <BSP_ENV_SENSOR_Init+0x24>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d034      	beq.n	800236c <BSP_ENV_SENSOR_Init+0x8c>
 8002302:	e067      	b.n	80023d4 <BSP_ENV_SENSOR_Init+0xf4>
  {
#if (USE_STM32L462E_CELL1_ENV_SENSOR_HTS221_0 == 1)
    case STM32L462E_CELL1_HTS221_0:
      /* Register Bus IOs for this component */
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8002304:	6838      	ldr	r0, [r7, #0]
 8002306:	f000 f937 	bl	8002578 <HTS221_0_Probe>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <BSP_ENV_SENSOR_Init+0x38>
      {
        ret = BSP_ERROR_NO_INIT;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
          {
            component_functions |= ENV_PRESSURE;
          }
        }
      }
      break;
 8002316:	e061      	b.n	80023dc <BSP_ENV_SENSOR_Init+0xfc>
        if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002318:	4a50      	ldr	r2, [pc, #320]	; (800245c <BSP_ENV_SENSOR_Init+0x17c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	494f      	ldr	r1, [pc, #316]	; (8002460 <BSP_ENV_SENSOR_Init+0x180>)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800232a:	f107 0108 	add.w	r1, r7, #8
 800232e:	4610      	mov	r0, r2
 8002330:	4798      	blx	r3
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <BSP_ENV_SENSOR_Init+0x60>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002338:	f06f 0306 	mvn.w	r3, #6
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800233e:	e04d      	b.n	80023dc <BSP_ENV_SENSOR_Init+0xfc>
          if (cap.Temperature == 1U)
 8002340:	7a3b      	ldrb	r3, [r7, #8]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d103      	bne.n	800234e <BSP_ENV_SENSOR_Init+0x6e>
            component_functions |= ENV_TEMPERATURE;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
          if (cap.Humidity == 1U)
 800234e:	7abb      	ldrb	r3, [r7, #10]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d103      	bne.n	800235c <BSP_ENV_SENSOR_Init+0x7c>
            component_functions |= ENV_HUMIDITY;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	61bb      	str	r3, [r7, #24]
          if (cap.Pressure == 1U)
 800235c:	7a7b      	ldrb	r3, [r7, #9]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d13c      	bne.n	80023dc <BSP_ENV_SENSOR_Init+0xfc>
            component_functions |= ENV_PRESSURE;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
      break;
 800236a:	e037      	b.n	80023dc <BSP_ENV_SENSOR_Init+0xfc>
#endif /* (USE_STM32L462E_CELL1_ENV_SENSOR_HTS221_0 == 1) */

#if (USE_STM32L462E_CELL1_ENV_SENSOR_LPS22HH_0 == 1)
    case STM32L462E_CELL1_LPS22HH_0:
      /* Register Bus IOs for this component */
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800236c:	6838      	ldr	r0, [r7, #0]
 800236e:	f000 f9b5 	bl	80026dc <LPS22HH_0_Probe>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <BSP_ENV_SENSOR_Init+0xa0>
      {
        ret = BSP_ERROR_NO_INIT;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
          {
            component_functions |= ENV_PRESSURE;
          }
        }
      }
      break;
 800237e:	e02f      	b.n	80023e0 <BSP_ENV_SENSOR_Init+0x100>
        if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002380:	4a36      	ldr	r2, [pc, #216]	; (800245c <BSP_ENV_SENSOR_Init+0x17c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4935      	ldr	r1, [pc, #212]	; (8002460 <BSP_ENV_SENSOR_Init+0x180>)
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002392:	f107 0108 	add.w	r1, r7, #8
 8002396:	4610      	mov	r0, r2
 8002398:	4798      	blx	r3
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <BSP_ENV_SENSOR_Init+0xc8>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80023a0:	f06f 0306 	mvn.w	r3, #6
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80023a6:	e01b      	b.n	80023e0 <BSP_ENV_SENSOR_Init+0x100>
          if (cap.Temperature == 1U)
 80023a8:	7a3b      	ldrb	r3, [r7, #8]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d103      	bne.n	80023b6 <BSP_ENV_SENSOR_Init+0xd6>
            component_functions |= ENV_TEMPERATURE;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
          if (cap.Humidity == 1U)
 80023b6:	7abb      	ldrb	r3, [r7, #10]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d103      	bne.n	80023c4 <BSP_ENV_SENSOR_Init+0xe4>
            component_functions |= ENV_HUMIDITY;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	61bb      	str	r3, [r7, #24]
          if (cap.Pressure == 1U)
 80023c4:	7a7b      	ldrb	r3, [r7, #9]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d10a      	bne.n	80023e0 <BSP_ENV_SENSOR_Init+0x100>
            component_functions |= ENV_PRESSURE;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
      break;
 80023d2:	e005      	b.n	80023e0 <BSP_ENV_SENSOR_Init+0x100>
#endif /* (USE_STM32L462E_CELL1_ENV_SENSOR_LPS22HH_0 == 1) */

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80023d4:	f06f 0301 	mvn.w	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80023da:	e002      	b.n	80023e2 <BSP_ENV_SENSOR_Init+0x102>
      break;
 80023dc:	bf00      	nop
 80023de:	e000      	b.n	80023e2 <BSP_ENV_SENSOR_Init+0x102>
      break;
 80023e0:	bf00      	nop
  }

  if (ret == BSP_ERROR_NONE)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d134      	bne.n	8002452 <BSP_ENV_SENSOR_Init+0x172>
  {
    for (i = 0; i < STM32L462E_CELL1_ENV_FUNCTIONS_NBR; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	e02e      	b.n	800244c <BSP_ENV_SENSOR_Init+0x16c>
    {
      if (((Functions & function) == function) && ((component_functions & function) == function))
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	4013      	ands	r3, r2
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d122      	bne.n	8002440 <BSP_ENV_SENSOR_Init+0x160>
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	4013      	ands	r3, r2
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	429a      	cmp	r2, r3
 8002404:	d11c      	bne.n	8002440 <BSP_ENV_SENSOR_Init+0x160>
      {
        /* protection to not exceed FunctionIndexEnv array size */
        if (function <= 4U)
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d819      	bhi.n	8002440 <BSP_ENV_SENSOR_Init+0x160>
        {
          if (EnvFuncDrv[Instance][FunctionIndexEnv[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <BSP_ENV_SENSOR_Init+0x184>)
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002414:	4814      	ldr	r0, [pc, #80]	; (8002468 <BSP_ENV_SENSOR_Init+0x188>)
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	440b      	add	r3, r1
 8002420:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	490e      	ldr	r1, [pc, #56]	; (8002460 <BSP_ENV_SENSOR_Init+0x180>)
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800242e:	4610      	mov	r0, r2
 8002430:	4798      	blx	r3
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <BSP_ENV_SENSOR_Init+0x160>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8002438:	f06f 0304 	mvn.w	r3, #4
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800243e:	e008      	b.n	8002452 <BSP_ENV_SENSOR_Init+0x172>
          }
        }
      }
      function = function << 1;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	623b      	str	r3, [r7, #32]
    for (i = 0; i < STM32L462E_CELL1_ENV_FUNCTIONS_NBR; i++)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d9cd      	bls.n	80023ee <BSP_ENV_SENSOR_Init+0x10e>
    }
  }
  return ret;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000ab8 	.word	0x20000ab8
 8002460:	20000a98 	.word	0x20000a98
 8002464:	20000064 	.word	0x20000064
 8002468:	20000aa0 	.word	0x20000aa0

0800246c <BSP_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= STM32L462E_CELL1_ENV_INSTANCES_NBR)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d903      	bls.n	8002484 <BSP_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800247c:	f06f 0301 	mvn.w	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	e028      	b.n	80024d6 <BSP_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8002484:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <BSP_ENV_SENSOR_Enable+0x74>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4013      	ands	r3, r2
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d11c      	bne.n	80024d0 <BSP_ENV_SENSOR_Enable+0x64>
    {
      /* try to enable sensor's requested function */
      if (EnvFuncDrv[Instance][FunctionIndexEnv[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <BSP_ENV_SENSOR_Enable+0x78>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800249e:	4812      	ldr	r0, [pc, #72]	; (80024e8 <BSP_ENV_SENSOR_Enable+0x7c>)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	490e      	ldr	r1, [pc, #56]	; (80024ec <BSP_ENV_SENSOR_Enable+0x80>)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80024b8:	4610      	mov	r0, r2
 80024ba:	4798      	blx	r3
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <BSP_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80024c2:	f06f 0304 	mvn.w	r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e005      	b.n	80024d6 <BSP_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e002      	b.n	80024d6 <BSP_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80024d0:	f06f 0301 	mvn.w	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000ac0 	.word	0x20000ac0
 80024e4:	20000064 	.word	0x20000064
 80024e8:	20000aa0 	.word	0x20000aa0
 80024ec:	20000a98 	.word	0x20000a98

080024f0 <BSP_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= STM32L462E_CELL1_ENV_INSTANCES_NBR)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d903      	bls.n	800250a <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002502:	f06f 0301 	mvn.w	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e029      	b.n	800255e <BSP_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800250a:	4a17      	ldr	r2, [pc, #92]	; (8002568 <BSP_ENV_SENSOR_GetValue+0x78>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d11d      	bne.n	8002558 <BSP_ENV_SENSOR_GetValue+0x68>
    {
      /* try to get sensor's requested function value */
      if (EnvFuncDrv[Instance][FunctionIndexEnv[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <BSP_ENV_SENSOR_GetValue+0x7c>)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002524:	4812      	ldr	r0, [pc, #72]	; (8002570 <BSP_ENV_SENSOR_GetValue+0x80>)
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	440b      	add	r3, r1
 8002530:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	490f      	ldr	r1, [pc, #60]	; (8002574 <BSP_ENV_SENSOR_GetValue+0x84>)
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4610      	mov	r0, r2
 8002542:	4798      	blx	r3
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <BSP_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800254a:	f06f 0304 	mvn.w	r3, #4
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e005      	b.n	800255e <BSP_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e002      	b.n	800255e <BSP_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8002558:	f06f 0301 	mvn.w	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800255e:	697b      	ldr	r3, [r7, #20]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000ac0 	.word	0x20000ac0
 800256c:	20000064 	.word	0x20000064
 8002570:	20000aa0 	.word	0x20000aa0
 8002574:	20000a98 	.word	0x20000a98

08002578 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b090      	sub	sp, #64	; 0x40
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8002580:	2300      	movs	r3, #0
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8002588:	23bf      	movs	r3, #191	; 0xbf
 800258a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_I2C1_Init;
 800258e:	4b45      	ldr	r3, [pc, #276]	; (80026a4 <HTS221_0_Probe+0x12c>)
 8002590:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_I2C1_DeInit;
 8002592:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <HTS221_0_Probe+0x130>)
 8002594:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_I2C1_ReadReg_8b;
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <HTS221_0_Probe+0x134>)
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_I2C1_WriteReg_8b;
 800259a:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <HTS221_0_Probe+0x138>)
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 800259e:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <HTS221_0_Probe+0x13c>)
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	4843      	ldr	r0, [pc, #268]	; (80026b8 <HTS221_0_Probe+0x140>)
 80025aa:	f000 fb9b 	bl	8002ce4 <HTS221_RegisterBusIO>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025b4:	f06f 0306 	mvn.w	r3, #6
 80025b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ba:	e06d      	b.n	8002698 <HTS221_0_Probe+0x120>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80025bc:	f107 031b 	add.w	r3, r7, #27
 80025c0:	4619      	mov	r1, r3
 80025c2:	483d      	ldr	r0, [pc, #244]	; (80026b8 <HTS221_0_Probe+0x140>)
 80025c4:	f000 fc17 	bl	8002df6 <HTS221_ReadID>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025ce:	f06f 0306 	mvn.w	r3, #6
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d4:	e060      	b.n	8002698 <HTS221_0_Probe+0x120>
  }
  else if (id != HTS221_ID)
 80025d6:	7efb      	ldrb	r3, [r7, #27]
 80025d8:	2bbc      	cmp	r3, #188	; 0xbc
 80025da:	d003      	beq.n	80025e4 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025dc:	f06f 0306 	mvn.w	r3, #6
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e2:	e059      	b.n	8002698 <HTS221_0_Probe+0x120>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4619      	mov	r1, r3
 80025ea:	4833      	ldr	r0, [pc, #204]	; (80026b8 <HTS221_0_Probe+0x140>)
 80025ec:	f000 fc1a 	bl	8002e24 <HTS221_GetCapabilities>
    EnvCtx[STM32L462E_CELL1_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80025f0:	7a3b      	ldrb	r3, [r7, #8]
 80025f2:	461a      	mov	r2, r3
 80025f4:	7a7b      	ldrb	r3, [r7, #9]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	431a      	orrs	r2, r3
                                                    uint32_t)cap.Humidity << 2);
 80025fa:	7abb      	ldrb	r3, [r7, #10]
 80025fc:	009b      	lsls	r3, r3, #2
    EnvCtx[STM32L462E_CELL1_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80025fe:	4313      	orrs	r3, r2
 8002600:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HTS221_0_Probe+0x144>)
 8002602:	6013      	str	r3, [r2, #0]

    EnvCompObj[STM32L462E_CELL1_HTS221_0] = &hts221_obj_0;
 8002604:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HTS221_0_Probe+0x148>)
 8002606:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <HTS221_0_Probe+0x140>)
 8002608:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STM32L462E_CELL1_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HTS221_0_Probe+0x14c>)
 800260c:	4a2e      	ldr	r2, [pc, #184]	; (80026c8 <HTS221_0_Probe+0x150>)
 800260e:	601a      	str	r2, [r3, #0]

    if (/* (ret == BSP_ERROR_NONE) && */ ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HTS221_0_Probe+0xce>
 800261a:	7a3b      	ldrb	r3, [r7, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d112      	bne.n	8002646 <HTS221_0_Probe+0xce>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[STM32L462E_CELL1_HTS221_0][FunctionIndexEnv[ENV_TEMPERATURE]] =
 8002620:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HTS221_0_Probe+0x154>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <HTS221_0_Probe+0x158>)
 8002626:	492b      	ldr	r1, [pc, #172]	; (80026d4 <HTS221_0_Probe+0x15c>)
 8002628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;

      if (EnvDrv[STM32L462E_CELL1_HTS221_0]->Init(EnvCompObj[STM32L462E_CELL1_HTS221_0]) != HTS221_OK)
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HTS221_0_Probe+0x14c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <HTS221_0_Probe+0x148>)
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4610      	mov	r0, r2
 8002638:	4798      	blx	r3
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HTS221_0_Probe+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002640:	f06f 0304 	mvn.w	r3, #4
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11a      	bne.n	8002682 <HTS221_0_Probe+0x10a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <HTS221_0_Probe+0x10a>
 8002656:	7abb      	ldrb	r3, [r7, #10]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d112      	bne.n	8002682 <HTS221_0_Probe+0x10a>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[STM32L462E_CELL1_HTS221_0][FunctionIndexEnv[ENV_HUMIDITY]] =
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HTS221_0_Probe+0x154>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HTS221_0_Probe+0x158>)
 8002662:	491d      	ldr	r1, [pc, #116]	; (80026d8 <HTS221_0_Probe+0x160>)
 8002664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;

      if (EnvDrv[STM32L462E_CELL1_HTS221_0]->Init(EnvCompObj[STM32L462E_CELL1_HTS221_0]) != HTS221_OK)
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HTS221_0_Probe+0x14c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <HTS221_0_Probe+0x148>)
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4610      	mov	r0, r2
 8002674:	4798      	blx	r3
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HTS221_0_Probe+0x10a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800267c:	f06f 0304 	mvn.w	r3, #4
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8002682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HTS221_0_Probe+0x120>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HTS221_0_Probe+0x120>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002692:	f06f 0304 	mvn.w	r3, #4
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8002698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800269a:	4618      	mov	r0, r3
 800269c:	3740      	adds	r7, #64	; 0x40
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	08002001 	.word	0x08002001
 80026a8:	080020b5 	.word	0x080020b5
 80026ac:	080021b9 	.word	0x080021b9
 80026b0:	08002129 	.word	0x08002129
 80026b4:	08001ff3 	.word	0x08001ff3
 80026b8:	20000ac8 	.word	0x20000ac8
 80026bc:	20000ac0 	.word	0x20000ac0
 80026c0:	20000a98 	.word	0x20000a98
 80026c4:	20000ab8 	.word	0x20000ab8
 80026c8:	2000008c 	.word	0x2000008c
 80026cc:	20000064 	.word	0x20000064
 80026d0:	20000aa0 	.word	0x20000aa0
 80026d4:	200000b0 	.word	0x200000b0
 80026d8:	2000009c 	.word	0x2000009c

080026dc <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b090      	sub	sp, #64	; 0x40
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80026ec:	23bb      	movs	r3, #187	; 0xbb
 80026ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_I2C1_Init;
 80026f2:	4b46      	ldr	r3, [pc, #280]	; (800280c <LPS22HH_0_Probe+0x130>)
 80026f4:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_I2C1_DeInit;
 80026f6:	4b46      	ldr	r3, [pc, #280]	; (8002810 <LPS22HH_0_Probe+0x134>)
 80026f8:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_I2C1_ReadReg_8b;
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <LPS22HH_0_Probe+0x138>)
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_I2C1_WriteReg_8b;
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <LPS22HH_0_Probe+0x13c>)
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 8002702:	4b46      	ldr	r3, [pc, #280]	; (800281c <LPS22HH_0_Probe+0x140>)
 8002704:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	4844      	ldr	r0, [pc, #272]	; (8002820 <LPS22HH_0_Probe+0x144>)
 800270e:	f001 f90b 	bl	8003928 <LPS22HH_RegisterBusIO>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002718:	f06f 0306 	mvn.w	r3, #6
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271e:	e06f      	b.n	8002800 <LPS22HH_0_Probe+0x124>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8002720:	f107 031b 	add.w	r3, r7, #27
 8002724:	4619      	mov	r1, r3
 8002726:	483e      	ldr	r0, [pc, #248]	; (8002820 <LPS22HH_0_Probe+0x144>)
 8002728:	f001 f9a7 	bl	8003a7a <LPS22HH_ReadID>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002732:	f06f 0306 	mvn.w	r3, #6
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002738:	e062      	b.n	8002800 <LPS22HH_0_Probe+0x124>
  }
  else if (id != LPS22HH_ID)
 800273a:	7efb      	ldrb	r3, [r7, #27]
 800273c:	2bb3      	cmp	r3, #179	; 0xb3
 800273e:	d003      	beq.n	8002748 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002740:	f06f 0306 	mvn.w	r3, #6
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002746:	e05b      	b.n	8002800 <LPS22HH_0_Probe+0x124>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	4619      	mov	r1, r3
 800274e:	4834      	ldr	r0, [pc, #208]	; (8002820 <LPS22HH_0_Probe+0x144>)
 8002750:	f001 f9aa 	bl	8003aa8 <LPS22HH_GetCapabilities>

    EnvCtx[STM32L462E_CELL1_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8002754:	7a3b      	ldrb	r3, [r7, #8]
 8002756:	461a      	mov	r2, r3
 8002758:	7a7b      	ldrb	r3, [r7, #9]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Humidity << 2);
 800275e:	7abb      	ldrb	r3, [r7, #10]
 8002760:	009b      	lsls	r3, r3, #2
    EnvCtx[STM32L462E_CELL1_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8002762:	4313      	orrs	r3, r2
 8002764:	4a2f      	ldr	r2, [pc, #188]	; (8002824 <LPS22HH_0_Probe+0x148>)
 8002766:	6053      	str	r3, [r2, #4]

    EnvCompObj[STM32L462E_CELL1_LPS22HH_0] = &lps22hh_obj_0;
 8002768:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <LPS22HH_0_Probe+0x14c>)
 800276a:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <LPS22HH_0_Probe+0x144>)
 800276c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STM32L462E_CELL1_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <LPS22HH_0_Probe+0x150>)
 8002770:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <LPS22HH_0_Probe+0x154>)
 8002772:	605a      	str	r2, [r3, #4]

    if (/* (ret == BSP_ERROR_NONE) && */ ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <LPS22HH_0_Probe+0xd0>
 800277e:	7a3b      	ldrb	r3, [r7, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d113      	bne.n	80027ac <LPS22HH_0_Probe+0xd0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[STM32L462E_CELL1_LPS22HH_0][FunctionIndexEnv[ENV_TEMPERATURE]] =
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <LPS22HH_0_Probe+0x158>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <LPS22HH_0_Probe+0x15c>)
 800278a:	3303      	adds	r3, #3
 800278c:	492b      	ldr	r1, [pc, #172]	; (800283c <LPS22HH_0_Probe+0x160>)
 800278e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;

      if (EnvDrv[STM32L462E_CELL1_LPS22HH_0]->Init(EnvCompObj[STM32L462E_CELL1_LPS22HH_0]) != LPS22HH_OK)
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <LPS22HH_0_Probe+0x150>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a23      	ldr	r2, [pc, #140]	; (8002828 <LPS22HH_0_Probe+0x14c>)
 800279a:	6852      	ldr	r2, [r2, #4]
 800279c:	4610      	mov	r0, r2
 800279e:	4798      	blx	r3
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <LPS22HH_0_Probe+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80027a6:	f06f 0304 	mvn.w	r3, #4
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80027ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11b      	bne.n	80027ea <LPS22HH_0_Probe+0x10e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d016      	beq.n	80027ea <LPS22HH_0_Probe+0x10e>
 80027bc:	7a7b      	ldrb	r3, [r7, #9]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d113      	bne.n	80027ea <LPS22HH_0_Probe+0x10e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[STM32L462E_CELL1_LPS22HH_0][FunctionIndexEnv[ENV_PRESSURE]] =
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <LPS22HH_0_Probe+0x158>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <LPS22HH_0_Probe+0x15c>)
 80027c8:	3303      	adds	r3, #3
 80027ca:	491d      	ldr	r1, [pc, #116]	; (8002840 <LPS22HH_0_Probe+0x164>)
 80027cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;

      if (EnvDrv[STM32L462E_CELL1_LPS22HH_0]->Init(EnvCompObj[STM32L462E_CELL1_LPS22HH_0]) != LPS22HH_OK)
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <LPS22HH_0_Probe+0x150>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <LPS22HH_0_Probe+0x14c>)
 80027d8:	6852      	ldr	r2, [r2, #4]
 80027da:	4610      	mov	r0, r2
 80027dc:	4798      	blx	r3
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <LPS22HH_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80027e4:	f06f 0304 	mvn.w	r3, #4
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <LPS22HH_0_Probe+0x124>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <LPS22HH_0_Probe+0x124>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80027fa:	f06f 0304 	mvn.w	r3, #4
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8002800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002802:	4618      	mov	r0, r3
 8002804:	3740      	adds	r7, #64	; 0x40
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	08002001 	.word	0x08002001
 8002810:	080020b5 	.word	0x080020b5
 8002814:	080021b9 	.word	0x080021b9
 8002818:	08002129 	.word	0x08002129
 800281c:	08001ff3 	.word	0x08001ff3
 8002820:	20000afc 	.word	0x20000afc
 8002824:	20000ac0 	.word	0x20000ac0
 8002828:	20000a98 	.word	0x20000a98
 800282c:	20000ab8 	.word	0x20000ab8
 8002830:	200000c4 	.word	0x200000c4
 8002834:	20000064 	.word	0x20000064
 8002838:	20000aa0 	.word	0x20000aa0
 800283c:	200000e8 	.word	0x200000e8
 8002840:	200000d4 	.word	0x200000d4

08002844 <BSP_MOTION_SENSOR_Init_Acc>:
  * @brief  Initializes the Accelerator motion sensor
  * @note   This is a  part of High-Level API to ease use of sensors.
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Init_Acc(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  return (BSP_MOTION_SENSOR_Init(STM32L462E_CELL1_LSM303AGR_ACC_0, MOTION_ACCELERO));
 8002848:	2102      	movs	r1, #2
 800284a:	2000      	movs	r0, #0
 800284c:	f000 f804 	bl	8002858 <BSP_MOTION_SENSOR_Init>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002862:	2300      	movs	r3, #0
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8002866:	2301      	movs	r3, #1
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <BSP_MOTION_SENSOR_Init+0x24>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d034      	beq.n	80028e4 <BSP_MOTION_SENSOR_Init+0x8c>
 800287a:	e067      	b.n	800294c <BSP_MOTION_SENSOR_Init+0xf4>
  {

#if (USE_STM32L462E_CELL1_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case STM32L462E_CELL1_LSM303AGR_ACC_0:
      /* Register Bus IOs for this component */
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800287c:	6838      	ldr	r0, [r7, #0]
 800287e:	f000 f8f5 	bl	8002a6c <LSM303AGR_ACC_0_Probe>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <BSP_MOTION_SENSOR_Init+0x38>
      {
        ret = BSP_ERROR_NO_INIT;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
          {
            component_functions |= MOTION_MAGNETO;
          }
        }
      }
      break;
 800288e:	e061      	b.n	8002954 <BSP_MOTION_SENSOR_Init+0xfc>
        if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002890:	4a50      	ldr	r2, [pc, #320]	; (80029d4 <BSP_MOTION_SENSOR_Init+0x17c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	494f      	ldr	r1, [pc, #316]	; (80029d8 <BSP_MOTION_SENSOR_Init+0x180>)
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028a2:	f107 010c 	add.w	r1, r7, #12
 80028a6:	4610      	mov	r0, r2
 80028a8:	4798      	blx	r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <BSP_MOTION_SENSOR_Init+0x60>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80028b0:	f06f 0306 	mvn.w	r3, #6
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80028b6:	e04d      	b.n	8002954 <BSP_MOTION_SENSOR_Init+0xfc>
          if (cap.Acc == 1U)
 80028b8:	7b3b      	ldrb	r3, [r7, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d103      	bne.n	80028c6 <BSP_MOTION_SENSOR_Init+0x6e>
            component_functions |= MOTION_ACCELERO;
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
          if (cap.Gyro == 1U)
 80028c6:	7b7b      	ldrb	r3, [r7, #13]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d103      	bne.n	80028d4 <BSP_MOTION_SENSOR_Init+0x7c>
            component_functions |= MOTION_GYRO;
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
          if (cap.Magneto == 1U)
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d13c      	bne.n	8002954 <BSP_MOTION_SENSOR_Init+0xfc>
            component_functions |= MOTION_MAGNETO;
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028e2:	e037      	b.n	8002954 <BSP_MOTION_SENSOR_Init+0xfc>
#endif /* (USE_STM32L462E_CELL1_MOTION_SENSOR_LSM303AGR_ACC_0 == 1) */

#if (USE_STM32L462E_CELL1_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case STM32L462E_CELL1_LSM303AGR_MAG_0:
      /* Register Bus IOs for this component */
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f000 f95f 	bl	8002ba8 <LSM303AGR_MAG_0_Probe>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <BSP_MOTION_SENSOR_Init+0xa0>
      {
        ret = BSP_ERROR_NO_INIT;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
          {
            component_functions |= MOTION_MAGNETO;
          }
        }
      }
      break;
 80028f6:	e02f      	b.n	8002958 <BSP_MOTION_SENSOR_Init+0x100>
        if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80028f8:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <BSP_MOTION_SENSOR_Init+0x17c>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4935      	ldr	r1, [pc, #212]	; (80029d8 <BSP_MOTION_SENSOR_Init+0x180>)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	4610      	mov	r0, r2
 8002910:	4798      	blx	r3
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <BSP_MOTION_SENSOR_Init+0xc8>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002918:	f06f 0306 	mvn.w	r3, #6
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800291e:	e01b      	b.n	8002958 <BSP_MOTION_SENSOR_Init+0x100>
          if (cap.Acc == 1U)
 8002920:	7b3b      	ldrb	r3, [r7, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d103      	bne.n	800292e <BSP_MOTION_SENSOR_Init+0xd6>
            component_functions |= MOTION_ACCELERO;
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
          if (cap.Gyro == 1U)
 800292e:	7b7b      	ldrb	r3, [r7, #13]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d103      	bne.n	800293c <BSP_MOTION_SENSOR_Init+0xe4>
            component_functions |= MOTION_GYRO;
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
          if (cap.Magneto == 1U)
 800293c:	7bbb      	ldrb	r3, [r7, #14]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10a      	bne.n	8002958 <BSP_MOTION_SENSOR_Init+0x100>
            component_functions |= MOTION_MAGNETO;
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800294a:	e005      	b.n	8002958 <BSP_MOTION_SENSOR_Init+0x100>
#endif /* (USE_STM32L462E_CELL1_MOTION_SENSOR_LSM303AGR_MAG_0 == 1) */

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800294c:	f06f 0301 	mvn.w	r3, #1
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8002952:	e002      	b.n	800295a <BSP_MOTION_SENSOR_Init+0x102>
      break;
 8002954:	bf00      	nop
 8002956:	e000      	b.n	800295a <BSP_MOTION_SENSOR_Init+0x102>
      break;
 8002958:	bf00      	nop
  }

  if (ret == BSP_ERROR_NONE)
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	2b00      	cmp	r3, #0
 800295e:	d134      	bne.n	80029ca <BSP_MOTION_SENSOR_Init+0x172>
  {
    for (i = 0; i < STM32L462E_CELL1_MOTION_FUNCTIONS_NBR; i++)
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	e02e      	b.n	80029c4 <BSP_MOTION_SENSOR_Init+0x16c>
    {
      if (((Functions & function) == function) && ((component_functions & function) == function))
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	4013      	ands	r3, r2
 800296c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296e:	429a      	cmp	r2, r3
 8002970:	d122      	bne.n	80029b8 <BSP_MOTION_SENSOR_Init+0x160>
 8002972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	4013      	ands	r3, r2
 8002978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297a:	429a      	cmp	r2, r3
 800297c:	d11c      	bne.n	80029b8 <BSP_MOTION_SENSOR_Init+0x160>
      {
        /* protection to not exceed FunctionIndexMotion array size */
        if (function <= 4U)
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	2b04      	cmp	r3, #4
 8002982:	d819      	bhi.n	80029b8 <BSP_MOTION_SENSOR_Init+0x160>
        {
          if (MotionFuncDrv[Instance][FunctionIndexMotion[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8002984:	4a15      	ldr	r2, [pc, #84]	; (80029dc <BSP_MOTION_SENSOR_Init+0x184>)
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800298c:	4814      	ldr	r0, [pc, #80]	; (80029e0 <BSP_MOTION_SENSOR_Init+0x188>)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	440b      	add	r3, r1
 8002998:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	490e      	ldr	r1, [pc, #56]	; (80029d8 <BSP_MOTION_SENSOR_Init+0x180>)
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80029a6:	4610      	mov	r0, r2
 80029a8:	4798      	blx	r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <BSP_MOTION_SENSOR_Init+0x160>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80029b0:	f06f 0304 	mvn.w	r3, #4
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80029b6:	e008      	b.n	80029ca <BSP_MOTION_SENSOR_Init+0x172>
          }
        }
      }
      function = function << 1;
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
    for (i = 0; i < STM32L462E_CELL1_MOTION_FUNCTIONS_NBR; i++)
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	3301      	adds	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d9cd      	bls.n	8002966 <BSP_MOTION_SENSOR_Init+0x10e>
    }
  }

  return ret;
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3738      	adds	r7, #56	; 0x38
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000b50 	.word	0x20000b50
 80029d8:	20000b30 	.word	0x20000b30
 80029dc:	20000078 	.word	0x20000078
 80029e0:	20000b38 	.word	0x20000b38

080029e4 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, MOTION_SENSOR_Axes_t *Axes)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= STM32L462E_CELL1_MOTION_INSTANCES_NBR)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d903      	bls.n	80029fe <BSP_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029f6:	f06f 0301 	mvn.w	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	e029      	b.n	8002a52 <BSP_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <BSP_MOTION_SENSOR_GetAxes+0x78>)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d11d      	bne.n	8002a4c <BSP_MOTION_SENSOR_GetAxes+0x68>
    {
      /* try to get sensor's requested function axes data */
      if (MotionFuncDrv[Instance][FunctionIndexMotion[Function]]->GetAxes(MotionCompObj[Instance],
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <BSP_MOTION_SENSOR_GetAxes+0x7c>)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a18:	4812      	ldr	r0, [pc, #72]	; (8002a64 <BSP_MOTION_SENSOR_GetAxes+0x80>)
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	490f      	ldr	r1, [pc, #60]	; (8002a68 <BSP_MOTION_SENSOR_GetAxes+0x84>)
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4610      	mov	r0, r2
 8002a36:	4798      	blx	r3
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <BSP_MOTION_SENSOR_GetAxes+0x62>
                                                                          Axes) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a3e:	f06f 0304 	mvn.w	r3, #4
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e005      	b.n	8002a52 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e002      	b.n	8002a52 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8002a4c:	f06f 0301 	mvn.w	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002a52:	697b      	ldr	r3, [r7, #20]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000b58 	.word	0x20000b58
 8002a60:	20000078 	.word	0x20000078
 8002a64:	20000b38 	.word	0x20000b38
 8002a68:	20000b30 	.word	0x20000b30

08002a6c <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b094      	sub	sp, #80	; 0x50
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8002a78:	2300      	movs	r3, #0
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8002a7c:	2333      	movs	r3, #51	; 0x33
 8002a7e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = BSP_I2C1_Init;
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <LSM303AGR_ACC_0_Probe+0x108>)
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = BSP_I2C1_DeInit;
 8002a86:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <LSM303AGR_ACC_0_Probe+0x10c>)
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = BSP_I2C1_ReadReg_8b;
 8002a8a:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <LSM303AGR_ACC_0_Probe+0x110>)
 8002a8c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = BSP_I2C1_WriteReg_8b;
 8002a8e:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <LSM303AGR_ACC_0_Probe+0x114>)
 8002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 8002a92:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <LSM303AGR_ACC_0_Probe+0x118>)
 8002a94:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8002a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	483a      	ldr	r0, [pc, #232]	; (8002b88 <LSM303AGR_ACC_0_Probe+0x11c>)
 8002a9e:	f001 fd9d 	bl	80045dc <LSM303AGR_ACC_RegisterBusIO>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002aa8:	f06f 0306 	mvn.w	r3, #6
 8002aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aae:	e05b      	b.n	8002b68 <LSM303AGR_ACC_0_Probe+0xfc>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8002ab0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4834      	ldr	r0, [pc, #208]	; (8002b88 <LSM303AGR_ACC_0_Probe+0x11c>)
 8002ab8:	f001 fe55 	bl	8004766 <LSM303AGR_ACC_ReadID>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002ac2:	f06f 0306 	mvn.w	r3, #6
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac8:	e04e      	b.n	8002b68 <LSM303AGR_ACC_0_Probe+0xfc>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8002aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ace:	2b33      	cmp	r3, #51	; 0x33
 8002ad0:	d003      	beq.n	8002ada <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002ad2:	f06f 0306 	mvn.w	r3, #6
 8002ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad8:	e046      	b.n	8002b68 <LSM303AGR_ACC_0_Probe+0xfc>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8002ada:	f107 030c 	add.w	r3, r7, #12
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4829      	ldr	r0, [pc, #164]	; (8002b88 <LSM303AGR_ACC_0_Probe+0x11c>)
 8002ae2:	f001 fe57 	bl	8004794 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[STM32L462E_CELL1_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8002ae6:	7b7b      	ldrb	r3, [r7, #13]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	7b3b      	ldrb	r3, [r7, #12]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	431a      	orrs	r2, r3
                                                              uint32_t)cap.Magneto << 2);
 8002af0:	7bbb      	ldrb	r3, [r7, #14]
 8002af2:	009b      	lsls	r3, r3, #2
    MotionCtx[STM32L462E_CELL1_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8002af4:	4313      	orrs	r3, r2
 8002af6:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <LSM303AGR_ACC_0_Probe+0x120>)
 8002af8:	6013      	str	r3, [r2, #0]

    MotionCompObj[STM32L462E_CELL1_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <LSM303AGR_ACC_0_Probe+0x124>)
 8002afc:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <LSM303AGR_ACC_0_Probe+0x11c>)
 8002afe:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[STM32L462E_CELL1_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <LSM303AGR_ACC_0_Probe+0x128>)
 8002b02:	4a25      	ldr	r2, [pc, #148]	; (8002b98 <LSM303AGR_ACC_0_Probe+0x12c>)
 8002b04:	601a      	str	r2, [r3, #0]

    if (/* (ret == BSP_ERROR_NONE) && */ ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <LSM303AGR_ACC_0_Probe+0xd0>
 8002b10:	7b3b      	ldrb	r3, [r7, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d112      	bne.n	8002b3c <LSM303AGR_ACC_0_Probe+0xd0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[STM32L462E_CELL1_LSM303AGR_ACC_0][FunctionIndexMotion[MOTION_ACCELERO]] =
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <LSM303AGR_ACC_0_Probe+0x130>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <LSM303AGR_ACC_0_Probe+0x134>)
 8002b1c:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <LSM303AGR_ACC_0_Probe+0x138>)
 8002b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[STM32L462E_CELL1_LSM303AGR_ACC_0]->Init(MotionCompObj[STM32L462E_CELL1_LSM303AGR_ACC_0])
 8002b22:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <LSM303AGR_ACC_0_Probe+0x128>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <LSM303AGR_ACC_0_Probe+0x124>)
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4798      	blx	r3
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <LSM303AGR_ACC_0_Probe+0xd0>
          != LSM303AGR_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b36:	f06f 0304 	mvn.w	r3, #4
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8002b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <LSM303AGR_ACC_0_Probe+0xe6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <LSM303AGR_ACC_0_Probe+0xe6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b4c:	f06f 0304 	mvn.w	r3, #4
 8002b50:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8002b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <LSM303AGR_ACC_0_Probe+0xfc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <LSM303AGR_ACC_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b62:	f06f 0304 	mvn.w	r3, #4
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8002b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3750      	adds	r7, #80	; 0x50
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	08002001 	.word	0x08002001
 8002b78:	080020b5 	.word	0x080020b5
 8002b7c:	080021b9 	.word	0x080021b9
 8002b80:	08002129 	.word	0x08002129
 8002b84:	08001ff3 	.word	0x08001ff3
 8002b88:	20000b60 	.word	0x20000b60
 8002b8c:	20000b58 	.word	0x20000b58
 8002b90:	20000b30 	.word	0x20000b30
 8002b94:	20000b50 	.word	0x20000b50
 8002b98:	200000fc 	.word	0x200000fc
 8002b9c:	20000078 	.word	0x20000078
 8002ba0:	20000b38 	.word	0x20000b38
 8002ba4:	2000010c 	.word	0x2000010c

08002ba8 <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b094      	sub	sp, #80	; 0x50
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8002bb8:	233d      	movs	r3, #61	; 0x3d
 8002bba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = BSP_I2C1_Init;
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <LSM303AGR_MAG_0_Probe+0x108>)
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = BSP_I2C1_DeInit;
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <LSM303AGR_MAG_0_Probe+0x10c>)
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = BSP_I2C1_ReadReg_8b;
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <LSM303AGR_MAG_0_Probe+0x110>)
 8002bc8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = BSP_I2C1_WriteReg_8b;
 8002bca:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <LSM303AGR_MAG_0_Probe+0x114>)
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 8002bce:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <LSM303AGR_MAG_0_Probe+0x118>)
 8002bd0:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8002bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	483a      	ldr	r0, [pc, #232]	; (8002cc4 <LSM303AGR_MAG_0_Probe+0x11c>)
 8002bda:	f002 f8c9 	bl	8004d70 <LSM303AGR_MAG_RegisterBusIO>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002be4:	f06f 0306 	mvn.w	r3, #6
 8002be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bea:	e05c      	b.n	8002ca6 <LSM303AGR_MAG_0_Probe+0xfe>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8002bec:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4834      	ldr	r0, [pc, #208]	; (8002cc4 <LSM303AGR_MAG_0_Probe+0x11c>)
 8002bf4:	f002 f973 	bl	8004ede <LSM303AGR_MAG_ReadID>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002bfe:	f06f 0306 	mvn.w	r3, #6
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c04:	e04f      	b.n	8002ca6 <LSM303AGR_MAG_0_Probe+0xfe>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8002c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d003      	beq.n	8002c16 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002c0e:	f06f 0306 	mvn.w	r3, #6
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c14:	e047      	b.n	8002ca6 <LSM303AGR_MAG_0_Probe+0xfe>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4829      	ldr	r0, [pc, #164]	; (8002cc4 <LSM303AGR_MAG_0_Probe+0x11c>)
 8002c1e:	f002 f975 	bl	8004f0c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[STM32L462E_CELL1_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8002c22:	7b7b      	ldrb	r3, [r7, #13]
 8002c24:	461a      	mov	r2, r3
 8002c26:	7b3b      	ldrb	r3, [r7, #12]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	431a      	orrs	r2, r3
                                                              uint32_t)cap.Magneto << 2);
 8002c2c:	7bbb      	ldrb	r3, [r7, #14]
 8002c2e:	009b      	lsls	r3, r3, #2
    MotionCtx[STM32L462E_CELL1_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8002c30:	4313      	orrs	r3, r2
 8002c32:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <LSM303AGR_MAG_0_Probe+0x120>)
 8002c34:	6053      	str	r3, [r2, #4]

    MotionCompObj[STM32L462E_CELL1_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <LSM303AGR_MAG_0_Probe+0x124>)
 8002c38:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <LSM303AGR_MAG_0_Probe+0x11c>)
 8002c3a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[STM32L462E_CELL1_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <LSM303AGR_MAG_0_Probe+0x128>)
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <LSM303AGR_MAG_0_Probe+0x12c>)
 8002c40:	605a      	str	r2, [r3, #4]

    if (/* (ret == BSP_ERROR_NONE) && */ ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d016      	beq.n	8002c7a <LSM303AGR_MAG_0_Probe+0xd2>
 8002c4c:	7bbb      	ldrb	r3, [r7, #14]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d113      	bne.n	8002c7a <LSM303AGR_MAG_0_Probe+0xd2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[STM32L462E_CELL1_LSM303AGR_MAG_0][FunctionIndexMotion[MOTION_MAGNETO]] =
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <LSM303AGR_MAG_0_Probe+0x130>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	4a21      	ldr	r2, [pc, #132]	; (8002cdc <LSM303AGR_MAG_0_Probe+0x134>)
 8002c58:	3303      	adds	r3, #3
 8002c5a:	4921      	ldr	r1, [pc, #132]	; (8002ce0 <LSM303AGR_MAG_0_Probe+0x138>)
 8002c5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[STM32L462E_CELL1_LSM303AGR_MAG_0]->Init(MotionCompObj[STM32L462E_CELL1_LSM303AGR_MAG_0])
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <LSM303AGR_MAG_0_Probe+0x128>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <LSM303AGR_MAG_0_Probe+0x124>)
 8002c68:	6852      	ldr	r2, [r2, #4]
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4798      	blx	r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <LSM303AGR_MAG_0_Probe+0xd2>
          != LSM303AGR_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c74:	f06f 0304 	mvn.w	r3, #4
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8002c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d107      	bne.n	8002c90 <LSM303AGR_MAG_0_Probe+0xe8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <LSM303AGR_MAG_0_Probe+0xe8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c8a:	f06f 0304 	mvn.w	r3, #4
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8002c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <LSM303AGR_MAG_0_Probe+0xfe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <LSM303AGR_MAG_0_Probe+0xfe>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ca0:	f06f 0304 	mvn.w	r3, #4
 8002ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3750      	adds	r7, #80	; 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	08002001 	.word	0x08002001
 8002cb4:	080020b5 	.word	0x080020b5
 8002cb8:	080021b9 	.word	0x080021b9
 8002cbc:	08002129 	.word	0x08002129
 8002cc0:	08001ff3 	.word	0x08001ff3
 8002cc4:	20000b94 	.word	0x20000b94
 8002cc8:	20000b58 	.word	0x20000b58
 8002ccc:	20000b30 	.word	0x20000b30
 8002cd0:	20000b50 	.word	0x20000b50
 8002cd4:	20000130 	.word	0x20000130
 8002cd8:	20000078 	.word	0x20000078
 8002cdc:	20000b38 	.word	0x20000b38
 8002ce0:	20000140 	.word	0x20000140

08002ce4 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e034      	b.n	8002d66 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	7b1a      	ldrb	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <HTS221_RegisterBusIO+0x8c>)
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HTS221_RegisterBusIO+0x90>)
 8002d3e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4798      	blx	r3
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	e002      	b.n	8002d66 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	080033a3 	.word	0x080033a3
 8002d74:	08003405 	.word	0x08003405

08002d78 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 faa4 	bl	80032d8 <HTS221_Initialize>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	e004      	b.n	8002da6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d111      	bne.n	8002de4 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f878 	bl	8002eb6 <HTS221_HUM_Disable>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	e00d      	b.n	8002dee <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f95f 	bl	8003096 <HTS221_TEMP_Disable>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	e004      	b.n	8002dee <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3320      	adds	r3, #32
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fc28 	bl	800365c <hts221_device_id_get>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e000      	b.n	8002e1a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <HTS221_GetCapabilities+0x44>)
 8002e4a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4a06      	ldr	r2, [pc, #24]	; (8002e68 <HTS221_GetCapabilities+0x44>)
 8002e50:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	41480000 	.word	0x41480000

08002e6c <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e015      	b.n	8002eae <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3320      	adds	r3, #32
 8002e90:	2101      	movs	r1, #1
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fbf3 	bl	800367e <hts221_power_on_set>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	e004      	b.n	8002eae <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e015      	b.n	8002ef8 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3320      	adds	r3, #32
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fbce 	bl	800367e <hts221_power_on_set>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eec:	e004      	b.n	8002ef8 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f96f 	bl	80031f0 <HTS221_GetOutputDataRate>
 8002f12:	4603      	mov	r3, r0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002f28:	ed97 0a00 	vldr	s0, [r7]
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f9a3 	bl	8003278 <HTS221_SetOutputDataRate>
 8002f32:	4603      	mov	r3, r0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3320      	adds	r3, #32
 8002f4a:	f107 020c 	add.w	r2, r7, #12
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fc58 	bl	8003806 <hts221_hum_adc_point_0_get>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	e06b      	b.n	800303a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f103 0220 	add.w	r2, r3, #32
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 fbaa 	bl	80036ca <hts221_hum_rh_point_0_get>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	e05b      	b.n	800303a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 0220 	add.w	r2, r3, #32
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f000 fc5c 	bl	800384e <hts221_hum_adc_point_1_get>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa0:	e04b      	b.n	800303a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f103 0220 	add.w	r2, r3, #32
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	330c      	adds	r3, #12
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 fba8 	bl	8003706 <hts221_hum_rh_point_1_get>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	e03b      	b.n	800303a <HTS221_HUM_GetHumidity+0xfe>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3320      	adds	r3, #32
 8002fca:	f107 021c 	add.w	r2, r7, #28
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fafd 	bl	80035d0 <hts221_humidity_raw_get>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe0:	e02b      	b.n	800303a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002fe2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f99a 	bl	8003330 <Linear_Interpolation>
 8002ffc:	eef0 7a40 	vmov.f32	s15, s0
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	d503      	bpl.n	800301e <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003044 <HTS221_HUM_GetHumidity+0x108>
 8003028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	dd02      	ble.n	8003038 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HTS221_HUM_GetHumidity+0x10c>)
 8003036:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	42c80000 	.word	0x42c80000
 8003048:	42c80000 	.word	0x42c80000

0800304c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e015      	b.n	800308e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3320      	adds	r3, #32
 8003070:	2101      	movs	r1, #1
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fb03 	bl	800367e <hts221_power_on_set>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e004      	b.n	800308e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e015      	b.n	80030d8 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3320      	adds	r3, #32
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fade 	bl	800367e <hts221_power_on_set>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295
 80030cc:	e004      	b.n	80030d8 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f87f 	bl	80031f0 <HTS221_GetOutputDataRate>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003108:	ed97 0a00 	vldr	s0, [r7]
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f8b3 	bl	8003278 <HTS221_SetOutputDataRate>
 8003112:	4603      	mov	r3, r0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3320      	adds	r3, #32
 800312a:	f107 020c 	add.w	r2, r7, #12
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fbb0 	bl	8003896 <hts221_temp_adc_point_0_get>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	e052      	b.n	80031e8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f103 0220 	add.w	r2, r3, #32
 8003148:	f107 030c 	add.w	r3, r7, #12
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f000 faf6 	bl	8003742 <hts221_temp_deg_point_0_get>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	e042      	b.n	80031e8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f103 0220 	add.w	r2, r3, #32
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	3308      	adds	r3, #8
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f000 fbb4 	bl	80038de <hts221_temp_adc_point_1_get>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	e032      	b.n	80031e8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f103 0220 	add.w	r2, r3, #32
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	330c      	adds	r3, #12
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 fb07 	bl	80037a4 <hts221_temp_deg_point_1_get>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	e022      	b.n	80031e8 <HTS221_TEMP_GetTemperature+0xcc>
 80031a2:	2300      	movs	r3, #0
 80031a4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3320      	adds	r3, #32
 80031aa:	f107 021c 	add.w	r2, r7, #28
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fa30 	bl	8003616 <hts221_temperature_raw_get>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295
 80031c0:	e012      	b.n	80031e8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80031c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	eeb0 0a67 	vmov.f32	s0, s15
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f8aa 	bl	8003330 <Linear_Interpolation>
 80031dc:	eef0 7a40 	vmov.f32	s15, s0
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3320      	adds	r3, #32
 8003202:	f107 020b 	add.w	r2, r7, #11
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f983 	bl	8003514 <hts221_data_rate_get>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	e025      	b.n	8003266 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d81d      	bhi.n	800325c <HTS221_GetOutputDataRate+0x6c>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <HTS221_GetOutputDataRate+0x38>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	08003239 	.word	0x08003239
 800322c:	08003243 	.word	0x08003243
 8003230:	0800324d 	.word	0x0800324d
 8003234:	08003255 	.word	0x08003255
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
      break;
 8003240:	e010      	b.n	8003264 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003248:	601a      	str	r2, [r3, #0]
      break;
 800324a:	e00b      	b.n	8003264 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <HTS221_GetOutputDataRate+0x80>)
 8003250:	601a      	str	r2, [r3, #0]
      break;
 8003252:	e007      	b.n	8003264 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HTS221_GetOutputDataRate+0x84>)
 8003258:	601a      	str	r2, [r3, #0]
      break;
 800325a:	e003      	b.n	8003264 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
 8003260:	60fb      	str	r3, [r7, #12]
      break;
 8003262:	bf00      	nop
  }

  return ret;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40e00000 	.word	0x40e00000
 8003274:	41480000 	.word	0x41480000

08003278 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003284:	edd7 7a00 	vldr	s15, [r7]
 8003288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800328c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003294:	d801      	bhi.n	800329a <HTS221_SetOutputDataRate+0x22>
 8003296:	2301      	movs	r3, #1
 8003298:	e00b      	b.n	80032b2 <HTS221_SetOutputDataRate+0x3a>
 800329a:	edd7 7a00 	vldr	s15, [r7]
 800329e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80032a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	d801      	bhi.n	80032b0 <HTS221_SetOutputDataRate+0x38>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e000      	b.n	80032b2 <HTS221_SetOutputDataRate+0x3a>
 80032b0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80032b2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3320      	adds	r3, #32
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f902 	bl	80034c6 <hts221_data_rate_set>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295
 80032cc:	e000      	b.n	80032d0 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3320      	adds	r3, #32
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f9c9 	bl	800367e <hts221_power_on_set>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	e017      	b.n	8003328 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3320      	adds	r3, #32
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f940 	bl	8003584 <hts221_block_data_update_set>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e00b      	b.n	8003328 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffaf 	bl	8003278 <HTS221_SetOutputDataRate>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	e000      	b.n	8003328 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	edd3 7a01 	vldr	s15, [r3, #4]
 8003348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800334c:	edd7 7a00 	vldr	s15, [r7]
 8003350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	edd3 6a02 	vldr	s13, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003360:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	ed93 6a00 	vldr	s12, [r3]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003374:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800338c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003390:	eef0 7a66 	vmov.f32	s15, s13
}
 8003394:	eeb0 0a67 	vmov.f32	s0, s15
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033a2:	b590      	push	{r4, r7, lr}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	461a      	mov	r2, r3
 80033ae:	460b      	mov	r3, r1
 80033b0:	72fb      	strb	r3, [r7, #11]
 80033b2:	4613      	mov	r3, r2
 80033b4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	695c      	ldr	r4, [r3, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	7b1b      	ldrb	r3, [r3, #12]
 80033ca:	b298      	uxth	r0, r3
 80033cc:	7afb      	ldrb	r3, [r7, #11]
 80033ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	b299      	uxth	r1, r3
 80033d6:	893b      	ldrh	r3, [r7, #8]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	47a0      	blx	r4
 80033dc:	4603      	mov	r3, r0
 80033de:	e00d      	b.n	80033fc <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	695c      	ldr	r4, [r3, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	7b1b      	ldrb	r3, [r3, #12]
 80033e8:	b298      	uxth	r0, r3
 80033ea:	7afb      	ldrb	r3, [r7, #11]
 80033ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	b299      	uxth	r1, r3
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	47a0      	blx	r4
 80033fa:	4603      	mov	r3, r0
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}

08003404 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	460b      	mov	r3, r1
 8003412:	72fb      	strb	r3, [r7, #11]
 8003414:	4613      	mov	r3, r2
 8003416:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10e      	bne.n	8003442 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	691c      	ldr	r4, [r3, #16]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	7b1b      	ldrb	r3, [r3, #12]
 800342c:	b298      	uxth	r0, r3
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003434:	b2db      	uxtb	r3, r3
 8003436:	b299      	uxth	r1, r3
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	47a0      	blx	r4
 800343e:	4603      	mov	r3, r0
 8003440:	e00d      	b.n	800345e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	691c      	ldr	r4, [r3, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	7b1b      	ldrb	r3, [r3, #12]
 800344a:	b298      	uxth	r0, r3
 800344c:	7afb      	ldrb	r3, [r7, #11]
 800344e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003452:	b2db      	uxtb	r3, r3
 8003454:	b299      	uxth	r1, r3
 8003456:	893b      	ldrh	r3, [r7, #8]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	47a0      	blx	r4
 800345c:	4603      	mov	r3, r0
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}

08003466 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003466:	b590      	push	{r4, r7, lr}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	461a      	mov	r2, r3
 8003472:	460b      	mov	r3, r1
 8003474:	72fb      	strb	r3, [r7, #11]
 8003476:	4613      	mov	r3, r2
 8003478:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685c      	ldr	r4, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68d8      	ldr	r0, [r3, #12]
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	7af9      	ldrb	r1, [r7, #11]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	47a0      	blx	r4
 800348a:	6178      	str	r0, [r7, #20]

  return ret;
 800348c:	697b      	ldr	r3, [r7, #20]
}
 800348e:	4618      	mov	r0, r3
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	bd90      	pop	{r4, r7, pc}

08003496 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003496:	b590      	push	{r4, r7, lr}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	461a      	mov	r2, r3
 80034a2:	460b      	mov	r3, r1
 80034a4:	72fb      	strb	r3, [r7, #11]
 80034a6:	4613      	mov	r3, r2
 80034a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681c      	ldr	r4, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68d8      	ldr	r0, [r3, #12]
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	7af9      	ldrb	r1, [r7, #11]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	47a0      	blx	r4
 80034ba:	6178      	str	r0, [r7, #20]

  return ret;
 80034bc:	697b      	ldr	r3, [r7, #20]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}

080034c6 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80034d2:	f107 0208 	add.w	r2, r7, #8
 80034d6:	2301      	movs	r3, #1
 80034d8:	2120      	movs	r1, #32
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ffc3 	bl	8003466 <hts221_read_reg>
 80034e0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10f      	bne.n	8003508 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	7a3b      	ldrb	r3, [r7, #8]
 80034f2:	f362 0301 	bfi	r3, r2, #0, #2
 80034f6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80034f8:	f107 0208 	add.w	r2, r7, #8
 80034fc:	2301      	movs	r3, #1
 80034fe:	2120      	movs	r1, #32
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffc8 	bl	8003496 <hts221_write_reg>
 8003506:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800351e:	f107 0208 	add.w	r2, r7, #8
 8003522:	2301      	movs	r3, #1
 8003524:	2120      	movs	r1, #32
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff9d 	bl	8003466 <hts221_read_reg>
 800352c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800352e:	7a3b      	ldrb	r3, [r7, #8]
 8003530:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b03      	cmp	r3, #3
 8003538:	d81a      	bhi.n	8003570 <hts221_data_rate_get+0x5c>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <hts221_data_rate_get+0x2c>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003551 	.word	0x08003551
 8003544:	08003559 	.word	0x08003559
 8003548:	08003561 	.word	0x08003561
 800354c:	08003569 	.word	0x08003569
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
      break;
 8003556:	e00f      	b.n	8003578 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
      break;
 800355e:	e00b      	b.n	8003578 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2202      	movs	r2, #2
 8003564:	701a      	strb	r2, [r3, #0]
      break;
 8003566:	e007      	b.n	8003578 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2203      	movs	r2, #3
 800356c:	701a      	strb	r2, [r3, #0]
      break;
 800356e:	e003      	b.n	8003578 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	701a      	strb	r2, [r3, #0]
      break;
 8003576:	bf00      	nop
  }

  return ret;
 8003578:	68fb      	ldr	r3, [r7, #12]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop

08003584 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003590:	f107 0208 	add.w	r2, r7, #8
 8003594:	2301      	movs	r3, #1
 8003596:	2120      	movs	r1, #32
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff64 	bl	8003466 <hts221_read_reg>
 800359e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	7a3b      	ldrb	r3, [r7, #8]
 80035b0:	f362 0382 	bfi	r3, r2, #2, #1
 80035b4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035b6:	f107 0208 	add.w	r2, r7, #8
 80035ba:	2301      	movs	r3, #1
 80035bc:	2120      	movs	r1, #32
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff69 	bl	8003496 <hts221_write_reg>
 80035c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80035da:	f107 0208 	add.w	r2, r7, #8
 80035de:	2302      	movs	r3, #2
 80035e0:	2128      	movs	r1, #40	; 0x28
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ff3f 	bl	8003466 <hts221_read_reg>
 80035e8:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80035ea:	7a7b      	ldrb	r3, [r7, #9]
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	7a3b      	ldrb	r3, [r7, #8]
 8003600:	b29b      	uxth	r3, r3
 8003602:	4413      	add	r3, r2
 8003604:	b29b      	uxth	r3, r3
 8003606:	b21a      	sxth	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	801a      	strh	r2, [r3, #0]

  return ret;
 800360c:	68fb      	ldr	r3, [r7, #12]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003620:	f107 0208 	add.w	r2, r7, #8
 8003624:	2302      	movs	r3, #2
 8003626:	212a      	movs	r1, #42	; 0x2a
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff1c 	bl	8003466 <hts221_read_reg>
 800362e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003630:	7a7b      	ldrb	r3, [r7, #9]
 8003632:	b21a      	sxth	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363e:	b29b      	uxth	r3, r3
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	b29a      	uxth	r2, r3
 8003644:	7a3b      	ldrb	r3, [r7, #8]
 8003646:	b29b      	uxth	r3, r3
 8003648:	4413      	add	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	b21a      	sxth	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	801a      	strh	r2, [r3, #0]

  return ret;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003666:	2301      	movs	r3, #1
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	210f      	movs	r1, #15
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fefa 	bl	8003466 <hts221_read_reg>
 8003672:	60f8      	str	r0, [r7, #12]

  return ret;
 8003674:	68fb      	ldr	r3, [r7, #12]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800368a:	f107 0208 	add.w	r2, r7, #8
 800368e:	2301      	movs	r3, #1
 8003690:	2120      	movs	r1, #32
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fee7 	bl	8003466 <hts221_read_reg>
 8003698:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10f      	bne.n	80036c0 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	7a3b      	ldrb	r3, [r7, #8]
 80036aa:	f362 13c7 	bfi	r3, r2, #7, #1
 80036ae:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036b0:	f107 0208 	add.w	r2, r7, #8
 80036b4:	2301      	movs	r3, #1
 80036b6:	2120      	movs	r1, #32
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff feec 	bl	8003496 <hts221_write_reg>
 80036be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80036d4:	f107 020b 	add.w	r2, r7, #11
 80036d8:	2301      	movs	r3, #1
 80036da:	2130      	movs	r1, #48	; 0x30
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fec2 	bl	8003466 <hts221_read_reg>
 80036e2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80036fc:	68fb      	ldr	r3, [r7, #12]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003710:	f107 020b 	add.w	r2, r7, #11
 8003714:	2301      	movs	r3, #1
 8003716:	2131      	movs	r1, #49	; 0x31
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fea4 	bl	8003466 <hts221_read_reg>
 800371e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800372e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b086      	sub	sp, #24
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800374c:	f107 020f 	add.w	r2, r7, #15
 8003750:	2301      	movs	r3, #1
 8003752:	2132      	movs	r1, #50	; 0x32
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fe86 	bl	8003466 <hts221_read_reg>
 800375a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11b      	bne.n	800379a <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003762:	f107 0210 	add.w	r2, r7, #16
 8003766:	2301      	movs	r3, #1
 8003768:	2135      	movs	r1, #53	; 0x35
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fe7b 	bl	8003466 <hts221_read_reg>
 8003770:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003772:	7c3b      	ldrb	r3, [r7, #16]
 8003774:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003778:	b2db      	uxtb	r3, r3
 800377a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	4413      	add	r3, r2
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800378c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800379a:	697b      	ldr	r3, [r7, #20]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80037ae:	f107 020f 	add.w	r2, r7, #15
 80037b2:	2301      	movs	r3, #1
 80037b4:	2133      	movs	r1, #51	; 0x33
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fe55 	bl	8003466 <hts221_read_reg>
 80037bc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d11b      	bne.n	80037fc <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80037c4:	f107 0210 	add.w	r2, r7, #16
 80037c8:	2301      	movs	r3, #1
 80037ca:	2135      	movs	r1, #53	; 0x35
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fe4a 	bl	8003466 <hts221_read_reg>
 80037d2:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80037d4:	7c3b      	ldrb	r3, [r7, #16]
 80037d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	4413      	add	r3, r2
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ee:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80037f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80037fc:	697b      	ldr	r3, [r7, #20]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003810:	f107 0208 	add.w	r2, r7, #8
 8003814:	2302      	movs	r3, #2
 8003816:	2136      	movs	r1, #54	; 0x36
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fe24 	bl	8003466 <hts221_read_reg>
 800381e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003820:	7a7b      	ldrb	r3, [r7, #9]
 8003822:	b29b      	uxth	r3, r3
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	b29a      	uxth	r2, r3
 8003828:	7a3b      	ldrb	r3, [r7, #8]
 800382a:	b29b      	uxth	r3, r3
 800382c:	4413      	add	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003832:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003844:	68fb      	ldr	r3, [r7, #12]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003858:	f107 0208 	add.w	r2, r7, #8
 800385c:	2302      	movs	r3, #2
 800385e:	213a      	movs	r1, #58	; 0x3a
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fe00 	bl	8003466 <hts221_read_reg>
 8003866:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003868:	7a7b      	ldrb	r3, [r7, #9]
 800386a:	b29b      	uxth	r3, r3
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	b29a      	uxth	r2, r3
 8003870:	7a3b      	ldrb	r3, [r7, #8]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4413      	add	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800387a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800388c:	68fb      	ldr	r3, [r7, #12]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80038a0:	f107 0208 	add.w	r2, r7, #8
 80038a4:	2302      	movs	r3, #2
 80038a6:	213c      	movs	r1, #60	; 0x3c
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff fddc 	bl	8003466 <hts221_read_reg>
 80038ae:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80038b0:	7a7b      	ldrb	r3, [r7, #9]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	7a3b      	ldrb	r3, [r7, #8]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4413      	add	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80038c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80038d4:	68fb      	ldr	r3, [r7, #12]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80038e8:	f107 0208 	add.w	r2, r7, #8
 80038ec:	2302      	movs	r3, #2
 80038ee:	213e      	movs	r1, #62	; 0x3e
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fdb8 	bl	8003466 <hts221_read_reg>
 80038f6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80038f8:	7a7b      	ldrb	r3, [r7, #9]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	b29a      	uxth	r2, r3
 8003900:	7a3b      	ldrb	r3, [r7, #8]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4413      	add	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800390a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e051      	b.n	80039e8 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	7b1a      	ldrb	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <LPS22HH_RegisterBusIO+0xcc>)
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <LPS22HH_RegisterBusIO+0xd0>)
 8003986:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 800399e:	f04f 33ff 	mov.w	r3, #4294967295
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e020      	b.n	80039e8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4798      	blx	r3
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e016      	b.n	80039e8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d112      	bne.n	80039e8 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80039cc:	2301      	movs	r3, #1
 80039ce:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80039d0:	7afb      	ldrb	r3, [r7, #11]
 80039d2:	461a      	mov	r2, r3
 80039d4:	2110      	movs	r1, #16
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9df 	bl	8003d9a <LPS22HH_Write_Reg>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80039e8:	68fb      	ldr	r3, [r7, #12]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	080040c3 	.word	0x080040c3
 80039f8:	080040f9 	.word	0x080040f9

080039fc <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb0e 	bl	8004030 <LPS22HH_Initialize>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	e004      	b.n	8003a2a <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d111      	bne.n	8003a68 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f877 	bl	8003b38 <LPS22HH_PRESS_Disable>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
 8003a54:	e00d      	b.n	8003a72 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f918 	bl	8003c8c <LPS22HH_TEMP_Disable>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e004      	b.n	8003a72 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3320      	adds	r3, #32
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fd1a 	bl	80044c4 <lps22hh_device_id_get>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e000      	b.n	8003a9e <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4a05      	ldr	r2, [pc, #20]	; (8003aec <LPS22HH_GetCapabilities+0x44>)
 8003ad6:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4a04      	ldr	r2, [pc, #16]	; (8003aec <LPS22HH_GetCapabilities+0x44>)
 8003adc:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	43480000 	.word	0x43480000

08003af0 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e014      	b.n	8003b30 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f103 0220 	add.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f000 fb93 	bl	8004240 <lps22hh_data_rate_set>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	e004      	b.n	8003b30 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e024      	b.n	8003b98 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d11a      	bne.n	8003b8e <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0220 	add.w	r2, r3, #32
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3333      	adds	r3, #51	; 0x33
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f000 fbb9 	bl	80042dc <lps22hh_data_rate_get>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
 8003b74:	e010      	b.n	8003b98 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3320      	adds	r3, #32
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fb5f 	bl	8004240 <lps22hh_data_rate_set>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	e004      	b.n	8003b98 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8003baa:	6839      	ldr	r1, [r7, #0]
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f90f 	bl	8003dd0 <LPS22HH_GetOutputDataRate>
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d106      	bne.n	8003be0 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003bd2:	ed97 0a00 	vldr	s0, [r7]
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f95e 	bl	8003e98 <LPS22HH_SetOutputDataRate_When_Enabled>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	e005      	b.n	8003bec <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003be0:	ed97 0a00 	vldr	s0, [r7]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f9c9 	bl	8003f7c <LPS22HH_SetOutputDataRate_When_Disabled>
 8003bea:	4603      	mov	r3, r0
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	2204      	movs	r2, #4
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00a fac6 	bl	800e198 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3320      	adds	r3, #32
 8003c10:	f107 020c 	add.w	r2, r7, #12
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fc08 	bl	800442c <lps22hh_pressure_raw_get>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	e009      	b.n	8003c3c <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fab0 	bl	8004190 <lps22hh_from_lsb_to_hpa>
 8003c30:	eef0 7a40 	vmov.f32	s15, s0
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e014      	b.n	8003c84 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f103 0220 	add.w	r2, r3, #32
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 fae9 	bl	8004240 <lps22hh_data_rate_set>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	e004      	b.n	8003c84 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e024      	b.n	8003cec <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11a      	bne.n	8003ce2 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f103 0220 	add.w	r2, r3, #32
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3333      	adds	r3, #51	; 0x33
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f000 fb0f 	bl	80042dc <lps22hh_data_rate_get>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	e010      	b.n	8003cec <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3320      	adds	r3, #32
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fab5 	bl	8004240 <lps22hh_data_rate_set>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	e004      	b.n	8003cec <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8003cfe:	6839      	ldr	r1, [r7, #0]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f865 	bl	8003dd0 <LPS22HH_GetOutputDataRate>
 8003d06:	4603      	mov	r3, r0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d106      	bne.n	8003d34 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003d26:	ed97 0a00 	vldr	s0, [r7]
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8b4 	bl	8003e98 <LPS22HH_SetOutputDataRate_When_Enabled>
 8003d30:	4603      	mov	r3, r0
 8003d32:	e005      	b.n	8003d40 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003d34:	ed97 0a00 	vldr	s0, [r7]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f91f 	bl	8003f7c <LPS22HH_SetOutputDataRate_When_Disabled>
 8003d3e:	4603      	mov	r3, r0
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003d52:	f107 030c 	add.w	r3, r7, #12
 8003d56:	2202      	movs	r2, #2
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f00a fa1c 	bl	800e198 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3320      	adds	r3, #32
 8003d64:	f107 020c 	add.w	r2, r7, #12
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fb87 	bl	800447e <lps22hh_temperature_raw_get>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	e00a      	b.n	8003d92 <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8003d7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fa1d 	bl	80041c0 <lps22hh_from_lsb_to_celsius>
 8003d86:	eef0 7a40 	vmov.f32	s15, s0
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70fb      	strb	r3, [r7, #3]
 8003da6:	4613      	mov	r3, r2
 8003da8:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f103 0020 	add.w	r0, r3, #32
 8003db0:	1cba      	adds	r2, r7, #2
 8003db2:	78f9      	ldrb	r1, [r7, #3]
 8003db4:	2301      	movs	r3, #1
 8003db6:	f000 f9d2 	bl	800415e <lps22hh_write_reg>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc4:	e000      	b.n	8003dc8 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3320      	adds	r3, #32
 8003de2:	f107 020b 	add.w	r2, r7, #11
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fa77 	bl	80042dc <lps22hh_data_rate_get>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	e03d      	b.n	8003e76 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8003dfa:	7afb      	ldrb	r3, [r7, #11]
 8003dfc:	2b07      	cmp	r3, #7
 8003dfe:	d835      	bhi.n	8003e6c <LPS22HH_GetOutputDataRate+0x9c>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <LPS22HH_GetOutputDataRate+0x38>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e29 	.word	0x08003e29
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e45 	.word	0x08003e45
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e55 	.word	0x08003e55
 8003e20:	08003e5d 	.word	0x08003e5d
 8003e24:	08003e65 	.word	0x08003e65
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
      break;
 8003e30:	e020      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e38:	601a      	str	r2, [r3, #0]
      break;
 8003e3a:	e01b      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	4a10      	ldr	r2, [pc, #64]	; (8003e80 <LPS22HH_GetOutputDataRate+0xb0>)
 8003e40:	601a      	str	r2, [r3, #0]
      break;
 8003e42:	e017      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <LPS22HH_GetOutputDataRate+0xb4>)
 8003e48:	601a      	str	r2, [r3, #0]
      break;
 8003e4a:	e013      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <LPS22HH_GetOutputDataRate+0xb8>)
 8003e50:	601a      	str	r2, [r3, #0]
      break;
 8003e52:	e00f      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <LPS22HH_GetOutputDataRate+0xbc>)
 8003e58:	601a      	str	r2, [r3, #0]
      break;
 8003e5a:	e00b      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <LPS22HH_GetOutputDataRate+0xc0>)
 8003e60:	601a      	str	r2, [r3, #0]
      break;
 8003e62:	e007      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <LPS22HH_GetOutputDataRate+0xc4>)
 8003e68:	601a      	str	r2, [r3, #0]
      break;
 8003e6a:	e003      	b.n	8003e74 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	60fb      	str	r3, [r7, #12]
      break;
 8003e72:	bf00      	nop
  }

  return ret;
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	41200000 	.word	0x41200000
 8003e84:	41c80000 	.word	0x41c80000
 8003e88:	42480000 	.word	0x42480000
 8003e8c:	42960000 	.word	0x42960000
 8003e90:	42c80000 	.word	0x42c80000
 8003e94:	43480000 	.word	0x43480000

08003e98 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003ea4:	edd7 7a00 	vldr	s15, [r7]
 8003ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	d801      	bhi.n	8003eba <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e037      	b.n	8003f2a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8003eba:	edd7 7a00 	vldr	s15, [r7]
 8003ebe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eca:	d801      	bhi.n	8003ed0 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e02c      	b.n	8003f2a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8003ed0:	edd7 7a00 	vldr	s15, [r7]
 8003ed4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	d801      	bhi.n	8003ee6 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e021      	b.n	8003f2a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8003ee6:	edd7 7a00 	vldr	s15, [r7]
 8003eea:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003f70 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8003eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef6:	d801      	bhi.n	8003efc <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	e016      	b.n	8003f2a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8003efc:	edd7 7a00 	vldr	s15, [r7]
 8003f00:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003f74 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8003f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	d801      	bhi.n	8003f12 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e00b      	b.n	8003f2a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8003f12:	edd7 7a00 	vldr	s15, [r7]
 8003f16:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003f78 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8003f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f22:	d801      	bhi.n	8003f28 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8003f24:	2306      	movs	r3, #6
 8003f26:	e000      	b.n	8003f2a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8003f28:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8003f2a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3320      	adds	r3, #32
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f983 	bl	8004240 <lps22hh_data_rate_set>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8003f40:	f04f 33ff 	mov.w	r3, #4294967295
 8003f44:	e00f      	b.n	8003f66 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f103 0220 	add.w	r2, r3, #32
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3333      	adds	r3, #51	; 0x33
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 f9c2 	bl	80042dc <lps22hh_data_rate_get>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	e000      	b.n	8003f66 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	42480000 	.word	0x42480000
 8003f74:	42960000 	.word	0x42960000
 8003f78:	42c80000 	.word	0x42c80000

08003f7c <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003f88:	edd7 7a00 	vldr	s15, [r7]
 8003f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	d801      	bhi.n	8003f9e <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e037      	b.n	800400e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8003f9e:	edd7 7a00 	vldr	s15, [r7]
 8003fa2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fae:	d801      	bhi.n	8003fb4 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e02c      	b.n	800400e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8003fb4:	edd7 7a00 	vldr	s15, [r7]
 8003fb8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc4:	d801      	bhi.n	8003fca <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e021      	b.n	800400e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8003fca:	edd7 7a00 	vldr	s15, [r7]
 8003fce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004024 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8003fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	d801      	bhi.n	8003fe0 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	e016      	b.n	800400e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8003fe0:	edd7 7a00 	vldr	s15, [r7]
 8003fe4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004028 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8003fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	d801      	bhi.n	8003ff6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	e00b      	b.n	800400e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8003ff6:	edd7 7a00 	vldr	s15, [r7]
 8003ffa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800402c <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8003ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	d801      	bhi.n	800400c <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8004008:	2306      	movs	r3, #6
 800400a:	e000      	b.n	800400e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800400c:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	42480000 	.word	0x42480000
 8004028:	42960000 	.word	0x42960000
 800402c:	42c80000 	.word	0x42c80000

08004030 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3320      	adds	r3, #32
 800403c:	2111      	movs	r1, #17
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fa9d 	bl	800457e <lps22hh_i3c_interface_set>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	e034      	b.n	80040ba <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3320      	adds	r3, #32
 8004054:	2110      	movs	r1, #16
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f8f2 	bl	8004240 <lps22hh_data_rate_set>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	e028      	b.n	80040ba <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3320      	adds	r3, #32
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fa5f 	bl	8004532 <lps22hh_lp_bandwidth_set>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	e01c      	b.n	80040ba <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3320      	adds	r3, #32
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f8b4 	bl	80041f4 <lps22hh_block_data_update_set>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	e010      	b.n	80040ba <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3320      	adds	r3, #32
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fa21 	bl	80044e6 <lps22hh_auto_increment_set>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	e004      	b.n	80040ba <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2203      	movs	r2, #3
 80040b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040c2:	b590      	push	{r4, r7, lr}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	461a      	mov	r2, r3
 80040ce:	460b      	mov	r3, r1
 80040d0:	72fb      	strb	r3, [r7, #11]
 80040d2:	4613      	mov	r3, r2
 80040d4:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	695c      	ldr	r4, [r3, #20]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	7b1b      	ldrb	r3, [r3, #12]
 80040e2:	b298      	uxth	r0, r3
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	b299      	uxth	r1, r3
 80040e8:	893b      	ldrh	r3, [r7, #8]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	47a0      	blx	r4
 80040ee:	4603      	mov	r3, r0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	461a      	mov	r2, r3
 8004104:	460b      	mov	r3, r1
 8004106:	72fb      	strb	r3, [r7, #11]
 8004108:	4613      	mov	r3, r2
 800410a:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	691c      	ldr	r4, [r3, #16]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	7b1b      	ldrb	r3, [r3, #12]
 8004118:	b298      	uxth	r0, r3
 800411a:	7afb      	ldrb	r3, [r7, #11]
 800411c:	b299      	uxth	r1, r3
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	47a0      	blx	r4
 8004124:	4603      	mov	r3, r0
}
 8004126:	4618      	mov	r0, r3
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd90      	pop	{r4, r7, pc}

0800412e <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800412e:	b590      	push	{r4, r7, lr}
 8004130:	b087      	sub	sp, #28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	461a      	mov	r2, r3
 800413a:	460b      	mov	r3, r1
 800413c:	72fb      	strb	r3, [r7, #11]
 800413e:	4613      	mov	r3, r2
 8004140:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685c      	ldr	r4, [r3, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68d8      	ldr	r0, [r3, #12]
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	7af9      	ldrb	r1, [r7, #11]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	47a0      	blx	r4
 8004152:	6178      	str	r0, [r7, #20]

  return ret;
 8004154:	697b      	ldr	r3, [r7, #20]
}
 8004156:	4618      	mov	r0, r3
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd90      	pop	{r4, r7, pc}

0800415e <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800415e:	b590      	push	{r4, r7, lr}
 8004160:	b087      	sub	sp, #28
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	461a      	mov	r2, r3
 800416a:	460b      	mov	r3, r1
 800416c:	72fb      	strb	r3, [r7, #11]
 800416e:	4613      	mov	r3, r2
 8004170:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681c      	ldr	r4, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68d8      	ldr	r0, [r3, #12]
 800417a:	893b      	ldrh	r3, [r7, #8]
 800417c:	7af9      	ldrb	r1, [r7, #11]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	47a0      	blx	r4
 8004182:	6178      	str	r0, [r7, #20]

  return ret;
 8004184:	697b      	ldr	r3, [r7, #20]
}
 8004186:	4618      	mov	r0, r3
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}
	...

08004190 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80041bc <lps22hh_from_lsb_to_hpa+0x2c>
 80041a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80041ae:	eeb0 0a67 	vmov.f32	s0, s15
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	49800000 	.word	0x49800000

080041c0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80041ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80041f0 <lps22hh_from_lsb_to_celsius+0x30>
 80041da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041de:	eef0 7a66 	vmov.f32	s15, s13
}
 80041e2:	eeb0 0a67 	vmov.f32	s0, s15
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	42c80000 	.word	0x42c80000

080041f4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004200:	f107 0208 	add.w	r2, r7, #8
 8004204:	2301      	movs	r3, #1
 8004206:	2110      	movs	r1, #16
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff90 	bl	800412e <lps22hh_read_reg>
 800420e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10f      	bne.n	8004236 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	7a3b      	ldrb	r3, [r7, #8]
 8004220:	f362 0341 	bfi	r3, r2, #1, #1
 8004224:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004226:	f107 0208 	add.w	r2, r7, #8
 800422a:	2301      	movs	r3, #1
 800422c:	2110      	movs	r1, #16
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ff95 	bl	800415e <lps22hh_write_reg>
 8004234:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800424c:	f107 0210 	add.w	r2, r7, #16
 8004250:	2301      	movs	r3, #1
 8004252:	2110      	movs	r1, #16
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff6a 	bl	800412e <lps22hh_read_reg>
 800425a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d107      	bne.n	8004272 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004262:	f107 020c 	add.w	r2, r7, #12
 8004266:	2301      	movs	r3, #1
 8004268:	2111      	movs	r1, #17
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff ff5f 	bl	800412e <lps22hh_read_reg>
 8004270:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	b2da      	uxtb	r2, r3
 8004280:	7c3b      	ldrb	r3, [r7, #16]
 8004282:	f362 1306 	bfi	r3, r2, #4, #3
 8004286:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004288:	f107 0210 	add.w	r2, r7, #16
 800428c:	2301      	movs	r3, #1
 800428e:	2110      	movs	r1, #16
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff64 	bl	800415e <lps22hh_write_reg>
 8004296:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d119      	bne.n	80042d2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	7b3b      	ldrb	r3, [r7, #12]
 80042aa:	f362 0341 	bfi	r3, r2, #1, #1
 80042ae:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	08db      	lsrs	r3, r3, #3
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	7b3b      	ldrb	r3, [r7, #12]
 80042bc:	f362 0300 	bfi	r3, r2, #0, #1
 80042c0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80042c2:	f107 020c 	add.w	r2, r7, #12
 80042c6:	2301      	movs	r3, #1
 80042c8:	2111      	movs	r1, #17
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff47 	bl	800415e <lps22hh_write_reg>
 80042d0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80042d2:	697b      	ldr	r3, [r7, #20]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80042e6:	f107 0210 	add.w	r2, r7, #16
 80042ea:	2301      	movs	r3, #1
 80042ec:	2110      	movs	r1, #16
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ff1d 	bl	800412e <lps22hh_read_reg>
 80042f4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80042fc:	f107 020c 	add.w	r2, r7, #12
 8004300:	2301      	movs	r3, #1
 8004302:	2111      	movs	r1, #17
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff12 	bl	800412e <lps22hh_read_reg>
 800430a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 8086 	bne.w	8004420 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004314:	f107 020c 	add.w	r2, r7, #12
 8004318:	2301      	movs	r3, #1
 800431a:	2111      	movs	r1, #17
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ff06 	bl	800412e <lps22hh_read_reg>
 8004322:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004324:	7b3b      	ldrb	r3, [r7, #12]
 8004326:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	011a      	lsls	r2, r3, #4
 800432e:	7b3b      	ldrb	r3, [r7, #12]
 8004330:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800433a:	7c3a      	ldrb	r2, [r7, #16]
 800433c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004340:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004342:	4413      	add	r3, r2
 8004344:	2b15      	cmp	r3, #21
 8004346:	d867      	bhi.n	8004418 <lps22hh_data_rate_get+0x13c>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <lps22hh_data_rate_get+0x74>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043b9 	.word	0x080043b9
 8004358:	080043c1 	.word	0x080043c1
 800435c:	080043c9 	.word	0x080043c9
 8004360:	080043d1 	.word	0x080043d1
 8004364:	080043d9 	.word	0x080043d9
 8004368:	08004409 	.word	0x08004409
 800436c:	08004411 	.word	0x08004411
 8004370:	080043b1 	.word	0x080043b1
 8004374:	08004419 	.word	0x08004419
 8004378:	08004419 	.word	0x08004419
 800437c:	08004419 	.word	0x08004419
 8004380:	08004419 	.word	0x08004419
 8004384:	08004419 	.word	0x08004419
 8004388:	08004419 	.word	0x08004419
 800438c:	08004419 	.word	0x08004419
 8004390:	08004419 	.word	0x08004419
 8004394:	080043e1 	.word	0x080043e1
 8004398:	080043e9 	.word	0x080043e9
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	080043f9 	.word	0x080043f9
 80043a4:	08004401 	.word	0x08004401
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
        break;
 80043ae:	e037      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2208      	movs	r2, #8
 80043b4:	701a      	strb	r2, [r3, #0]
        break;
 80043b6:	e033      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
        break;
 80043be:	e02f      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2202      	movs	r2, #2
 80043c4:	701a      	strb	r2, [r3, #0]
        break;
 80043c6:	e02b      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2203      	movs	r2, #3
 80043cc:	701a      	strb	r2, [r3, #0]
        break;
 80043ce:	e027      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2204      	movs	r2, #4
 80043d4:	701a      	strb	r2, [r3, #0]
        break;
 80043d6:	e023      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2205      	movs	r2, #5
 80043dc:	701a      	strb	r2, [r3, #0]
        break;
 80043de:	e01f      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2211      	movs	r2, #17
 80043e4:	701a      	strb	r2, [r3, #0]
        break;
 80043e6:	e01b      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2212      	movs	r2, #18
 80043ec:	701a      	strb	r2, [r3, #0]
        break;
 80043ee:	e017      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2213      	movs	r2, #19
 80043f4:	701a      	strb	r2, [r3, #0]
        break;
 80043f6:	e013      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2214      	movs	r2, #20
 80043fc:	701a      	strb	r2, [r3, #0]
        break;
 80043fe:	e00f      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2215      	movs	r2, #21
 8004404:	701a      	strb	r2, [r3, #0]
        break;
 8004406:	e00b      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2206      	movs	r2, #6
 800440c:	701a      	strb	r2, [r3, #0]
        break;
 800440e:	e007      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2207      	movs	r2, #7
 8004414:	701a      	strb	r2, [r3, #0]
        break;
 8004416:	e003      	b.n	8004420 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
        break;
 800441e:	bf00      	nop
    }
  }

  return ret;
 8004420:	697b      	ldr	r3, [r7, #20]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop

0800442c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004436:	f107 0208 	add.w	r2, r7, #8
 800443a:	2303      	movs	r3, #3
 800443c:	2128      	movs	r1, #40	; 0x28
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fe75 	bl	800412e <lps22hh_read_reg>
 8004444:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004446:	7abb      	ldrb	r3, [r7, #10]
 8004448:	461a      	mov	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	7a7a      	ldrb	r2, [r7, #9]
 8004456:	441a      	add	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	7a3a      	ldrb	r2, [r7, #8]
 8004464:	441a      	add	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	601a      	str	r2, [r3, #0]

  return ret;
 8004474:	68fb      	ldr	r3, [r7, #12]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004488:	f107 0208 	add.w	r2, r7, #8
 800448c:	2302      	movs	r3, #2
 800448e:	212b      	movs	r1, #43	; 0x2b
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fe4c 	bl	800412e <lps22hh_read_reg>
 8004496:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004498:	7a7b      	ldrb	r3, [r7, #9]
 800449a:	b21a      	sxth	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	7a3b      	ldrb	r3, [r7, #8]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	801a      	strh	r2, [r3, #0]

  return ret;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80044ce:	2301      	movs	r3, #1
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	210f      	movs	r1, #15
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fe2a 	bl	800412e <lps22hh_read_reg>
 80044da:	60f8      	str	r0, [r7, #12]

  return ret;
 80044dc:	68fb      	ldr	r3, [r7, #12]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80044f2:	f107 0208 	add.w	r2, r7, #8
 80044f6:	2301      	movs	r3, #1
 80044f8:	2111      	movs	r1, #17
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fe17 	bl	800412e <lps22hh_read_reg>
 8004500:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10f      	bne.n	8004528 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	b2da      	uxtb	r2, r3
 8004510:	7a3b      	ldrb	r3, [r7, #8]
 8004512:	f362 1304 	bfi	r3, r2, #4, #1
 8004516:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004518:	f107 0208 	add.w	r2, r7, #8
 800451c:	2301      	movs	r3, #1
 800451e:	2111      	movs	r1, #17
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fe1c 	bl	800415e <lps22hh_write_reg>
 8004526:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004528:	68fb      	ldr	r3, [r7, #12]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800453e:	f107 0208 	add.w	r2, r7, #8
 8004542:	2301      	movs	r3, #1
 8004544:	2110      	movs	r1, #16
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff fdf1 	bl	800412e <lps22hh_read_reg>
 800454c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10f      	bne.n	8004574 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	b2da      	uxtb	r2, r3
 800455c:	7a3b      	ldrb	r3, [r7, #8]
 800455e:	f362 0383 	bfi	r3, r2, #2, #2
 8004562:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004564:	f107 0208 	add.w	r2, r7, #8
 8004568:	2301      	movs	r3, #1
 800456a:	2110      	movs	r1, #16
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fdf6 	bl	800415e <lps22hh_write_reg>
 8004572:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800458a:	f107 0208 	add.w	r2, r7, #8
 800458e:	2301      	movs	r3, #1
 8004590:	210e      	movs	r1, #14
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fdcb 	bl	800412e <lps22hh_read_reg>
 8004598:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d118      	bne.n	80045d2 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	7a3b      	ldrb	r3, [r7, #8]
 80045aa:	f362 0341 	bfi	r3, r2, #1, #1
 80045ae:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	7a3b      	ldrb	r3, [r7, #8]
 80045bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80045c0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80045c2:	f107 0208 	add.w	r2, r7, #8
 80045c6:	2301      	movs	r3, #1
 80045c8:	210e      	movs	r1, #14
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fdc7 	bl	800415e <lps22hh_write_reg>
 80045d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d103      	bne.n	80045f8 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e051      	b.n	800469c <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	7b1a      	ldrb	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8004634:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1c      	ldr	r2, [pc, #112]	; (80046ac <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 800463a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e020      	b.n	800469c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4798      	blx	r3
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e016      	b.n	800469c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d112      	bne.n	800469c <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10d      	bne.n	800469c <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004680:	2301      	movs	r3, #1
 8004682:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	461a      	mov	r2, r3
 8004688:	2123      	movs	r1, #35	; 0x23
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fb55 	bl	8004d3a <LSM303AGR_ACC_Write_Reg>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	e000      	b.n	800469e <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	08005549 	.word	0x08005549
 80046ac:	080055ab 	.word	0x080055ab

080046b0 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3320      	adds	r3, #32
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 f94a 	bl	8005958 <lsm303agr_xl_block_data_update_set>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	e02c      	b.n	800472a <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3320      	adds	r3, #32
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 faed 	bl	8005cb6 <lsm303agr_xl_fifo_mode_set>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295
 80046e6:	e020      	b.n	800472a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2205      	movs	r2, #5
 80046ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3320      	adds	r3, #32
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 f84e 	bl	8005798 <lsm303agr_xl_data_rate_set>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e010      	b.n	800472a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3320      	adds	r3, #32
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f001 f8c4 	bl	800589c <lsm303agr_xl_full_scale_set>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800471a:	f04f 33ff 	mov.w	r3, #4294967295
 800471e:	e004      	b.n	800472a <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f87c 	bl	8004838 <LSM303AGR_ACC_Disable>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	e008      	b.n	800475e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3320      	adds	r3, #32
 8004774:	6839      	ldr	r1, [r7, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f001 fa55 	bl	8005c26 <lsm303agr_xl_device_id_get>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
 8004786:	e000      	b.n	800478a <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2200      	movs	r2, #0
 80047ae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2210      	movs	r2, #16
 80047c0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2200      	movs	r2, #0
 80047c6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4a06      	ldr	r2, [pc, #24]	; (80047ec <LSM303AGR_ACC_GetCapabilities+0x58>)
 80047d4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	43c80000 	.word	0x43c80000

080047f0 <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	e014      	b.n	8004830 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f103 0220 	add.w	r2, r3, #32
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f000 ffbf 	bl	8005798 <lsm303agr_xl_data_rate_set>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	e004      	b.n	8004830 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e01f      	b.n	800488e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f103 0220 	add.w	r2, r3, #32
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f000 ffc2 	bl	80057e4 <lsm303agr_xl_data_rate_get>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	e010      	b.n	800488e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3320      	adds	r3, #32
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ff90 	bl	8005798 <lsm303agr_xl_data_rate_set>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	e004      	b.n	800488e <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3320      	adds	r3, #32
 80048a8:	f107 020b 	add.w	r2, r7, #11
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 ff3e 	bl	8005730 <lsm303agr_xl_operating_mode_get>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	e031      	b.n	8004924 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80048c0:	7afb      	ldrb	r3, [r7, #11]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d01a      	beq.n	80048fc <LSM303AGR_ACC_GetSensitivity+0x66>
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	dc22      	bgt.n	8004910 <LSM303AGR_ACC_GetSensitivity+0x7a>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d00a      	beq.n	80048e8 <LSM303AGR_ACC_GetSensitivity+0x52>
 80048d2:	e01d      	b.n	8004910 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fca8 	bl	800522c <LSM303AGR_ACC_GetSensitivityHR>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01a      	beq.n	8004918 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e01d      	b.n	8004924 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fce4 	bl	80052b8 <LSM303AGR_ACC_GetSensitivityNM>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d012      	beq.n	800491c <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	e013      	b.n	8004924 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fd20 	bl	8005344 <LSM303AGR_ACC_GetSensitivityLP>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	e009      	b.n	8004924 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8004910:	f04f 33ff 	mov.w	r3, #4294967295
 8004914:	60fb      	str	r3, [r7, #12]
      break;
 8004916:	e004      	b.n	8004922 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8004918:	bf00      	nop
 800491a:	e002      	b.n	8004922 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8004920:	bf00      	nop
  }

  return ret;
 8004922:	68fb      	ldr	r3, [r7, #12]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3320      	adds	r3, #32
 800493e:	f107 020b 	add.w	r2, r7, #11
 8004942:	4611      	mov	r1, r2
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fef3 	bl	8005730 <lsm303agr_xl_operating_mode_get>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	e09d      	b.n	8004a92 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3320      	adds	r3, #32
 800495a:	f107 020a 	add.w	r2, r7, #10
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f000 ff3f 	bl	80057e4 <lsm303agr_xl_data_rate_get>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 800496c:	f04f 33ff 	mov.w	r3, #4294967295
 8004970:	e08f      	b.n	8004a92 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8004972:	7afb      	ldrb	r3, [r7, #11]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d147      	bne.n	8004a08 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8004978:	7abb      	ldrb	r3, [r7, #10]
 800497a:	2b09      	cmp	r3, #9
 800497c:	d840      	bhi.n	8004a00 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049b7 	.word	0x080049b7
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049c9 	.word	0x080049c9
 8004994:	080049d1 	.word	0x080049d1
 8004998:	080049d9 	.word	0x080049d9
 800499c:	080049e1 	.word	0x080049e1
 80049a0:	080049e9 	.word	0x080049e9
 80049a4:	080049f1 	.word	0x080049f1
 80049a8:	080049f9 	.word	0x080049f9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
        break;
 80049b4:	e06c      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049bc:	601a      	str	r2, [r3, #0]
        break;
 80049be:	e067      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	4a36      	ldr	r2, [pc, #216]	; (8004a9c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80049c4:	601a      	str	r2, [r3, #0]
        break;
 80049c6:	e063      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	4a35      	ldr	r2, [pc, #212]	; (8004aa0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80049cc:	601a      	str	r2, [r3, #0]
        break;
 80049ce:	e05f      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	4a34      	ldr	r2, [pc, #208]	; (8004aa4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80049d4:	601a      	str	r2, [r3, #0]
        break;
 80049d6:	e05b      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4a33      	ldr	r2, [pc, #204]	; (8004aa8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80049dc:	601a      	str	r2, [r3, #0]
        break;
 80049de:	e057      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4a32      	ldr	r2, [pc, #200]	; (8004aac <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80049e4:	601a      	str	r2, [r3, #0]
        break;
 80049e6:	e053      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4a31      	ldr	r2, [pc, #196]	; (8004ab0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80049ec:	601a      	str	r2, [r3, #0]
        break;
 80049ee:	e04f      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80049f4:	601a      	str	r2, [r3, #0]
        break;
 80049f6:	e04b      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4a2f      	ldr	r2, [pc, #188]	; (8004ab8 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80049fc:	601a      	str	r2, [r3, #0]
        break;
 80049fe:	e047      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
 8004a04:	60fb      	str	r3, [r7, #12]
        break;
 8004a06:	e043      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8004a08:	7abb      	ldrb	r3, [r7, #10]
 8004a0a:	2b09      	cmp	r3, #9
 8004a0c:	d83c      	bhi.n	8004a88 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a3d 	.word	0x08004a3d
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a59 	.word	0x08004a59
 8004a24:	08004a61 	.word	0x08004a61
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a79 	.word	0x08004a79
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004a81 	.word	0x08004a81
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
        break;
 8004a44:	e024      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a4c:	601a      	str	r2, [r3, #0]
        break;
 8004a4e:	e01f      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8004a54:	601a      	str	r2, [r3, #0]
        break;
 8004a56:	e01b      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8004a5c:	601a      	str	r2, [r3, #0]
        break;
 8004a5e:	e017      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8004a64:	601a      	str	r2, [r3, #0]
        break;
 8004a66:	e013      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8004a6c:	601a      	str	r2, [r3, #0]
        break;
 8004a6e:	e00f      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8004a74:	601a      	str	r2, [r3, #0]
        break;
 8004a76:	e00b      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8004a7c:	601a      	str	r2, [r3, #0]
        break;
 8004a7e:	e007      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8004a84:	601a      	str	r2, [r3, #0]
        break;
 8004a86:	e003      	b.n	8004a90 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8c:	60fb      	str	r3, [r7, #12]
        break;
 8004a8e:	bf00      	nop
    }
  }

  return ret;
 8004a90:	68fb      	ldr	r3, [r7, #12]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	41200000 	.word	0x41200000
 8004aa0:	41c80000 	.word	0x41c80000
 8004aa4:	42480000 	.word	0x42480000
 8004aa8:	42c80000 	.word	0x42c80000
 8004aac:	43480000 	.word	0x43480000
 8004ab0:	43c80000 	.word	0x43c80000
 8004ab4:	44ca8000 	.word	0x44ca8000
 8004ab8:	45a80000 	.word	0x45a80000
 8004abc:	44a80000 	.word	0x44a80000

08004ac0 <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d106      	bne.n	8004ae4 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004ad6:	ed97 0a00 	vldr	s0, [r7]
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fc78 	bl	80053d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	e005      	b.n	8004af0 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004ae4:	ed97 0a00 	vldr	s0, [r7]
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fcd3 	bl	8005494 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8004aee:	4603      	mov	r3, r0
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3320      	adds	r3, #32
 8004b0a:	f107 020b 	add.w	r2, r7, #11
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fee9 	bl	80058e8 <lsm303agr_xl_full_scale_get>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8004b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b20:	e023      	b.n	8004b6a <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d81b      	bhi.n	8004b60 <LSM303AGR_ACC_GetFullScale+0x68>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <LSM303AGR_ACC_GetFullScale+0x38>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b49 	.word	0x08004b49
 8004b38:	08004b51 	.word	0x08004b51
 8004b3c:	08004b59 	.word	0x08004b59
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2202      	movs	r2, #2
 8004b44:	601a      	str	r2, [r3, #0]
      break;
 8004b46:	e00f      	b.n	8004b68 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	601a      	str	r2, [r3, #0]
      break;
 8004b4e:	e00b      	b.n	8004b68 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2208      	movs	r2, #8
 8004b54:	601a      	str	r2, [r3, #0]
      break;
 8004b56:	e007      	b.n	8004b68 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	601a      	str	r2, [r3, #0]
      break;
 8004b5e:	e003      	b.n	8004b68 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004b60:	f04f 33ff 	mov.w	r3, #4294967295
 8004b64:	60fb      	str	r3, [r7, #12]
      break;
 8004b66:	bf00      	nop
  }

  return ret;
 8004b68:	68fb      	ldr	r3, [r7, #12]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop

08004b74 <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	dd0b      	ble.n	8004b9c <LSM303AGR_ACC_SetFullScale+0x28>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	dd06      	ble.n	8004b98 <LSM303AGR_ACC_SetFullScale+0x24>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	dc01      	bgt.n	8004b94 <LSM303AGR_ACC_SetFullScale+0x20>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e004      	b.n	8004b9e <LSM303AGR_ACC_SetFullScale+0x2a>
 8004b94:	2303      	movs	r3, #3
 8004b96:	e002      	b.n	8004b9e <LSM303AGR_ACC_SetFullScale+0x2a>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <LSM303AGR_ACC_SetFullScale+0x2a>
 8004b9c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8004b9e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3320      	adds	r3, #32
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fe77 	bl	800589c <lsm303agr_xl_full_scale_set>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	e000      	b.n	8004bbc <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3320      	adds	r3, #32
 8004bda:	f107 020f 	add.w	r2, r7, #15
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fda5 	bl	8005730 <lsm303agr_xl_operating_mode_get>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8004bec:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf0:	e04a      	b.n	8004c88 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d00c      	beq.n	8004c12 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	dc0e      	bgt.n	8004c1a <LSM303AGR_ACC_GetAxesRaw+0x56>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d003      	beq.n	8004c0c <LSM303AGR_ACC_GetAxesRaw+0x48>
 8004c04:	e009      	b.n	8004c1a <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8004c06:	2310      	movs	r3, #16
 8004c08:	83fb      	strh	r3, [r7, #30]
      break;
 8004c0a:	e00a      	b.n	8004c22 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8004c0c:	2340      	movs	r3, #64	; 0x40
 8004c0e:	83fb      	strh	r3, [r7, #30]
      break;
 8004c10:	e007      	b.n	8004c22 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8004c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c16:	83fb      	strh	r3, [r7, #30]
      break;
 8004c18:	e003      	b.n	8004c22 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	61bb      	str	r3, [r7, #24]
      break;
 8004c20:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d101      	bne.n	8004c2e <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	e02c      	b.n	8004c88 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3320      	adds	r3, #32
 8004c32:	f107 0210 	add.w	r2, r7, #16
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 feb3 	bl	80059a4 <lsm303agr_acceleration_raw_get>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	e01e      	b.n	8004c88 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8004c4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c58:	b21a      	sxth	r2, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8004c5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c68:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c6c:	b21a      	sxth	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8004c72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c80:	b21a      	sxth	r2, r3
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	809a      	strh	r2, [r3, #4]

  return ret;
 8004c86:	69bb      	ldr	r3, [r7, #24]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8004ca0:	f107 0310 	add.w	r3, r7, #16
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff ff8c 	bl	8004bc4 <LSM303AGR_ACC_GetAxesRaw>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb6:	e03c      	b.n	8004d32 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8004cb8:	f107 030c 	add.w	r3, r7, #12
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fde9 	bl	8004896 <LSM303AGR_ACC_GetSensitivity>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	e030      	b.n	8004d32 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004cd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ce8:	ee17 2a90 	vmov	r2, s15
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004cf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d08:	ee17 2a90 	vmov	r2, s15
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004d10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d28:	ee17 2a90 	vmov	r2, s15
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
 8004d46:	4613      	mov	r3, r2
 8004d48:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f103 0020 	add.w	r0, r3, #32
 8004d50:	1cba      	adds	r2, r7, #2
 8004d52:	78f9      	ldrb	r1, [r7, #3]
 8004d54:	2301      	movs	r3, #1
 8004d56:	f000 fcd3 	bl	8005700 <lsm303agr_write_reg>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8004d60:	f04f 33ff 	mov.w	r3, #4294967295
 8004d64:	e000      	b.n	8004d68 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e04b      	b.n	8004e24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	7b1a      	ldrb	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8004dce:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e01e      	b.n	8004e24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4798      	blx	r3
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e014      	b.n	8004e24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3320      	adds	r3, #32
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 ff75 	bl	8005d02 <lsm303agr_mag_i2c_interface_set>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	e000      	b.n	8004e26 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	0800560d 	.word	0x0800560d
 8004e34:	0800566f 	.word	0x0800566f

08004e38 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3320      	adds	r3, #32
 8004e44:	2101      	movs	r1, #1
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fe7c 	bl	8005b44 <lsm303agr_mag_block_data_update_set>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	e028      	b.n	8004eaa <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3320      	adds	r3, #32
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fdeb 	bl	8005a3a <lsm303agr_mag_operating_mode_set>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	e01c      	b.n	8004eaa <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3320      	adds	r3, #32
 8004e74:	2103      	movs	r1, #3
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fe05 	bl	8005a86 <lsm303agr_mag_data_rate_set>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295
 8004e86:	e010      	b.n	8004eaa <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3320      	adds	r3, #32
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 feeb 	bl	8005c6a <lsm303agr_mag_self_test_set>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	e004      	b.n	8004eaa <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f874 	bl	8004fa8 <LSM303AGR_MAG_Disable>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8004ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eca:	e004      	b.n	8004ed6 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3320      	adds	r3, #32
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 feaa 	bl	8005c48 <lsm303agr_mag_device_id_get>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	e000      	b.n	8004f02 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2201      	movs	r2, #1
 8004f26:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2232      	movs	r2, #50	; 0x32
 8004f3e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8004f54:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	42c80000 	.word	0x42c80000

08004f68 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e010      	b.n	8004fa0 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3320      	adds	r3, #32
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fd58 	bl	8005a3a <lsm303agr_mag_operating_mode_set>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	e004      	b.n	8004fa0 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e010      	b.n	8004fe0 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3320      	adds	r3, #32
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fd38 	bl	8005a3a <lsm303agr_mag_operating_mode_set>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd4:	e004      	b.n	8004fe0 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004ff8:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3320      	adds	r3, #32
 800501a:	f107 020b 	add.w	r2, r7, #11
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fd57 	bl	8005ad4 <lsm303agr_mag_data_rate_get>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	e023      	b.n	800507a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8005032:	7afb      	ldrb	r3, [r7, #11]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d81b      	bhi.n	8005070 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005051 	.word	0x08005051
 8005044:	08005059 	.word	0x08005059
 8005048:	08005061 	.word	0x08005061
 800504c:	08005069 	.word	0x08005069
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4a0c      	ldr	r2, [pc, #48]	; (8005084 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8005054:	601a      	str	r2, [r3, #0]
      break;
 8005056:	e00f      	b.n	8005078 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 800505c:	601a      	str	r2, [r3, #0]
      break;
 800505e:	e00b      	b.n	8005078 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8005064:	601a      	str	r2, [r3, #0]
      break;
 8005066:	e007      	b.n	8005078 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 800506c:	601a      	str	r2, [r3, #0]
      break;
 800506e:	e003      	b.n	8005078 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005070:	f04f 33ff 	mov.w	r3, #4294967295
 8005074:	60fb      	str	r3, [r7, #12]
      break;
 8005076:	bf00      	nop
  }

  return ret;
 8005078:	68fb      	ldr	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	41200000 	.word	0x41200000
 8005088:	41a00000 	.word	0x41a00000
 800508c:	42480000 	.word	0x42480000
 8005090:	42c80000 	.word	0x42c80000

08005094 <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80050a0:	edd7 7a00 	vldr	s15, [r7]
 80050a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	d801      	bhi.n	80050b6 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 80050b2:	2300      	movs	r3, #0
 80050b4:	e016      	b.n	80050e4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80050b6:	edd7 7a00 	vldr	s15, [r7]
 80050ba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80050be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	d801      	bhi.n	80050cc <LSM303AGR_MAG_SetOutputDataRate+0x38>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e00b      	b.n	80050e4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80050cc:	edd7 7a00 	vldr	s15, [r7]
 80050d0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800510c <LSM303AGR_MAG_SetOutputDataRate+0x78>
 80050d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050dc:	d801      	bhi.n	80050e2 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 80050de:	2302      	movs	r3, #2
 80050e0:	e000      	b.n	80050e4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80050e2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 80050e4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3320      	adds	r3, #32
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fcc9 	bl	8005a86 <lsm303agr_mag_data_rate_set>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	e000      	b.n	8005102 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	42480000 	.word	0x42480000

08005110 <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2232      	movs	r2, #50	; 0x32
 800511e:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3320      	adds	r3, #32
 8005154:	f107 0208 	add.w	r2, r7, #8
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fd18 	bl	8005b90 <lsm303agr_magnetic_raw_get>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8005166:	f04f 33ff 	mov.w	r3, #4294967295
 800516a:	e00c      	b.n	8005186 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800516c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005174:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800517c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3320      	adds	r3, #32
 800519c:	f107 0210 	add.w	r2, r7, #16
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fcf4 	bl	8005b90 <lsm303agr_magnetic_raw_get>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e036      	b.n	8005222 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 80051b4:	f107 030c 	add.w	r3, r7, #12
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff ff14 	bl	8004fe8 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80051c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80051d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051d8:	ee17 2a90 	vmov	r2, s15
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80051e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80051f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f8:	ee17 2a90 	vmov	r2, s15
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005200:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005204:	ee07 3a90 	vmov	s15, r3
 8005208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800520c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005218:	ee17 2a90 	vmov	r2, s15
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3320      	adds	r3, #32
 800523e:	f107 020b 	add.w	r2, r7, #11
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fb4f 	bl	80058e8 <lsm303agr_xl_full_scale_get>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005250:	f04f 33ff 	mov.w	r3, #4294967295
 8005254:	e023      	b.n	800529e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005256:	7afb      	ldrb	r3, [r7, #11]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d81b      	bhi.n	8005294 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005275 	.word	0x08005275
 8005268:	0800527d 	.word	0x0800527d
 800526c:	08005285 	.word	0x08005285
 8005270:	0800528d 	.word	0x0800528d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005278:	601a      	str	r2, [r3, #0]
      break;
 800527a:	e00f      	b.n	800529c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005280:	601a      	str	r2, [r3, #0]
      break;
 8005282:	e00b      	b.n	800529c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005288:	601a      	str	r2, [r3, #0]
      break;
 800528a:	e007      	b.n	800529c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005290:	601a      	str	r2, [r3, #0]
      break;
 8005292:	e003      	b.n	800529c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	60fb      	str	r3, [r7, #12]
      break;
 800529a:	bf00      	nop
  }

  return ret;
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	3f7ae148 	.word	0x3f7ae148
 80052ac:	3ff9999a 	.word	0x3ff9999a
 80052b0:	4079999a 	.word	0x4079999a
 80052b4:	413b851f 	.word	0x413b851f

080052b8 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3320      	adds	r3, #32
 80052ca:	f107 020b 	add.w	r2, r7, #11
 80052ce:	4611      	mov	r1, r2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fb09 	bl	80058e8 <lsm303agr_xl_full_scale_get>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	e023      	b.n	800532a <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80052e2:	7afb      	ldrb	r3, [r7, #11]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d81b      	bhi.n	8005320 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005301 	.word	0x08005301
 80052f4:	08005309 	.word	0x08005309
 80052f8:	08005311 	.word	0x08005311
 80052fc:	08005319 	.word	0x08005319
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	4a0c      	ldr	r2, [pc, #48]	; (8005334 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005304:	601a      	str	r2, [r3, #0]
      break;
 8005306:	e00f      	b.n	8005328 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	4a0b      	ldr	r2, [pc, #44]	; (8005338 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 800530c:	601a      	str	r2, [r3, #0]
      break;
 800530e:	e00b      	b.n	8005328 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005314:	601a      	str	r2, [r3, #0]
      break;
 8005316:	e007      	b.n	8005328 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 800531c:	601a      	str	r2, [r3, #0]
      break;
 800531e:	e003      	b.n	8005328 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	60fb      	str	r3, [r7, #12]
      break;
 8005326:	bf00      	nop
  }

  return ret;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	4079999a 	.word	0x4079999a
 8005338:	40fa3d71 	.word	0x40fa3d71
 800533c:	417a147b 	.word	0x417a147b
 8005340:	423b999a 	.word	0x423b999a

08005344 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3320      	adds	r3, #32
 8005356:	f107 020b 	add.w	r2, r7, #11
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fac3 	bl	80058e8 <lsm303agr_xl_full_scale_get>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005368:	f04f 33ff 	mov.w	r3, #4294967295
 800536c:	e023      	b.n	80053b6 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800536e:	7afb      	ldrb	r3, [r7, #11]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d81b      	bhi.n	80053ac <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800538d 	.word	0x0800538d
 8005380:	08005395 	.word	0x08005395
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a5 	.word	0x080053a5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005390:	601a      	str	r2, [r3, #0]
      break;
 8005392:	e00f      	b.n	80053b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4a0b      	ldr	r2, [pc, #44]	; (80053c4 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005398:	601a      	str	r2, [r3, #0]
      break;
 800539a:	e00b      	b.n	80053b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80053a0:	601a      	str	r2, [r3, #0]
      break;
 80053a2:	e007      	b.n	80053b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4a09      	ldr	r2, [pc, #36]	; (80053cc <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80053a8:	601a      	str	r2, [r3, #0]
      break;
 80053aa:	e003      	b.n	80053b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	60fb      	str	r3, [r7, #12]
      break;
 80053b2:	bf00      	nop
  }

  return ret;
 80053b4:	68fb      	ldr	r3, [r7, #12]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	417a147b 	.word	0x417a147b
 80053c4:	41fa147b 	.word	0x41fa147b
 80053c8:	427a147b 	.word	0x427a147b
 80053cc:	433b947b 	.word	0x433b947b

080053d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80053dc:	edd7 7a00 	vldr	s15, [r7]
 80053e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ec:	d801      	bhi.n	80053f2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e037      	b.n	8005462 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80053f2:	edd7 7a00 	vldr	s15, [r7]
 80053f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80053fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	d801      	bhi.n	8005408 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005404:	2302      	movs	r3, #2
 8005406:	e02c      	b.n	8005462 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005408:	edd7 7a00 	vldr	s15, [r7]
 800540c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005418:	d801      	bhi.n	800541e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800541a:	2303      	movs	r3, #3
 800541c:	e021      	b.n	8005462 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800541e:	edd7 7a00 	vldr	s15, [r7]
 8005422:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005488 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8005426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542e:	d801      	bhi.n	8005434 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005430:	2304      	movs	r3, #4
 8005432:	e016      	b.n	8005462 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005434:	edd7 7a00 	vldr	s15, [r7]
 8005438:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800548c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800543c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005444:	d801      	bhi.n	800544a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005446:	2305      	movs	r3, #5
 8005448:	e00b      	b.n	8005462 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800544a:	edd7 7a00 	vldr	s15, [r7]
 800544e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005490 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545a:	d801      	bhi.n	8005460 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 800545c:	2306      	movs	r3, #6
 800545e:	e000      	b.n	8005462 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005460:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005462:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3320      	adds	r3, #32
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	4611      	mov	r1, r2
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f993 	bl	8005798 <lsm303agr_xl_data_rate_set>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8005478:	f04f 33ff 	mov.w	r3, #4294967295
 800547c:	e000      	b.n	8005480 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	42480000 	.word	0x42480000
 800548c:	42c80000 	.word	0x42c80000
 8005490:	43480000 	.word	0x43480000

08005494 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80054a0:	edd7 7a00 	vldr	s15, [r7]
 80054a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b0:	d801      	bhi.n	80054b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e037      	b.n	8005526 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80054b6:	edd7 7a00 	vldr	s15, [r7]
 80054ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80054be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d801      	bhi.n	80054cc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e02c      	b.n	8005526 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80054cc:	edd7 7a00 	vldr	s15, [r7]
 80054d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80054d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	d801      	bhi.n	80054e2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80054de:	2303      	movs	r3, #3
 80054e0:	e021      	b.n	8005526 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80054e2:	edd7 7a00 	vldr	s15, [r7]
 80054e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800553c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80054ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	d801      	bhi.n	80054f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80054f4:	2304      	movs	r3, #4
 80054f6:	e016      	b.n	8005526 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80054f8:	edd7 7a00 	vldr	s15, [r7]
 80054fc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005540 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8005500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	d801      	bhi.n	800550e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800550a:	2305      	movs	r3, #5
 800550c:	e00b      	b.n	8005526 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800550e:	edd7 7a00 	vldr	s15, [r7]
 8005512:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005544 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8005516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d801      	bhi.n	8005524 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005520:	2306      	movs	r3, #6
 8005522:	e000      	b.n	8005526 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005524:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	42480000 	.word	0x42480000
 8005540:	42c80000 	.word	0x42c80000
 8005544:	43480000 	.word	0x43480000

08005548 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	607a      	str	r2, [r7, #4]
 8005552:	461a      	mov	r2, r3
 8005554:	460b      	mov	r3, r1
 8005556:	72fb      	strb	r3, [r7, #11]
 8005558:	4613      	mov	r3, r2
 800555a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10e      	bne.n	8005586 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	695c      	ldr	r4, [r3, #20]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	7b1b      	ldrb	r3, [r3, #12]
 8005570:	b298      	uxth	r0, r3
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005578:	b2db      	uxtb	r3, r3
 800557a:	b299      	uxth	r1, r3
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	47a0      	blx	r4
 8005582:	4603      	mov	r3, r0
 8005584:	e00d      	b.n	80055a2 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	695c      	ldr	r4, [r3, #20]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	7b1b      	ldrb	r3, [r3, #12]
 800558e:	b298      	uxth	r0, r3
 8005590:	7afb      	ldrb	r3, [r7, #11]
 8005592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005596:	b2db      	uxtb	r3, r3
 8005598:	b299      	uxth	r1, r3
 800559a:	893b      	ldrh	r3, [r7, #8]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	47a0      	blx	r4
 80055a0:	4603      	mov	r3, r0
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd90      	pop	{r4, r7, pc}

080055aa <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80055aa:	b590      	push	{r4, r7, lr}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	461a      	mov	r2, r3
 80055b6:	460b      	mov	r3, r1
 80055b8:	72fb      	strb	r3, [r7, #11]
 80055ba:	4613      	mov	r3, r2
 80055bc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10e      	bne.n	80055e8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	691c      	ldr	r4, [r3, #16]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	7b1b      	ldrb	r3, [r3, #12]
 80055d2:	b298      	uxth	r0, r3
 80055d4:	7afb      	ldrb	r3, [r7, #11]
 80055d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	b299      	uxth	r1, r3
 80055de:	893b      	ldrh	r3, [r7, #8]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	47a0      	blx	r4
 80055e4:	4603      	mov	r3, r0
 80055e6:	e00d      	b.n	8005604 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	691c      	ldr	r4, [r3, #16]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	7b1b      	ldrb	r3, [r3, #12]
 80055f0:	b298      	uxth	r0, r3
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	b299      	uxth	r1, r3
 80055fc:	893b      	ldrh	r3, [r7, #8]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	47a0      	blx	r4
 8005602:	4603      	mov	r3, r0
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	bd90      	pop	{r4, r7, pc}

0800560c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	461a      	mov	r2, r3
 8005618:	460b      	mov	r3, r1
 800561a:	72fb      	strb	r3, [r7, #11]
 800561c:	4613      	mov	r3, r2
 800561e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10e      	bne.n	800564a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	695c      	ldr	r4, [r3, #20]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	7b1b      	ldrb	r3, [r3, #12]
 8005634:	b298      	uxth	r0, r3
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563c:	b2db      	uxtb	r3, r3
 800563e:	b299      	uxth	r1, r3
 8005640:	893b      	ldrh	r3, [r7, #8]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	47a0      	blx	r4
 8005646:	4603      	mov	r3, r0
 8005648:	e00d      	b.n	8005666 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	695c      	ldr	r4, [r3, #20]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	7b1b      	ldrb	r3, [r3, #12]
 8005652:	b298      	uxth	r0, r3
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565a:	b2db      	uxtb	r3, r3
 800565c:	b299      	uxth	r1, r3
 800565e:	893b      	ldrh	r3, [r7, #8]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	47a0      	blx	r4
 8005664:	4603      	mov	r3, r0
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	bd90      	pop	{r4, r7, pc}

0800566e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800566e:	b590      	push	{r4, r7, lr}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	461a      	mov	r2, r3
 800567a:	460b      	mov	r3, r1
 800567c:	72fb      	strb	r3, [r7, #11]
 800567e:	4613      	mov	r3, r2
 8005680:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10e      	bne.n	80056ac <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	691c      	ldr	r4, [r3, #16]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	7b1b      	ldrb	r3, [r3, #12]
 8005696:	b298      	uxth	r0, r3
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	b299      	uxth	r1, r3
 80056a2:	893b      	ldrh	r3, [r7, #8]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	47a0      	blx	r4
 80056a8:	4603      	mov	r3, r0
 80056aa:	e00d      	b.n	80056c8 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	691c      	ldr	r4, [r3, #16]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	7b1b      	ldrb	r3, [r3, #12]
 80056b4:	b298      	uxth	r0, r3
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	b299      	uxth	r1, r3
 80056c0:	893b      	ldrh	r3, [r7, #8]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	47a0      	blx	r4
 80056c6:	4603      	mov	r3, r0
  }
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd90      	pop	{r4, r7, pc}

080056d0 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	461a      	mov	r2, r3
 80056dc:	460b      	mov	r3, r1
 80056de:	72fb      	strb	r3, [r7, #11]
 80056e0:	4613      	mov	r3, r2
 80056e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685c      	ldr	r4, [r3, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68d8      	ldr	r0, [r3, #12]
 80056ec:	893b      	ldrh	r3, [r7, #8]
 80056ee:	7af9      	ldrb	r1, [r7, #11]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	47a0      	blx	r4
 80056f4:	6178      	str	r0, [r7, #20]

  return ret;
 80056f6:	697b      	ldr	r3, [r7, #20]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd90      	pop	{r4, r7, pc}

08005700 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	461a      	mov	r2, r3
 800570c:	460b      	mov	r3, r1
 800570e:	72fb      	strb	r3, [r7, #11]
 8005710:	4613      	mov	r3, r2
 8005712:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681c      	ldr	r4, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68d8      	ldr	r0, [r3, #12]
 800571c:	893b      	ldrh	r3, [r7, #8]
 800571e:	7af9      	ldrb	r1, [r7, #11]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	47a0      	blx	r4
 8005724:	6178      	str	r0, [r7, #20]

  return ret;
 8005726:	697b      	ldr	r3, [r7, #20]
}
 8005728:	4618      	mov	r0, r3
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	bd90      	pop	{r4, r7, pc}

08005730 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800573a:	f107 020c 	add.w	r2, r7, #12
 800573e:	2301      	movs	r3, #1
 8005740:	2120      	movs	r1, #32
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff ffc4 	bl	80056d0 <lsm303agr_read_reg>
 8005748:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005750:	f107 0210 	add.w	r2, r7, #16
 8005754:	2301      	movs	r3, #1
 8005756:	2123      	movs	r1, #35	; 0x23
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ffb9 	bl	80056d0 <lsm303agr_read_reg>
 800575e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8005760:	7b3b      	ldrb	r3, [r7, #12]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2202      	movs	r2, #2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e00c      	b.n	800578e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8005774:	7c3b      	ldrb	r3, [r7, #16]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e002      	b.n	800578e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2201      	movs	r2, #1
 800578c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80057a4:	f107 0208 	add.w	r2, r7, #8
 80057a8:	2301      	movs	r3, #1
 80057aa:	2120      	movs	r1, #32
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff ff8f 	bl	80056d0 <lsm303agr_read_reg>
 80057b2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	7a3b      	ldrb	r3, [r7, #8]
 80057c4:	f362 1307 	bfi	r3, r2, #4, #4
 80057c8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80057ca:	f107 0208 	add.w	r2, r7, #8
 80057ce:	2301      	movs	r3, #1
 80057d0:	2120      	movs	r1, #32
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff ff94 	bl	8005700 <lsm303agr_write_reg>
 80057d8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80057ee:	f107 0208 	add.w	r2, r7, #8
 80057f2:	2301      	movs	r3, #1
 80057f4:	2120      	movs	r1, #32
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff ff6a 	bl	80056d0 <lsm303agr_read_reg>
 80057fc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 80057fe:	7a3b      	ldrb	r3, [r7, #8]
 8005800:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b09      	cmp	r3, #9
 8005808:	d83e      	bhi.n	8005888 <lsm303agr_xl_data_rate_get+0xa4>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <lsm303agr_xl_data_rate_get+0x2c>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005839 	.word	0x08005839
 8005814:	08005841 	.word	0x08005841
 8005818:	08005849 	.word	0x08005849
 800581c:	08005851 	.word	0x08005851
 8005820:	08005859 	.word	0x08005859
 8005824:	08005861 	.word	0x08005861
 8005828:	08005869 	.word	0x08005869
 800582c:	08005871 	.word	0x08005871
 8005830:	08005879 	.word	0x08005879
 8005834:	08005881 	.word	0x08005881
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
      break;
 800583e:	e027      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
      break;
 8005846:	e023      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2202      	movs	r2, #2
 800584c:	701a      	strb	r2, [r3, #0]
      break;
 800584e:	e01f      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2203      	movs	r2, #3
 8005854:	701a      	strb	r2, [r3, #0]
      break;
 8005856:	e01b      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2204      	movs	r2, #4
 800585c:	701a      	strb	r2, [r3, #0]
      break;
 800585e:	e017      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2205      	movs	r2, #5
 8005864:	701a      	strb	r2, [r3, #0]
      break;
 8005866:	e013      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2206      	movs	r2, #6
 800586c:	701a      	strb	r2, [r3, #0]
      break;
 800586e:	e00f      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2207      	movs	r2, #7
 8005874:	701a      	strb	r2, [r3, #0]
      break;
 8005876:	e00b      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2208      	movs	r2, #8
 800587c:	701a      	strb	r2, [r3, #0]
      break;
 800587e:	e007      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2209      	movs	r2, #9
 8005884:	701a      	strb	r2, [r3, #0]
      break;
 8005886:	e003      	b.n	8005890 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
      break;
 800588e:	bf00      	nop
  }

  return ret;
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80058a8:	f107 0208 	add.w	r2, r7, #8
 80058ac:	2301      	movs	r3, #1
 80058ae:	2123      	movs	r1, #35	; 0x23
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff0d 	bl	80056d0 <lsm303agr_read_reg>
 80058b6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10f      	bne.n	80058de <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	7a3b      	ldrb	r3, [r7, #8]
 80058c8:	f362 1305 	bfi	r3, r2, #4, #2
 80058cc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80058ce:	f107 0208 	add.w	r2, r7, #8
 80058d2:	2301      	movs	r3, #1
 80058d4:	2123      	movs	r1, #35	; 0x23
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff ff12 	bl	8005700 <lsm303agr_write_reg>
 80058dc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80058f2:	f107 0208 	add.w	r2, r7, #8
 80058f6:	2301      	movs	r3, #1
 80058f8:	2123      	movs	r1, #35	; 0x23
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fee8 	bl	80056d0 <lsm303agr_read_reg>
 8005900:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8005902:	7a3b      	ldrb	r3, [r7, #8]
 8005904:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b03      	cmp	r3, #3
 800590c:	d81a      	bhi.n	8005944 <lsm303agr_xl_full_scale_get+0x5c>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <lsm303agr_xl_full_scale_get+0x2c>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005925 	.word	0x08005925
 8005918:	0800592d 	.word	0x0800592d
 800591c:	08005935 	.word	0x08005935
 8005920:	0800593d 	.word	0x0800593d
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
      break;
 800592a:	e00f      	b.n	800594c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
      break;
 8005932:	e00b      	b.n	800594c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2202      	movs	r2, #2
 8005938:	701a      	strb	r2, [r3, #0]
      break;
 800593a:	e007      	b.n	800594c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2203      	movs	r2, #3
 8005940:	701a      	strb	r2, [r3, #0]
      break;
 8005942:	e003      	b.n	800594c <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
      break;
 800594a:	bf00      	nop
  }

  return ret;
 800594c:	68fb      	ldr	r3, [r7, #12]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop

08005958 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005964:	f107 0208 	add.w	r2, r7, #8
 8005968:	2301      	movs	r3, #1
 800596a:	2123      	movs	r1, #35	; 0x23
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff feaf 	bl	80056d0 <lsm303agr_read_reg>
 8005972:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	7a3b      	ldrb	r3, [r7, #8]
 8005984:	f362 13c7 	bfi	r3, r2, #7, #1
 8005988:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800598a:	f107 0208 	add.w	r2, r7, #8
 800598e:	2301      	movs	r3, #1
 8005990:	2123      	movs	r1, #35	; 0x23
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff feb4 	bl	8005700 <lsm303agr_write_reg>
 8005998:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80059ae:	f107 020c 	add.w	r2, r7, #12
 80059b2:	2306      	movs	r3, #6
 80059b4:	2128      	movs	r1, #40	; 0x28
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fe8a 	bl	80056d0 <lsm303agr_read_reg>
 80059bc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80059be:	7b7b      	ldrb	r3, [r7, #13]
 80059c0:	b21a      	sxth	r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	7b3b      	ldrb	r3, [r7, #12]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	4413      	add	r3, r2
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b21a      	sxth	r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80059e0:	7bfa      	ldrb	r2, [r7, #15]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	3302      	adds	r3, #2
 80059e6:	b212      	sxth	r2, r2
 80059e8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	3302      	adds	r3, #2
 80059ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	3302      	adds	r3, #2
 8005a04:	b212      	sxth	r2, r2
 8005a06:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005a08:	7c7a      	ldrb	r2, [r7, #17]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	b212      	sxth	r2, r2
 8005a10:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	3304      	adds	r3, #4
 8005a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	7c3b      	ldrb	r3, [r7, #16]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	b212      	sxth	r2, r2
 8005a2e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005a30:	697b      	ldr	r3, [r7, #20]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	460b      	mov	r3, r1
 8005a44:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005a46:	f107 0208 	add.w	r2, r7, #8
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	2160      	movs	r1, #96	; 0x60
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff fe3e 	bl	80056d0 <lsm303agr_read_reg>
 8005a54:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10f      	bne.n	8005a7c <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	7a3b      	ldrb	r3, [r7, #8]
 8005a66:	f362 0301 	bfi	r3, r2, #0, #2
 8005a6a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005a6c:	f107 0208 	add.w	r2, r7, #8
 8005a70:	2301      	movs	r3, #1
 8005a72:	2160      	movs	r1, #96	; 0x60
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fe43 	bl	8005700 <lsm303agr_write_reg>
 8005a7a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005a92:	f107 0208 	add.w	r2, r7, #8
 8005a96:	2301      	movs	r3, #1
 8005a98:	2160      	movs	r1, #96	; 0x60
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fe18 	bl	80056d0 <lsm303agr_read_reg>
 8005aa0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10f      	bne.n	8005ac8 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	7a3b      	ldrb	r3, [r7, #8]
 8005ab2:	f362 0383 	bfi	r3, r2, #2, #2
 8005ab6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005ab8:	f107 0208 	add.w	r2, r7, #8
 8005abc:	2301      	movs	r3, #1
 8005abe:	2160      	movs	r1, #96	; 0x60
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fe1d 	bl	8005700 <lsm303agr_write_reg>
 8005ac6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005ade:	f107 0208 	add.w	r2, r7, #8
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	2160      	movs	r1, #96	; 0x60
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff fdf2 	bl	80056d0 <lsm303agr_read_reg>
 8005aec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 8005aee:	7a3b      	ldrb	r3, [r7, #8]
 8005af0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d81a      	bhi.n	8005b30 <lsm303agr_mag_data_rate_get+0x5c>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <lsm303agr_mag_data_rate_get+0x2c>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005b19 	.word	0x08005b19
 8005b08:	08005b21 	.word	0x08005b21
 8005b0c:	08005b29 	.word	0x08005b29
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
      break;
 8005b16:	e00f      	b.n	8005b38 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
      break;
 8005b1e:	e00b      	b.n	8005b38 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2202      	movs	r2, #2
 8005b24:	701a      	strb	r2, [r3, #0]
      break;
 8005b26:	e007      	b.n	8005b38 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	701a      	strb	r2, [r3, #0]
      break;
 8005b2e:	e003      	b.n	8005b38 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
      break;
 8005b36:	bf00      	nop
  }

  return ret;
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop

08005b44 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005b50:	f107 0208 	add.w	r2, r7, #8
 8005b54:	2301      	movs	r3, #1
 8005b56:	2162      	movs	r1, #98	; 0x62
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fdb9 	bl	80056d0 <lsm303agr_read_reg>
 8005b5e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	7a3b      	ldrb	r3, [r7, #8]
 8005b70:	f362 1304 	bfi	r3, r2, #4, #1
 8005b74:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005b76:	f107 0208 	add.w	r2, r7, #8
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	2162      	movs	r1, #98	; 0x62
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fdbe 	bl	8005700 <lsm303agr_write_reg>
 8005b84:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8005b9a:	f107 020c 	add.w	r2, r7, #12
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	2168      	movs	r1, #104	; 0x68
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff fd94 	bl	80056d0 <lsm303agr_read_reg>
 8005ba8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005baa:	7b7b      	ldrb	r3, [r7, #13]
 8005bac:	b21a      	sxth	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	7b3b      	ldrb	r3, [r7, #12]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	b21a      	sxth	r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	b212      	sxth	r2, r2
 8005bd4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	3302      	adds	r3, #2
 8005bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	3302      	adds	r3, #2
 8005bf0:	b212      	sxth	r2, r2
 8005bf2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005bf4:	7c7a      	ldrb	r2, [r7, #17]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	b212      	sxth	r2, r2
 8005bfc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	3304      	adds	r3, #4
 8005c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	7c3b      	ldrb	r3, [r7, #16]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	3304      	adds	r3, #4
 8005c18:	b212      	sxth	r2, r2
 8005c1a:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c1c:	697b      	ldr	r3, [r7, #20]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8005c30:	2301      	movs	r3, #1
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	210f      	movs	r1, #15
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff fd4a 	bl	80056d0 <lsm303agr_read_reg>
 8005c3c:	60f8      	str	r0, [r7, #12]

  return ret;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8005c52:	2301      	movs	r3, #1
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	214f      	movs	r1, #79	; 0x4f
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fd39 	bl	80056d0 <lsm303agr_read_reg>
 8005c5e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005c60:	68fb      	ldr	r3, [r7, #12]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005c76:	f107 0208 	add.w	r2, r7, #8
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	2162      	movs	r1, #98	; 0x62
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fd26 	bl	80056d0 <lsm303agr_read_reg>
 8005c84:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10f      	bne.n	8005cac <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	7a3b      	ldrb	r3, [r7, #8]
 8005c96:	f362 0341 	bfi	r3, r2, #1, #1
 8005c9a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005c9c:	f107 0208 	add.w	r2, r7, #8
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	2162      	movs	r1, #98	; 0x62
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fd2b 	bl	8005700 <lsm303agr_write_reg>
 8005caa:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8005cc2:	f107 0208 	add.w	r2, r7, #8
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	212e      	movs	r1, #46	; 0x2e
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff fd00 	bl	80056d0 <lsm303agr_read_reg>
 8005cd0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10f      	bne.n	8005cf8 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	7a3b      	ldrb	r3, [r7, #8]
 8005ce2:	f362 1387 	bfi	r3, r2, #6, #2
 8005ce6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8005ce8:	f107 0208 	add.w	r2, r7, #8
 8005cec:	2301      	movs	r3, #1
 8005cee:	212e      	movs	r1, #46	; 0x2e
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff fd05 	bl	8005700 <lsm303agr_write_reg>
 8005cf6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005d0e:	f107 0208 	add.w	r2, r7, #8
 8005d12:	2301      	movs	r3, #1
 8005d14:	2162      	movs	r1, #98	; 0x62
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fcda 	bl	80056d0 <lsm303agr_read_reg>
 8005d1c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10f      	bne.n	8005d44 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	7a3b      	ldrb	r3, [r7, #8]
 8005d2e:	f362 1345 	bfi	r3, r2, #5, #1
 8005d32:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005d34:	f107 0208 	add.w	r2, r7, #8
 8005d38:	2301      	movs	r3, #1
 8005d3a:	2162      	movs	r1, #98	; 0x62
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff fcdf 	bl	8005700 <lsm303agr_write_reg>
 8005d42:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d58:	2003      	movs	r0, #3
 8005d5a:	f000 ffe4 	bl	8006d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f7fc f81e 	bl	8001da0 <HAL_InitTick>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	71fb      	strb	r3, [r7, #7]
 8005d6e:	e001      	b.n	8005d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d70:	f7fb fbb0 	bl	80014d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d74:	79fb      	ldrb	r3, [r7, #7]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <HAL_IncTick+0x20>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_IncTick+0x24>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4413      	add	r3, r2
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <HAL_IncTick+0x24>)
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000168 	.word	0x20000168
 8005da4:	20000bc8 	.word	0x20000bc8

08005da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return uwTick;
 8005dac:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_GetTick+0x14>)
 8005dae:	681b      	ldr	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000bc8 	.word	0x20000bc8

08005dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dc8:	f7ff ffee 	bl	8005da8 <HAL_GetTick>
 8005dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d005      	beq.n	8005de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <HAL_Delay+0x44>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005de6:	bf00      	nop
 8005de8:	f7ff ffde 	bl	8005da8 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d8f7      	bhi.n	8005de8 <HAL_Delay+0x28>
  {
  }
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000168 	.word	0x20000168

08005e08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	609a      	str	r2, [r3, #8]
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3360      	adds	r3, #96	; 0x60
 8005e82:	461a      	mov	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <LL_ADC_SetOffset+0x44>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	03fff000 	.word	0x03fff000

08005eb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3360      	adds	r3, #96	; 0x60
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3360      	adds	r3, #96	; 0x60
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	615a      	str	r2, [r3, #20]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3330      	adds	r3, #48	; 0x30
 8005f50:	461a      	mov	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	0a1b      	lsrs	r3, r3, #8
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	f003 030c 	and.w	r3, r3, #12
 8005f5c:	4413      	add	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	211f      	movs	r1, #31
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0e9b      	lsrs	r3, r3, #26
 8005f78:	f003 011f 	and.w	r1, r3, #31
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	431a      	orrs	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f8c:	bf00      	nop
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	0e5b      	lsrs	r3, r3, #25
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	4413      	add	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	0d1b      	lsrs	r3, r3, #20
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	2107      	movs	r1, #7
 8005fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	401a      	ands	r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	0d1b      	lsrs	r3, r3, #20
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006008:	43db      	mvns	r3, r3
 800600a:	401a      	ands	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f003 0318 	and.w	r3, r3, #24
 8006012:	4908      	ldr	r1, [pc, #32]	; (8006034 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006014:	40d9      	lsrs	r1, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	400b      	ands	r3, r1
 800601a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800601e:	431a      	orrs	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	0007ffff 	.word	0x0007ffff

08006038 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6093      	str	r3, [r2, #8]
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800606c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006070:	d101      	bne.n	8006076 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006098:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060c0:	d101      	bne.n	80060c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <LL_ADC_IsEnabled+0x18>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <LL_ADC_IsEnabled+0x1a>
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b04      	cmp	r3, #4
 800610c:	d101      	bne.n	8006112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b08      	cmp	r3, #8
 8006132:	d101      	bne.n	8006138 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e129      	b.n	80063b6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fb f9d7 	bl	8001524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff ff67 	bl	800605c <LL_ADC_IsDeepPowerDownEnabled>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ff4d 	bl	8006038 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff ff82 	bl	80060ac <LL_ADC_IsInternalRegulatorEnabled>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d115      	bne.n	80061da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff ff66 	bl	8006084 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061b8:	4b81      	ldr	r3, [pc, #516]	; (80063c0 <HAL_ADC_Init+0x278>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	099b      	lsrs	r3, r3, #6
 80061be:	4a81      	ldr	r2, [pc, #516]	; (80063c4 <HAL_ADC_Init+0x27c>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	099b      	lsrs	r3, r3, #6
 80061c6:	3301      	adds	r3, #1
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80061cc:	e002      	b.n	80061d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f9      	bne.n	80061ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff ff64 	bl	80060ac <LL_ADC_IsInternalRegulatorEnabled>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10d      	bne.n	8006206 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	f043 0210 	orr.w	r2, r3, #16
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fa:	f043 0201 	orr.w	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff ff75 	bl	80060fa <LL_ADC_REG_IsConversionOngoing>
 8006210:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	f040 80c2 	bne.w	80063a4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 80be 	bne.w	80063a4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006230:	f043 0202 	orr.w	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ff49 	bl	80060d4 <LL_ADC_IsEnabled>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006248:	485f      	ldr	r0, [pc, #380]	; (80063c8 <HAL_ADC_Init+0x280>)
 800624a:	f7ff ff43 	bl	80060d4 <LL_ADC_IsEnabled>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d105      	bne.n	8006260 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4619      	mov	r1, r3
 800625a:	485c      	ldr	r0, [pc, #368]	; (80063cc <HAL_ADC_Init+0x284>)
 800625c:	f7ff fdd4 	bl	8005e08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	7e5b      	ldrb	r3, [r3, #25]
 8006264:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800626a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006270:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006276:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800627e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d106      	bne.n	800629c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	3b01      	subs	r3, #1
 8006294:	045b      	lsls	r3, r3, #17
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4313      	orrs	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <HAL_ADC_Init+0x288>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	69b9      	ldr	r1, [r7, #24]
 80062c8:	430b      	orrs	r3, r1
 80062ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff ff25 	bl	8006120 <LL_ADC_INJ_IsConversionOngoing>
 80062d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d140      	bne.n	8006360 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d13d      	bne.n	8006360 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7e1b      	ldrb	r3, [r3, #24]
 80062ec:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80062ee:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006306:	f023 0306 	bic.w	r3, r3, #6
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	69b9      	ldr	r1, [r7, #24]
 8006310:	430b      	orrs	r3, r1
 8006312:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800631a:	2b01      	cmp	r3, #1
 800631c:	d118      	bne.n	8006350 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006328:	f023 0304 	bic.w	r3, r3, #4
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006334:	4311      	orrs	r1, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800633a:	4311      	orrs	r1, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006340:	430a      	orrs	r2, r1
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	611a      	str	r2, [r3, #16]
 800634e:	e007      	b.n	8006360 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10c      	bne.n	8006382 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	f023 010f 	bic.w	r1, r3, #15
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
 8006380:	e007      	b.n	8006392 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 020f 	bic.w	r2, r2, #15
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	f043 0201 	orr.w	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	659a      	str	r2, [r3, #88]	; 0x58
 80063a2:	e007      	b.n	80063b4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a8:	f043 0210 	orr.w	r2, r3, #16
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80063b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000060 	.word	0x20000060
 80063c4:	053e2d63 	.word	0x053e2d63
 80063c8:	50040000 	.word	0x50040000
 80063cc:	50040300 	.word	0x50040300
 80063d0:	fff0c007 	.word	0xfff0c007

080063d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b0b6      	sub	sp, #216	; 0xd8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_ADC_ConfigChannel+0x22>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e3d5      	b.n	8006ba2 <HAL_ADC_ConfigChannel+0x7ce>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fe79 	bl	80060fa <LL_ADC_REG_IsConversionOngoing>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 83ba 	bne.w	8006b84 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b05      	cmp	r3, #5
 800641e:	d824      	bhi.n	800646a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	3b02      	subs	r3, #2
 8006426:	2b03      	cmp	r3, #3
 8006428:	d81b      	bhi.n	8006462 <HAL_ADC_ConfigChannel+0x8e>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <HAL_ADC_ConfigChannel+0x5c>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006441 	.word	0x08006441
 8006434:	08006449 	.word	0x08006449
 8006438:	08006451 	.word	0x08006451
 800643c:	08006459 	.word	0x08006459
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006440:	230c      	movs	r3, #12
 8006442:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006446:	e010      	b.n	800646a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006448:	2312      	movs	r3, #18
 800644a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800644e:	e00c      	b.n	800646a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006450:	2318      	movs	r3, #24
 8006452:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006456:	e008      	b.n	800646a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800645c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006460:	e003      	b.n	800646a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006462:	2306      	movs	r3, #6
 8006464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006468:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006478:	f7ff fd62 	bl	8005f40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fe3a 	bl	80060fa <LL_ADC_REG_IsConversionOngoing>
 8006486:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fe46 	bl	8006120 <LL_ADC_INJ_IsConversionOngoing>
 8006494:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 81bf 	bne.w	8006820 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 81ba 	bne.w	8006820 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b4:	d10f      	bne.n	80064d6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	4619      	mov	r1, r3
 80064c2:	f7ff fd69 	bl	8005f98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fd23 	bl	8005f1a <LL_ADC_SetSamplingTimeCommonConfig>
 80064d4:	e00e      	b.n	80064f4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6819      	ldr	r1, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f7ff fd58 	bl	8005f98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fd13 	bl	8005f1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695a      	ldr	r2, [r3, #20]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	08db      	lsrs	r3, r3, #3
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00a      	beq.n	800652c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6919      	ldr	r1, [r3, #16]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006526:	f7ff fca3 	bl	8005e70 <LL_ADC_SetOffset>
 800652a:	e179      	b.n	8006820 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fcc0 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 8006538:	4603      	mov	r3, r0
 800653a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <HAL_ADC_ConfigChannel+0x184>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fcb5 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 800654e:	4603      	mov	r3, r0
 8006550:	0e9b      	lsrs	r3, r3, #26
 8006552:	f003 021f 	and.w	r2, r3, #31
 8006556:	e01e      	b.n	8006596 <HAL_ADC_ConfigChannel+0x1c2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fcaa 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 8006564:	4603      	mov	r3, r0
 8006566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800656e:	fa93 f3a3 	rbit	r3, r3
 8006572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800657a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800657e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8006586:	2320      	movs	r3, #32
 8006588:	e004      	b.n	8006594 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800658a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d105      	bne.n	80065ae <HAL_ADC_ConfigChannel+0x1da>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	0e9b      	lsrs	r3, r3, #26
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	e018      	b.n	80065e0 <HAL_ADC_ConfigChannel+0x20c>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065ba:	fa93 f3a3 	rbit	r3, r3
 80065be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80065c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80065ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80065d2:	2320      	movs	r3, #32
 80065d4:	e004      	b.n	80065e0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80065d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065da:	fab3 f383 	clz	r3, r3
 80065de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d106      	bne.n	80065f2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fc79 	bl	8005ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2101      	movs	r1, #1
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fc5d 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 80065fe:	4603      	mov	r3, r0
 8006600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <HAL_ADC_ConfigChannel+0x24a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2101      	movs	r1, #1
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fc52 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 8006614:	4603      	mov	r3, r0
 8006616:	0e9b      	lsrs	r3, r3, #26
 8006618:	f003 021f 	and.w	r2, r3, #31
 800661c:	e01e      	b.n	800665c <HAL_ADC_ConfigChannel+0x288>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fc47 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 800662a:	4603      	mov	r3, r0
 800662c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006630:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006634:	fa93 f3a3 	rbit	r3, r3
 8006638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800663c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006644:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800664c:	2320      	movs	r3, #32
 800664e:	e004      	b.n	800665a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8006650:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006654:	fab3 f383 	clz	r3, r3
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x2a0>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	0e9b      	lsrs	r3, r3, #26
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	e018      	b.n	80066a6 <HAL_ADC_ConfigChannel+0x2d2>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006680:	fa93 f3a3 	rbit	r3, r3
 8006684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800668c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8006698:	2320      	movs	r3, #32
 800669a:	e004      	b.n	80066a6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800669c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a0:	fab3 f383 	clz	r3, r3
 80066a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d106      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	2101      	movs	r1, #1
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fc16 	bl	8005ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2102      	movs	r1, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fbfa 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x310>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2102      	movs	r1, #2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fbef 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 80066da:	4603      	mov	r3, r0
 80066dc:	0e9b      	lsrs	r3, r3, #26
 80066de:	f003 021f 	and.w	r2, r3, #31
 80066e2:	e01e      	b.n	8006722 <HAL_ADC_ConfigChannel+0x34e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2102      	movs	r1, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fbe4 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066fa:	fa93 f3a3 	rbit	r3, r3
 80066fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800670a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8006712:	2320      	movs	r3, #32
 8006714:	e004      	b.n	8006720 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8006716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800671a:	fab3 f383 	clz	r3, r3
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <HAL_ADC_ConfigChannel+0x366>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	0e9b      	lsrs	r3, r3, #26
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	e014      	b.n	8006764 <HAL_ADC_ConfigChannel+0x390>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006742:	fa93 f3a3 	rbit	r3, r3
 8006746:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800674a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800674e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006756:	2320      	movs	r3, #32
 8006758:	e004      	b.n	8006764 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800675a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800675e:	fab3 f383 	clz	r3, r3
 8006762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006764:	429a      	cmp	r2, r3
 8006766:	d106      	bne.n	8006776 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	2102      	movs	r1, #2
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fbb7 	bl	8005ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2103      	movs	r1, #3
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fb9b 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 8006782:	4603      	mov	r3, r0
 8006784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <HAL_ADC_ConfigChannel+0x3ce>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2103      	movs	r1, #3
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fb90 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 8006798:	4603      	mov	r3, r0
 800679a:	0e9b      	lsrs	r3, r3, #26
 800679c:	f003 021f 	and.w	r2, r3, #31
 80067a0:	e017      	b.n	80067d2 <HAL_ADC_ConfigChannel+0x3fe>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2103      	movs	r1, #3
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fb85 	bl	8005eb8 <LL_ADC_GetOffsetChannel>
 80067ae:	4603      	mov	r3, r0
 80067b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067b4:	fa93 f3a3 	rbit	r3, r3
 80067b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80067ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80067be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80067c4:	2320      	movs	r3, #32
 80067c6:	e003      	b.n	80067d0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80067c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ca:	fab3 f383 	clz	r3, r3
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <HAL_ADC_ConfigChannel+0x416>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	0e9b      	lsrs	r3, r3, #26
 80067e4:	f003 031f 	and.w	r3, r3, #31
 80067e8:	e011      	b.n	800680e <HAL_ADC_ConfigChannel+0x43a>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f2:	fa93 f3a3 	rbit	r3, r3
 80067f6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80067f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067fa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80067fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8006802:	2320      	movs	r3, #32
 8006804:	e003      	b.n	800680e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006808:	fab3 f383 	clz	r3, r3
 800680c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800680e:	429a      	cmp	r2, r3
 8006810:	d106      	bne.n	8006820 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2200      	movs	r2, #0
 8006818:	2103      	movs	r1, #3
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fb62 	bl	8005ee4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fc55 	bl	80060d4 <LL_ADC_IsEnabled>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 813f 	bne.w	8006ab0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6819      	ldr	r1, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	461a      	mov	r2, r3
 8006840:	f7ff fbd6 	bl	8005ff0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	4a8e      	ldr	r2, [pc, #568]	; (8006a84 <HAL_ADC_ConfigChannel+0x6b0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	f040 8130 	bne.w	8006ab0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10b      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x4a4>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	0e9b      	lsrs	r3, r3, #26
 8006866:	3301      	adds	r3, #1
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	2b09      	cmp	r3, #9
 800686e:	bf94      	ite	ls
 8006870:	2301      	movls	r3, #1
 8006872:	2300      	movhi	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e019      	b.n	80068ac <HAL_ADC_ConfigChannel+0x4d8>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006880:	fa93 f3a3 	rbit	r3, r3
 8006884:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006888:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800688a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8006890:	2320      	movs	r3, #32
 8006892:	e003      	b.n	800689c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006896:	fab3 f383 	clz	r3, r3
 800689a:	b2db      	uxtb	r3, r3
 800689c:	3301      	adds	r3, #1
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2b09      	cmp	r3, #9
 80068a4:	bf94      	ite	ls
 80068a6:	2301      	movls	r3, #1
 80068a8:	2300      	movhi	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d079      	beq.n	80069a4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d107      	bne.n	80068cc <HAL_ADC_ConfigChannel+0x4f8>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	0e9b      	lsrs	r3, r3, #26
 80068c2:	3301      	adds	r3, #1
 80068c4:	069b      	lsls	r3, r3, #26
 80068c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068ca:	e015      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x524>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d4:	fa93 f3a3 	rbit	r3, r3
 80068d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80068da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80068de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80068e4:	2320      	movs	r3, #32
 80068e6:	e003      	b.n	80068f0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80068e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ea:	fab3 f383 	clz	r3, r3
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	3301      	adds	r3, #1
 80068f2:	069b      	lsls	r3, r3, #26
 80068f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <HAL_ADC_ConfigChannel+0x544>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	0e9b      	lsrs	r3, r3, #26
 800690a:	3301      	adds	r3, #1
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	e017      	b.n	8006948 <HAL_ADC_ConfigChannel+0x574>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006920:	fa93 f3a3 	rbit	r3, r3
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8006930:	2320      	movs	r3, #32
 8006932:	e003      	b.n	800693c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8006934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006936:	fab3 f383 	clz	r3, r3
 800693a:	b2db      	uxtb	r3, r3
 800693c:	3301      	adds	r3, #1
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	2101      	movs	r1, #1
 8006944:	fa01 f303 	lsl.w	r3, r1, r3
 8006948:	ea42 0103 	orr.w	r1, r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <HAL_ADC_ConfigChannel+0x59a>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	0e9b      	lsrs	r3, r3, #26
 800695e:	3301      	adds	r3, #1
 8006960:	f003 021f 	and.w	r2, r3, #31
 8006964:	4613      	mov	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4413      	add	r3, r2
 800696a:	051b      	lsls	r3, r3, #20
 800696c:	e018      	b.n	80069a0 <HAL_ADC_ConfigChannel+0x5cc>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	fa93 f3a3 	rbit	r3, r3
 800697a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8006986:	2320      	movs	r3, #32
 8006988:	e003      	b.n	8006992 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	fab3 f383 	clz	r3, r3
 8006990:	b2db      	uxtb	r3, r3
 8006992:	3301      	adds	r3, #1
 8006994:	f003 021f 	and.w	r2, r3, #31
 8006998:	4613      	mov	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4413      	add	r3, r2
 800699e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069a0:	430b      	orrs	r3, r1
 80069a2:	e080      	b.n	8006aa6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d107      	bne.n	80069c0 <HAL_ADC_ConfigChannel+0x5ec>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	0e9b      	lsrs	r3, r3, #26
 80069b6:	3301      	adds	r3, #1
 80069b8:	069b      	lsls	r3, r3, #26
 80069ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069be:	e015      	b.n	80069ec <HAL_ADC_ConfigChannel+0x618>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	fa93 f3a3 	rbit	r3, r3
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80069d8:	2320      	movs	r3, #32
 80069da:	e003      	b.n	80069e4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	fab3 f383 	clz	r3, r3
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	3301      	adds	r3, #1
 80069e6:	069b      	lsls	r3, r3, #26
 80069e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <HAL_ADC_ConfigChannel+0x638>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	0e9b      	lsrs	r3, r3, #26
 80069fe:	3301      	adds	r3, #1
 8006a00:	f003 031f 	and.w	r3, r3, #31
 8006a04:	2101      	movs	r1, #1
 8006a06:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0a:	e017      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x668>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	fa93 f3a3 	rbit	r3, r3
 8006a18:	61bb      	str	r3, [r7, #24]
  return result;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8006a24:	2320      	movs	r3, #32
 8006a26:	e003      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	fab3 f383 	clz	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	3301      	adds	r3, #1
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2101      	movs	r1, #1
 8006a38:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3c:	ea42 0103 	orr.w	r1, r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10d      	bne.n	8006a68 <HAL_ADC_ConfigChannel+0x694>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	0e9b      	lsrs	r3, r3, #26
 8006a52:	3301      	adds	r3, #1
 8006a54:	f003 021f 	and.w	r2, r3, #31
 8006a58:	4613      	mov	r3, r2
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3b1e      	subs	r3, #30
 8006a60:	051b      	lsls	r3, r3, #20
 8006a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a66:	e01d      	b.n	8006aa4 <HAL_ADC_ConfigChannel+0x6d0>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	fa93 f3a3 	rbit	r3, r3
 8006a74:	60fb      	str	r3, [r7, #12]
  return result;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006a80:	2320      	movs	r3, #32
 8006a82:	e005      	b.n	8006a90 <HAL_ADC_ConfigChannel+0x6bc>
 8006a84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	fab3 f383 	clz	r3, r3
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	3301      	adds	r3, #1
 8006a92:	f003 021f 	and.w	r2, r3, #31
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3b1e      	subs	r3, #30
 8006a9e:	051b      	lsls	r3, r3, #20
 8006aa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006aa4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f7ff fa74 	bl	8005f98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	4b3d      	ldr	r3, [pc, #244]	; (8006bac <HAL_ADC_ConfigChannel+0x7d8>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d06c      	beq.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006abc:	483c      	ldr	r0, [pc, #240]	; (8006bb0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006abe:	f7ff f9c9 	bl	8005e54 <LL_ADC_GetCommonPathInternalCh>
 8006ac2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3a      	ldr	r2, [pc, #232]	; (8006bb4 <HAL_ADC_ConfigChannel+0x7e0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d127      	bne.n	8006b20 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d121      	bne.n	8006b20 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a35      	ldr	r2, [pc, #212]	; (8006bb8 <HAL_ADC_ConfigChannel+0x7e4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d157      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ae6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006aee:	4619      	mov	r1, r3
 8006af0:	482f      	ldr	r0, [pc, #188]	; (8006bb0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006af2:	f7ff f99c 	bl	8005e2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006af6:	4b31      	ldr	r3, [pc, #196]	; (8006bbc <HAL_ADC_ConfigChannel+0x7e8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	099b      	lsrs	r3, r3, #6
 8006afc:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <HAL_ADC_ConfigChannel+0x7ec>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	099b      	lsrs	r3, r3, #6
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	4613      	mov	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006b10:	e002      	b.n	8006b18 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f9      	bne.n	8006b12 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b1e:	e03a      	b.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a27      	ldr	r2, [pc, #156]	; (8006bc4 <HAL_ADC_ConfigChannel+0x7f0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d113      	bne.n	8006b52 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006b2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10d      	bne.n	8006b52 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <HAL_ADC_ConfigChannel+0x7e4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d12a      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4819      	ldr	r0, [pc, #100]	; (8006bb0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006b4c:	f7ff f96f 	bl	8005e2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b50:	e021      	b.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1c      	ldr	r2, [pc, #112]	; (8006bc8 <HAL_ADC_ConfigChannel+0x7f4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d11c      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d116      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a12      	ldr	r2, [pc, #72]	; (8006bb8 <HAL_ADC_ConfigChannel+0x7e4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d111      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	480c      	ldr	r0, [pc, #48]	; (8006bb0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006b7e:	f7ff f956 	bl	8005e2e <LL_ADC_SetCommonPathInternalCh>
 8006b82:	e008      	b.n	8006b96 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006b9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	37d8      	adds	r7, #216	; 0xd8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	80080000 	.word	0x80080000
 8006bb0:	50040300 	.word	0x50040300
 8006bb4:	c7520000 	.word	0xc7520000
 8006bb8:	50040000 	.word	0x50040000
 8006bbc:	20000060 	.word	0x20000060
 8006bc0:	053e2d63 	.word	0x053e2d63
 8006bc4:	cb840000 	.word	0xcb840000
 8006bc8:	80000001 	.word	0x80000001

08006bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <__NVIC_SetPriorityGrouping+0x44>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006be8:	4013      	ands	r3, r2
 8006bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bfe:	4a04      	ldr	r2, [pc, #16]	; (8006c10 <__NVIC_SetPriorityGrouping+0x44>)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	60d3      	str	r3, [r2, #12]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	e000ed00 	.word	0xe000ed00

08006c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <__NVIC_GetPriorityGrouping+0x18>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	f003 0307 	and.w	r3, r3, #7
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	e000ed00 	.word	0xe000ed00

08006c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	db0b      	blt.n	8006c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	f003 021f 	and.w	r2, r3, #31
 8006c48:	4907      	ldr	r1, [pc, #28]	; (8006c68 <__NVIC_EnableIRQ+0x38>)
 8006c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	2001      	movs	r0, #1
 8006c52:	fa00 f202 	lsl.w	r2, r0, r2
 8006c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	e000e100 	.word	0xe000e100

08006c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	6039      	str	r1, [r7, #0]
 8006c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	db0a      	blt.n	8006c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	490c      	ldr	r1, [pc, #48]	; (8006cb8 <__NVIC_SetPriority+0x4c>)
 8006c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8a:	0112      	lsls	r2, r2, #4
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	440b      	add	r3, r1
 8006c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c94:	e00a      	b.n	8006cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	4908      	ldr	r1, [pc, #32]	; (8006cbc <__NVIC_SetPriority+0x50>)
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	3b04      	subs	r3, #4
 8006ca4:	0112      	lsls	r2, r2, #4
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	440b      	add	r3, r1
 8006caa:	761a      	strb	r2, [r3, #24]
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	e000e100 	.word	0xe000e100
 8006cbc:	e000ed00 	.word	0xe000ed00

08006cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	; 0x24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f1c3 0307 	rsb	r3, r3, #7
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	bf28      	it	cs
 8006cde:	2304      	movcs	r3, #4
 8006ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d902      	bls.n	8006cf0 <NVIC_EncodePriority+0x30>
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3b03      	subs	r3, #3
 8006cee:	e000      	b.n	8006cf2 <NVIC_EncodePriority+0x32>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	401a      	ands	r2, r3
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d08:	f04f 31ff 	mov.w	r1, #4294967295
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d12:	43d9      	mvns	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d18:	4313      	orrs	r3, r2
         );
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3724      	adds	r7, #36	; 0x24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff ff4c 	bl	8006bcc <__NVIC_SetPriorityGrouping>
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d4e:	f7ff ff61 	bl	8006c14 <__NVIC_GetPriorityGrouping>
 8006d52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	6978      	ldr	r0, [r7, #20]
 8006d5a:	f7ff ffb1 	bl	8006cc0 <NVIC_EncodePriority>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d64:	4611      	mov	r1, r2
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff ff80 	bl	8006c6c <__NVIC_SetPriority>
}
 8006d6c:	bf00      	nop
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff ff54 	bl	8006c30 <__NVIC_EnableIRQ>
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d008      	beq.n	8006dba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2204      	movs	r2, #4
 8006dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e022      	b.n	8006e00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 020e 	bic.w	r2, r2, #14
 8006dc8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f003 021c 	and.w	r2, r3, #28
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	2101      	movs	r1, #1
 8006de8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d005      	beq.n	8006e30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2204      	movs	r2, #4
 8006e28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	73fb      	strb	r3, [r7, #15]
 8006e2e:	e029      	b.n	8006e84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 020e 	bic.w	r2, r2, #14
 8006e3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e54:	f003 021c 	and.w	r2, r3, #28
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
    }
  }
  return status;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e9e:	e154      	b.n	800714a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	4013      	ands	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8146 	beq.w	8007144 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d005      	beq.n	8006ed0 <HAL_GPIO_Init+0x40>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d130      	bne.n	8006f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	2203      	movs	r2, #3
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f06:	2201      	movs	r2, #1
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4013      	ands	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	f003 0201 	and.w	r2, r3, #1
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d017      	beq.n	8006f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	2203      	movs	r2, #3
 8006f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4e:	43db      	mvns	r3, r3
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4013      	ands	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d123      	bne.n	8006fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	08da      	lsrs	r2, r3, #3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3208      	adds	r2, #8
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	220f      	movs	r2, #15
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	43db      	mvns	r3, r3
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	fa02 f303 	lsl.w	r3, r2, r3
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	08da      	lsrs	r2, r3, #3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3208      	adds	r2, #8
 8006fbc:	6939      	ldr	r1, [r7, #16]
 8006fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	2203      	movs	r2, #3
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 0203 	and.w	r2, r3, #3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 80a0 	beq.w	8007144 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007004:	4b58      	ldr	r3, [pc, #352]	; (8007168 <HAL_GPIO_Init+0x2d8>)
 8007006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007008:	4a57      	ldr	r2, [pc, #348]	; (8007168 <HAL_GPIO_Init+0x2d8>)
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	6613      	str	r3, [r2, #96]	; 0x60
 8007010:	4b55      	ldr	r3, [pc, #340]	; (8007168 <HAL_GPIO_Init+0x2d8>)
 8007012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800701c:	4a53      	ldr	r2, [pc, #332]	; (800716c <HAL_GPIO_Init+0x2dc>)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	3302      	adds	r3, #2
 8007024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	220f      	movs	r2, #15
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	43db      	mvns	r3, r3
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4013      	ands	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007046:	d019      	beq.n	800707c <HAL_GPIO_Init+0x1ec>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a49      	ldr	r2, [pc, #292]	; (8007170 <HAL_GPIO_Init+0x2e0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <HAL_GPIO_Init+0x1e8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a48      	ldr	r2, [pc, #288]	; (8007174 <HAL_GPIO_Init+0x2e4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00d      	beq.n	8007074 <HAL_GPIO_Init+0x1e4>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a47      	ldr	r2, [pc, #284]	; (8007178 <HAL_GPIO_Init+0x2e8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <HAL_GPIO_Init+0x1e0>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a46      	ldr	r2, [pc, #280]	; (800717c <HAL_GPIO_Init+0x2ec>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d101      	bne.n	800706c <HAL_GPIO_Init+0x1dc>
 8007068:	2304      	movs	r3, #4
 800706a:	e008      	b.n	800707e <HAL_GPIO_Init+0x1ee>
 800706c:	2307      	movs	r3, #7
 800706e:	e006      	b.n	800707e <HAL_GPIO_Init+0x1ee>
 8007070:	2303      	movs	r3, #3
 8007072:	e004      	b.n	800707e <HAL_GPIO_Init+0x1ee>
 8007074:	2302      	movs	r3, #2
 8007076:	e002      	b.n	800707e <HAL_GPIO_Init+0x1ee>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <HAL_GPIO_Init+0x1ee>
 800707c:	2300      	movs	r3, #0
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	f002 0203 	and.w	r2, r2, #3
 8007084:	0092      	lsls	r2, r2, #2
 8007086:	4093      	lsls	r3, r2
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800708e:	4937      	ldr	r1, [pc, #220]	; (800716c <HAL_GPIO_Init+0x2dc>)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	089b      	lsrs	r3, r3, #2
 8007094:	3302      	adds	r3, #2
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800709c:	4b38      	ldr	r3, [pc, #224]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	43db      	mvns	r3, r3
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4013      	ands	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80070c0:	4a2f      	ldr	r2, [pc, #188]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80070c6:	4b2e      	ldr	r3, [pc, #184]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	43db      	mvns	r3, r3
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4013      	ands	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070ea:	4a25      	ldr	r2, [pc, #148]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80070f0:	4b23      	ldr	r3, [pc, #140]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	43db      	mvns	r3, r3
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4013      	ands	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007114:	4a1a      	ldr	r2, [pc, #104]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800711a:	4b19      	ldr	r3, [pc, #100]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	43db      	mvns	r3, r3
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4013      	ands	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800713e:	4a10      	ldr	r2, [pc, #64]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	3301      	adds	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	f47f aea3 	bne.w	8006ea0 <HAL_GPIO_Init+0x10>
  }
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40021000 	.word	0x40021000
 800716c:	40010000 	.word	0x40010000
 8007170:	48000400 	.word	0x48000400
 8007174:	48000800 	.word	0x48000800
 8007178:	48000c00 	.word	0x48000c00
 800717c:	48001000 	.word	0x48001000
 8007180:	40010400 	.word	0x40010400

08007184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007192:	e0b7      	b.n	8007304 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007194:	2201      	movs	r2, #1
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	4013      	ands	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80aa 	beq.w	80072fe <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80071aa:	4a5d      	ldr	r2, [pc, #372]	; (8007320 <HAL_GPIO_DeInit+0x19c>)
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	089b      	lsrs	r3, r3, #2
 80071b0:	3302      	adds	r3, #2
 80071b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	220f      	movs	r2, #15
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4013      	ands	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071d2:	d019      	beq.n	8007208 <HAL_GPIO_DeInit+0x84>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a53      	ldr	r2, [pc, #332]	; (8007324 <HAL_GPIO_DeInit+0x1a0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_GPIO_DeInit+0x80>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a52      	ldr	r2, [pc, #328]	; (8007328 <HAL_GPIO_DeInit+0x1a4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00d      	beq.n	8007200 <HAL_GPIO_DeInit+0x7c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a51      	ldr	r2, [pc, #324]	; (800732c <HAL_GPIO_DeInit+0x1a8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d007      	beq.n	80071fc <HAL_GPIO_DeInit+0x78>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a50      	ldr	r2, [pc, #320]	; (8007330 <HAL_GPIO_DeInit+0x1ac>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d101      	bne.n	80071f8 <HAL_GPIO_DeInit+0x74>
 80071f4:	2304      	movs	r3, #4
 80071f6:	e008      	b.n	800720a <HAL_GPIO_DeInit+0x86>
 80071f8:	2307      	movs	r3, #7
 80071fa:	e006      	b.n	800720a <HAL_GPIO_DeInit+0x86>
 80071fc:	2303      	movs	r3, #3
 80071fe:	e004      	b.n	800720a <HAL_GPIO_DeInit+0x86>
 8007200:	2302      	movs	r3, #2
 8007202:	e002      	b.n	800720a <HAL_GPIO_DeInit+0x86>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <HAL_GPIO_DeInit+0x86>
 8007208:	2300      	movs	r3, #0
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	f002 0203 	and.w	r2, r2, #3
 8007210:	0092      	lsls	r2, r2, #2
 8007212:	4093      	lsls	r3, r2
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	429a      	cmp	r2, r3
 8007218:	d132      	bne.n	8007280 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800721a:	4b46      	ldr	r3, [pc, #280]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	43db      	mvns	r3, r3
 8007222:	4944      	ldr	r1, [pc, #272]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 8007224:	4013      	ands	r3, r2
 8007226:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007228:	4b42      	ldr	r3, [pc, #264]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	43db      	mvns	r3, r3
 8007230:	4940      	ldr	r1, [pc, #256]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 8007232:	4013      	ands	r3, r2
 8007234:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007236:	4b3f      	ldr	r3, [pc, #252]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	43db      	mvns	r3, r3
 800723e:	493d      	ldr	r1, [pc, #244]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 8007240:	4013      	ands	r3, r2
 8007242:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007244:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	43db      	mvns	r3, r3
 800724c:	4939      	ldr	r1, [pc, #228]	; (8007334 <HAL_GPIO_DeInit+0x1b0>)
 800724e:	4013      	ands	r3, r2
 8007250:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	220f      	movs	r2, #15
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007262:	4a2f      	ldr	r2, [pc, #188]	; (8007320 <HAL_GPIO_DeInit+0x19c>)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	3302      	adds	r3, #2
 800726a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	43da      	mvns	r2, r3
 8007272:	482b      	ldr	r0, [pc, #172]	; (8007320 <HAL_GPIO_DeInit+0x19c>)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	089b      	lsrs	r3, r3, #2
 8007278:	400a      	ands	r2, r1
 800727a:	3302      	adds	r3, #2
 800727c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	2103      	movs	r1, #3
 800728a:	fa01 f303 	lsl.w	r3, r1, r3
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	08da      	lsrs	r2, r3, #3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3208      	adds	r2, #8
 800729c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	220f      	movs	r2, #15
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	43db      	mvns	r3, r3
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	08d2      	lsrs	r2, r2, #3
 80072b4:	4019      	ands	r1, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3208      	adds	r2, #8
 80072ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	2103      	movs	r1, #3
 80072c8:	fa01 f303 	lsl.w	r3, r1, r3
 80072cc:	43db      	mvns	r3, r3
 80072ce:	401a      	ands	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	2101      	movs	r1, #1
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	fa01 f303 	lsl.w	r3, r1, r3
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	2103      	movs	r1, #3
 80072f2:	fa01 f303 	lsl.w	r3, r1, r3
 80072f6:	43db      	mvns	r3, r3
 80072f8:	401a      	ands	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3301      	adds	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f af41 	bne.w	8007194 <HAL_GPIO_DeInit+0x10>
  }
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40010000 	.word	0x40010000
 8007324:	48000400 	.word	0x48000400
 8007328:	48000800 	.word	0x48000800
 800732c:	48000c00 	.word	0x48000c00
 8007330:	48001000 	.word	0x48001000
 8007334:	40010400 	.word	0x40010400

08007338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	807b      	strh	r3, [r7, #2]
 8007344:	4613      	mov	r3, r2
 8007346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007348:	787b      	ldrb	r3, [r7, #1]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800734e:	887a      	ldrh	r2, [r7, #2]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007354:	e002      	b.n	800735c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007356:	887a      	ldrh	r2, [r7, #2]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007374:	695a      	ldr	r2, [r3, #20]
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	4013      	ands	r3, r2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d006      	beq.n	800738c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800737e:	4a05      	ldr	r2, [pc, #20]	; (8007394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007380:	88fb      	ldrh	r3, [r7, #6]
 8007382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f806 	bl	8007398 <HAL_GPIO_EXTI_Callback>
  }
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40010400 	.word	0x40010400

08007398 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e08d      	b.n	80074dc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fa f8e5 	bl	80015a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2224      	movs	r2, #36	; 0x24
 80073de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0201 	bic.w	r2, r2, #1
 80073f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800740e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d107      	bne.n	8007428 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007424:	609a      	str	r2, [r3, #8]
 8007426:	e006      	b.n	8007436 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007434:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d108      	bne.n	8007450 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800744c:	605a      	str	r2, [r3, #4]
 800744e:	e007      	b.n	8007460 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800746e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007472:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007482:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69d9      	ldr	r1, [r3, #28]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1a      	ldr	r2, [r3, #32]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e021      	b.n	800753a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	; 0x24
 80074fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0201 	bic.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fa f8a6 	bl	8001660 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	4608      	mov	r0, r1
 800754e:	4611      	mov	r1, r2
 8007550:	461a      	mov	r2, r3
 8007552:	4603      	mov	r3, r0
 8007554:	817b      	strh	r3, [r7, #10]
 8007556:	460b      	mov	r3, r1
 8007558:	813b      	strh	r3, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b20      	cmp	r3, #32
 8007568:	f040 80f9 	bne.w	800775e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_I2C_Mem_Write+0x34>
 8007572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800757e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e0ed      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_I2C_Mem_Write+0x4e>
 800758e:	2302      	movs	r3, #2
 8007590:	e0e6      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800759a:	f7fe fc05 	bl	8005da8 <HAL_GetTick>
 800759e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	2319      	movs	r3, #25
 80075a6:	2201      	movs	r2, #1
 80075a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fadd 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0d1      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2221      	movs	r2, #33	; 0x21
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2240      	movs	r2, #64	; 0x40
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a3a      	ldr	r2, [r7, #32]
 80075d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075e4:	88f8      	ldrh	r0, [r7, #6]
 80075e6:	893a      	ldrh	r2, [r7, #8]
 80075e8:	8979      	ldrh	r1, [r7, #10]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	4603      	mov	r3, r0
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f9ed 	bl	80079d4 <I2C_RequestMemoryWrite>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0a9      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2bff      	cmp	r3, #255	; 0xff
 8007614:	d90e      	bls.n	8007634 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	22ff      	movs	r2, #255	; 0xff
 800761a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007620:	b2da      	uxtb	r2, r3
 8007622:	8979      	ldrh	r1, [r7, #10]
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fc57 	bl	8007ee0 <I2C_TransferConfig>
 8007632:	e00f      	b.n	8007654 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007642:	b2da      	uxtb	r2, r3
 8007644:	8979      	ldrh	r1, [r7, #10]
 8007646:	2300      	movs	r3, #0
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fc46 	bl	8007ee0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fad6 	bl	8007c0a <I2C_WaitOnTXISFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e07b      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d034      	beq.n	800770c <HAL_I2C_Mem_Write+0x1c8>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d130      	bne.n	800770c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	2200      	movs	r2, #0
 80076b2:	2180      	movs	r1, #128	; 0x80
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa59 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e04d      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2bff      	cmp	r3, #255	; 0xff
 80076cc:	d90e      	bls.n	80076ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	22ff      	movs	r2, #255	; 0xff
 80076d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	8979      	ldrh	r1, [r7, #10]
 80076dc:	2300      	movs	r3, #0
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fbfb 	bl	8007ee0 <I2C_TransferConfig>
 80076ea:	e00f      	b.n	800770c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	8979      	ldrh	r1, [r7, #10]
 80076fe:	2300      	movs	r3, #0
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fbea 	bl	8007ee0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d19e      	bne.n	8007654 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fabc 	bl	8007c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e01a      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2220      	movs	r2, #32
 8007730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6859      	ldr	r1, [r3, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <HAL_I2C_Mem_Write+0x224>)
 800773e:	400b      	ands	r3, r1
 8007740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	e000      	b.n	8007760 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800775e:	2302      	movs	r3, #2
  }
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	fe00e800 	.word	0xfe00e800

0800776c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	461a      	mov	r2, r3
 800777a:	4603      	mov	r3, r0
 800777c:	817b      	strh	r3, [r7, #10]
 800777e:	460b      	mov	r3, r1
 8007780:	813b      	strh	r3, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b20      	cmp	r3, #32
 8007790:	f040 80fd 	bne.w	800798e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_I2C_Mem_Read+0x34>
 800779a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0f1      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d101      	bne.n	80077ba <HAL_I2C_Mem_Read+0x4e>
 80077b6:	2302      	movs	r3, #2
 80077b8:	e0ea      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077c2:	f7fe faf1 	bl	8005da8 <HAL_GetTick>
 80077c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2319      	movs	r3, #25
 80077ce:	2201      	movs	r2, #1
 80077d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f9c9 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0d5      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2222      	movs	r2, #34	; 0x22
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2240      	movs	r2, #64	; 0x40
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a3a      	ldr	r2, [r7, #32]
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800780c:	88f8      	ldrh	r0, [r7, #6]
 800780e:	893a      	ldrh	r2, [r7, #8]
 8007810:	8979      	ldrh	r1, [r7, #10]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	9301      	str	r3, [sp, #4]
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	4603      	mov	r3, r0
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f92d 	bl	8007a7c <I2C_RequestMemoryRead>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e0ad      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2bff      	cmp	r3, #255	; 0xff
 800783c:	d90e      	bls.n	800785c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	22ff      	movs	r2, #255	; 0xff
 8007842:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007848:	b2da      	uxtb	r2, r3
 800784a:	8979      	ldrh	r1, [r7, #10]
 800784c:	4b52      	ldr	r3, [pc, #328]	; (8007998 <HAL_I2C_Mem_Read+0x22c>)
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fb43 	bl	8007ee0 <I2C_TransferConfig>
 800785a:	e00f      	b.n	800787c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786a:	b2da      	uxtb	r2, r3
 800786c:	8979      	ldrh	r1, [r7, #10]
 800786e:	4b4a      	ldr	r3, [pc, #296]	; (8007998 <HAL_I2C_Mem_Read+0x22c>)
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fb32 	bl	8007ee0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	2200      	movs	r2, #0
 8007884:	2104      	movs	r1, #4
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 f970 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e07c      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d034      	beq.n	800793c <HAL_I2C_Mem_Read+0x1d0>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d130      	bne.n	800793c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	2200      	movs	r2, #0
 80078e2:	2180      	movs	r1, #128	; 0x80
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f941 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e04d      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2bff      	cmp	r3, #255	; 0xff
 80078fc:	d90e      	bls.n	800791c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	22ff      	movs	r2, #255	; 0xff
 8007902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007908:	b2da      	uxtb	r2, r3
 800790a:	8979      	ldrh	r1, [r7, #10]
 800790c:	2300      	movs	r3, #0
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fae3 	bl	8007ee0 <I2C_TransferConfig>
 800791a:	e00f      	b.n	800793c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792a:	b2da      	uxtb	r2, r3
 800792c:	8979      	ldrh	r1, [r7, #10]
 800792e:	2300      	movs	r3, #0
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 fad2 	bl	8007ee0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d19a      	bne.n	800787c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f9a4 	bl	8007c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e01a      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2220      	movs	r2, #32
 8007960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6859      	ldr	r1, [r3, #4]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <HAL_I2C_Mem_Read+0x230>)
 800796e:	400b      	ands	r3, r1
 8007970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	e000      	b.n	8007990 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800798e:	2302      	movs	r3, #2
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	80002400 	.word	0x80002400
 800799c:	fe00e800 	.word	0xfe00e800

080079a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ae:	b2db      	uxtb	r3, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	817b      	strh	r3, [r7, #10]
 80079e6:	460b      	mov	r3, r1
 80079e8:	813b      	strh	r3, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	8979      	ldrh	r1, [r7, #10]
 80079f4:	4b20      	ldr	r3, [pc, #128]	; (8007a78 <I2C_RequestMemoryWrite+0xa4>)
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fa6f 	bl	8007ee0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f8ff 	bl	8007c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e02c      	b.n	8007a70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d105      	bne.n	8007a28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a1c:	893b      	ldrh	r3, [r7, #8]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	629a      	str	r2, [r3, #40]	; 0x28
 8007a26:	e015      	b.n	8007a54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a28:	893b      	ldrh	r3, [r7, #8]
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f8e5 	bl	8007c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e012      	b.n	8007a70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a4a:	893b      	ldrh	r3, [r7, #8]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2180      	movs	r1, #128	; 0x80
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f884 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	80002000 	.word	0x80002000

08007a7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	817b      	strh	r3, [r7, #10]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	813b      	strh	r3, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	8979      	ldrh	r1, [r7, #10]
 8007a9c:	4b20      	ldr	r3, [pc, #128]	; (8007b20 <I2C_RequestMemoryRead+0xa4>)
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 fa1c 	bl	8007ee0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f8ac 	bl	8007c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e02c      	b.n	8007b16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d105      	bne.n	8007ace <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ac2:	893b      	ldrh	r3, [r7, #8]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	629a      	str	r2, [r3, #40]	; 0x28
 8007acc:	e015      	b.n	8007afa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ace:	893b      	ldrh	r3, [r7, #8]
 8007ad0:	0a1b      	lsrs	r3, r3, #8
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	69b9      	ldr	r1, [r7, #24]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f892 	bl	8007c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e012      	b.n	8007b16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007af0:	893b      	ldrh	r3, [r7, #8]
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2140      	movs	r1, #64	; 0x40
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f831 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	80002000 	.word	0x80002000

08007b24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d103      	bne.n	8007b42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d007      	beq.n	8007b60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	619a      	str	r2, [r3, #24]
  }
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b7c:	e031      	b.n	8007be2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d02d      	beq.n	8007be2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b86:	f7fe f90f 	bl	8005da8 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d302      	bcc.n	8007b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d122      	bne.n	8007be2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	bf0c      	ite	eq
 8007bac:	2301      	moveq	r3, #1
 8007bae:	2300      	movne	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d113      	bne.n	8007be2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	f043 0220 	orr.w	r2, r3, #32
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e00f      	b.n	8007c02 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699a      	ldr	r2, [r3, #24]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4013      	ands	r3, r2
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	2300      	movne	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d0be      	beq.n	8007b7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c16:	e033      	b.n	8007c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 f87f 	bl	8007d20 <I2C_IsErrorOccurred>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e031      	b.n	8007c90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d025      	beq.n	8007c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c34:	f7fe f8b8 	bl	8005da8 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d302      	bcc.n	8007c4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d11a      	bne.n	8007c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d013      	beq.n	8007c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	f043 0220 	orr.w	r2, r3, #32
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e007      	b.n	8007c90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d1c4      	bne.n	8007c18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ca4:	e02f      	b.n	8007d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f838 	bl	8007d20 <I2C_IsErrorOccurred>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e02d      	b.n	8007d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cba:	f7fe f875 	bl	8005da8 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d302      	bcc.n	8007cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d11a      	bne.n	8007d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d013      	beq.n	8007d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	f043 0220 	orr.w	r2, r3, #32
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e007      	b.n	8007d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f003 0320 	and.w	r3, r3, #32
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d1c8      	bne.n	8007ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	; 0x28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d068      	beq.n	8007e1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2210      	movs	r2, #16
 8007d52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d54:	e049      	b.n	8007dea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d045      	beq.n	8007dea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d5e:	f7fe f823 	bl	8005da8 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <I2C_IsErrorOccurred+0x54>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d13a      	bne.n	8007dea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d96:	d121      	bne.n	8007ddc <I2C_IsErrorOccurred+0xbc>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d9e:	d01d      	beq.n	8007ddc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007da0:	7cfb      	ldrb	r3, [r7, #19]
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d01a      	beq.n	8007ddc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007db4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007db6:	f7fd fff7 	bl	8005da8 <HAL_GetTick>
 8007dba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dbc:	e00e      	b.n	8007ddc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007dbe:	f7fd fff3 	bl	8005da8 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b19      	cmp	r3, #25
 8007dca:	d907      	bls.n	8007ddc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	f043 0320 	orr.w	r3, r3, #32
 8007dd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007dda:	e006      	b.n	8007dea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	d1e9      	bne.n	8007dbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d003      	beq.n	8007e00 <I2C_IsErrorOccurred+0xe0>
 8007df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0aa      	beq.n	8007d56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	f043 0304 	orr.w	r3, r3, #4
 8007e16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	f043 0308 	orr.w	r3, r3, #8
 8007e58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	f043 0302 	orr.w	r3, r3, #2
 8007e7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01c      	beq.n	8007ece <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff fe45 	bl	8007b24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6859      	ldr	r1, [r3, #4]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b0d      	ldr	r3, [pc, #52]	; (8007edc <I2C_IsErrorOccurred+0x1bc>)
 8007ea6:	400b      	ands	r3, r1
 8007ea8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3728      	adds	r7, #40	; 0x28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	fe00e800 	.word	0xfe00e800

08007ee0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	817b      	strh	r3, [r7, #10]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ef2:	897b      	ldrh	r3, [r7, #10]
 8007ef4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ef8:	7a7b      	ldrb	r3, [r7, #9]
 8007efa:	041b      	lsls	r3, r3, #16
 8007efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	0d5b      	lsrs	r3, r3, #21
 8007f1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <I2C_TransferConfig+0x60>)
 8007f20:	430b      	orrs	r3, r1
 8007f22:	43db      	mvns	r3, r3
 8007f24:	ea02 0103 	and.w	r1, r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	03ff63ff 	.word	0x03ff63ff

08007f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d138      	bne.n	8007fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e032      	b.n	8007fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2224      	movs	r2, #36	; 0x24
 8007f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0201 	bic.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6819      	ldr	r1, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e000      	b.n	8007fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fcc:	2302      	movs	r3, #2
  }
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d139      	bne.n	8008064 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e033      	b.n	8008066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2224      	movs	r2, #36	; 0x24
 800800a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800802c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	e000      	b.n	8008066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008064:	2302      	movs	r3, #2
  }
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008074:	b08b      	sub	sp, #44	; 0x2c
 8008076:	af06      	add	r7, sp, #24
 8008078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0f8      	b.n	8008276 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d106      	bne.n	800809e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7f9 fe3d 	bl	8001d18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2203      	movs	r2, #3
 80080a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f003 fe10 	bl	800bcd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	603b      	str	r3, [r7, #0]
 80080b6:	687e      	ldr	r6, [r7, #4]
 80080b8:	466d      	mov	r5, sp
 80080ba:	f106 0410 	add.w	r4, r6, #16
 80080be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	1d33      	adds	r3, r6, #4
 80080c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080ca:	6838      	ldr	r0, [r7, #0]
 80080cc:	f003 fdef 	bl	800bcae <USB_CoreInit>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0c9      	b.n	8008276 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f003 fe0c 	bl	800bd06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
 80080f2:	e040      	b.n	8008176 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	440b      	add	r3, r1
 8008104:	3301      	adds	r3, #1
 8008106:	2201      	movs	r2, #1
 8008108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	440b      	add	r3, r1
 800811a:	7bfa      	ldrb	r2, [r7, #15]
 800811c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	440b      	add	r3, r1
 800812e:	3303      	adds	r3, #3
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008134:	7bfa      	ldrb	r2, [r7, #15]
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	440b      	add	r3, r1
 8008142:	3338      	adds	r3, #56	; 0x38
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008148:	7bfa      	ldrb	r2, [r7, #15]
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	440b      	add	r3, r1
 8008156:	333c      	adds	r3, #60	; 0x3c
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800815c:	7bfa      	ldrb	r2, [r7, #15]
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	440b      	add	r3, r1
 800816a:	3340      	adds	r3, #64	; 0x40
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	3301      	adds	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	7bfa      	ldrb	r2, [r7, #15]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d3b9      	bcc.n	80080f4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
 8008184:	e044      	b.n	8008210 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008186:	7bfa      	ldrb	r2, [r7, #15]
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	440b      	add	r3, r1
 8008194:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800819c:	7bfa      	ldrb	r2, [r7, #15]
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80081b2:	7bfa      	ldrb	r2, [r7, #15]
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	440b      	add	r3, r1
 80081c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80081c8:	7bfa      	ldrb	r2, [r7, #15]
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	440b      	add	r3, r1
 80081d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80081de:	7bfa      	ldrb	r2, [r7, #15]
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	440b      	add	r3, r1
 80081ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	440b      	add	r3, r1
 8008202:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	3301      	adds	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	7bfa      	ldrb	r2, [r7, #15]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d3b5      	bcc.n	8008186 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	687e      	ldr	r6, [r7, #4]
 8008222:	466d      	mov	r5, sp
 8008224:	f106 0410 	add.w	r4, r6, #16
 8008228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800822a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	602b      	str	r3, [r5, #0]
 8008230:	1d33      	adds	r3, r6, #4
 8008232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008234:	6838      	ldr	r0, [r7, #0]
 8008236:	f003 fd73 	bl	800bd20 <USB_DevInit>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e014      	b.n	8008276 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d102      	bne.n	800826a <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f80a 	bl	800827e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f003 fd77 	bl	800bd62 <USB_DevDisconnect>

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800827e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f043 0301 	orr.w	r3, r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f043 0302 	orr.w	r3, r3, #2
 80082bc:	b29a      	uxth	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a04      	ldr	r2, [pc, #16]	; (80082f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e2:	6013      	str	r3, [r2, #0]
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40007000 	.word	0x40007000

080082f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80082f8:	4b04      	ldr	r3, [pc, #16]	; (800830c <HAL_PWREx_GetVoltageRange+0x18>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008300:	4618      	mov	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40007000 	.word	0x40007000

08008310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831e:	d130      	bne.n	8008382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008320:	4b23      	ldr	r3, [pc, #140]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832c:	d038      	beq.n	80083a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800832e:	4b20      	ldr	r3, [pc, #128]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008336:	4a1e      	ldr	r2, [pc, #120]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800833c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800833e:	4b1d      	ldr	r3, [pc, #116]	; (80083b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2232      	movs	r2, #50	; 0x32
 8008344:	fb02 f303 	mul.w	r3, r2, r3
 8008348:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800834a:	fba2 2303 	umull	r2, r3, r2, r3
 800834e:	0c9b      	lsrs	r3, r3, #18
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008354:	e002      	b.n	800835c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3b01      	subs	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800835c:	4b14      	ldr	r3, [pc, #80]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008368:	d102      	bne.n	8008370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f2      	bne.n	8008356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008370:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837c:	d110      	bne.n	80083a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e00f      	b.n	80083a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008382:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800838a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800838e:	d007      	beq.n	80083a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008398:	4a05      	ldr	r2, [pc, #20]	; (80083b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800839a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800839e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40007000 	.word	0x40007000
 80083b4:	20000060 	.word	0x20000060
 80083b8:	431bde83 	.word	0x431bde83

080083bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af02      	add	r7, sp, #8
 80083c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80083c4:	f7fd fcf0 	bl	8005da8 <HAL_GetTick>
 80083c8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e069      	b.n	80084a8 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10b      	bne.n	80083f8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7f9 f95d 	bl	80016a8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80083ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f85e 	bl	80084b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	3b01      	subs	r3, #1
 8008408:	021a      	lsls	r2, r3, #8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	2120      	movs	r1, #32
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f856 	bl	80084d0 <QSPI_WaitFlagStateUntilTimeout>
 8008424:	4603      	mov	r3, r0
 8008426:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d137      	bne.n	800849e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008438:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6852      	ldr	r2, [r2, #4]
 8008440:	0611      	lsls	r1, r2, #24
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68d2      	ldr	r2, [r2, #12]
 8008446:	4311      	orrs	r1, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	69d2      	ldr	r2, [r2, #28]
 800844c:	4311      	orrs	r1, r2
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6a12      	ldr	r2, [r2, #32]
 8008452:	4311      	orrs	r1, r2
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6812      	ldr	r2, [r2, #0]
 8008458:	430b      	orrs	r3, r1
 800845a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <HAL_QSPI_Init+0xf4>)
 8008464:	4013      	ands	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	6912      	ldr	r2, [r2, #16]
 800846a:	0411      	lsls	r1, r2, #16
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6952      	ldr	r2, [r2, #20]
 8008470:	4311      	orrs	r1, r2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6992      	ldr	r2, [r2, #24]
 8008476:	4311      	orrs	r1, r2
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	430b      	orrs	r3, r1
 800847e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80084a6:	7afb      	ldrb	r3, [r7, #11]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	ffe0f8fe 	.word	0xffe0f8fe

080084b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	4613      	mov	r3, r2
 80084de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80084e0:	e01a      	b.n	8008518 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e8:	d016      	beq.n	8008518 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ea:	f7fd fc5d 	bl	8005da8 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d302      	bcc.n	8008500 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10b      	bne.n	8008518 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2204      	movs	r2, #4
 8008504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850c:	f043 0201 	orr.w	r2, r3, #1
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e00e      	b.n	8008536 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	4013      	ands	r3, r2
 8008522:	2b00      	cmp	r3, #0
 8008524:	bf14      	ite	ne
 8008526:	2301      	movne	r3, #1
 8008528:	2300      	moveq	r3, #0
 800852a:	b2db      	uxtb	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	429a      	cmp	r2, r3
 8008532:	d1d6      	bne.n	80084e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d102      	bne.n	8008554 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	f000 bc02 	b.w	8008d58 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008554:	4b96      	ldr	r3, [pc, #600]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 030c 	and.w	r3, r3, #12
 800855c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800855e:	4b94      	ldr	r3, [pc, #592]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0310 	and.w	r3, r3, #16
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80e4 	beq.w	800873e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <HAL_RCC_OscConfig+0x4c>
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2b0c      	cmp	r3, #12
 8008580:	f040 808b 	bne.w	800869a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b01      	cmp	r3, #1
 8008588:	f040 8087 	bne.w	800869a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800858c:	4b88      	ldr	r3, [pc, #544]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <HAL_RCC_OscConfig+0x64>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e3d9      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1a      	ldr	r2, [r3, #32]
 80085a8:	4b81      	ldr	r3, [pc, #516]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <HAL_RCC_OscConfig+0x7e>
 80085b4:	4b7e      	ldr	r3, [pc, #504]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085bc:	e005      	b.n	80085ca <HAL_RCC_OscConfig+0x8a>
 80085be:	4b7c      	ldr	r3, [pc, #496]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80085c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d223      	bcs.n	8008616 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fdf2 	bl	80091bc <RCC_SetFlashLatencyFromMSIRange>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e3ba      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085e2:	4b73      	ldr	r3, [pc, #460]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a72      	ldr	r2, [pc, #456]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80085e8:	f043 0308 	orr.w	r3, r3, #8
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4b70      	ldr	r3, [pc, #448]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	496d      	ldr	r1, [pc, #436]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008600:	4b6b      	ldr	r3, [pc, #428]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	4968      	ldr	r1, [pc, #416]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008610:	4313      	orrs	r3, r2
 8008612:	604b      	str	r3, [r1, #4]
 8008614:	e025      	b.n	8008662 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008616:	4b66      	ldr	r3, [pc, #408]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a65      	ldr	r2, [pc, #404]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 800861c:	f043 0308 	orr.w	r3, r3, #8
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	4b63      	ldr	r3, [pc, #396]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	4960      	ldr	r1, [pc, #384]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008630:	4313      	orrs	r3, r2
 8008632:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008634:	4b5e      	ldr	r3, [pc, #376]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	495b      	ldr	r1, [pc, #364]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008644:	4313      	orrs	r3, r2
 8008646:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fdb2 	bl	80091bc <RCC_SetFlashLatencyFromMSIRange>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e37a      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008662:	f000 fcb5 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 8008666:	4602      	mov	r2, r0
 8008668:	4b51      	ldr	r3, [pc, #324]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	091b      	lsrs	r3, r3, #4
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	4950      	ldr	r1, [pc, #320]	; (80087b4 <HAL_RCC_OscConfig+0x274>)
 8008674:	5ccb      	ldrb	r3, [r1, r3]
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	4a4e      	ldr	r2, [pc, #312]	; (80087b8 <HAL_RCC_OscConfig+0x278>)
 8008680:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008682:	4b4e      	ldr	r3, [pc, #312]	; (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f7f9 fb8a 	bl	8001da0 <HAL_InitTick>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d052      	beq.n	800873c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	e35e      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d032      	beq.n	8008708 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80086a2:	4b43      	ldr	r3, [pc, #268]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a42      	ldr	r2, [pc, #264]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086a8:	f043 0301 	orr.w	r3, r3, #1
 80086ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086ae:	f7fd fb7b 	bl	8005da8 <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086b6:	f7fd fb77 	bl	8005da8 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e347      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086c8:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0f0      	beq.n	80086b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086d4:	4b36      	ldr	r3, [pc, #216]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a35      	ldr	r2, [pc, #212]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086da:	f043 0308 	orr.w	r3, r3, #8
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	4b33      	ldr	r3, [pc, #204]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	4930      	ldr	r1, [pc, #192]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086f2:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	492b      	ldr	r1, [pc, #172]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008702:	4313      	orrs	r3, r2
 8008704:	604b      	str	r3, [r1, #4]
 8008706:	e01a      	b.n	800873e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008708:	4b29      	ldr	r3, [pc, #164]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a28      	ldr	r2, [pc, #160]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008714:	f7fd fb48 	bl	8005da8 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800871c:	f7fd fb44 	bl	8005da8 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e314      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800872e:	4b20      	ldr	r3, [pc, #128]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f0      	bne.n	800871c <HAL_RCC_OscConfig+0x1dc>
 800873a:	e000      	b.n	800873e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800873c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d073      	beq.n	8008832 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b08      	cmp	r3, #8
 800874e:	d005      	beq.n	800875c <HAL_RCC_OscConfig+0x21c>
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b0c      	cmp	r3, #12
 8008754:	d10e      	bne.n	8008774 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d10b      	bne.n	8008774 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800875c:	4b14      	ldr	r3, [pc, #80]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d063      	beq.n	8008830 <HAL_RCC_OscConfig+0x2f0>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d15f      	bne.n	8008830 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e2f1      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800877c:	d106      	bne.n	800878c <HAL_RCC_OscConfig+0x24c>
 800877e:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a0b      	ldr	r2, [pc, #44]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	e025      	b.n	80087d8 <HAL_RCC_OscConfig+0x298>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008794:	d114      	bne.n	80087c0 <HAL_RCC_OscConfig+0x280>
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a05      	ldr	r2, [pc, #20]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 800879c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a02      	ldr	r2, [pc, #8]	; (80087b0 <HAL_RCC_OscConfig+0x270>)
 80087a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e013      	b.n	80087d8 <HAL_RCC_OscConfig+0x298>
 80087b0:	40021000 	.word	0x40021000
 80087b4:	0800ebc4 	.word	0x0800ebc4
 80087b8:	20000060 	.word	0x20000060
 80087bc:	20000164 	.word	0x20000164
 80087c0:	4ba0      	ldr	r3, [pc, #640]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a9f      	ldr	r2, [pc, #636]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80087c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4b9d      	ldr	r3, [pc, #628]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a9c      	ldr	r2, [pc, #624]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80087d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d013      	beq.n	8008808 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fd fae2 	bl	8005da8 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087e8:	f7fd fade 	bl	8005da8 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b64      	cmp	r3, #100	; 0x64
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e2ae      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087fa:	4b92      	ldr	r3, [pc, #584]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0f0      	beq.n	80087e8 <HAL_RCC_OscConfig+0x2a8>
 8008806:	e014      	b.n	8008832 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008808:	f7fd face 	bl	8005da8 <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008810:	f7fd faca 	bl	8005da8 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b64      	cmp	r3, #100	; 0x64
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e29a      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008822:	4b88      	ldr	r3, [pc, #544]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <HAL_RCC_OscConfig+0x2d0>
 800882e:	e000      	b.n	8008832 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d060      	beq.n	8008900 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d005      	beq.n	8008850 <HAL_RCC_OscConfig+0x310>
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b0c      	cmp	r3, #12
 8008848:	d119      	bne.n	800887e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b02      	cmp	r3, #2
 800884e:	d116      	bne.n	800887e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008850:	4b7c      	ldr	r3, [pc, #496]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_RCC_OscConfig+0x328>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e277      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008868:	4b76      	ldr	r3, [pc, #472]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	061b      	lsls	r3, r3, #24
 8008876:	4973      	ldr	r1, [pc, #460]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008878:	4313      	orrs	r3, r2
 800887a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800887c:	e040      	b.n	8008900 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d023      	beq.n	80088ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008886:	4b6f      	ldr	r3, [pc, #444]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a6e      	ldr	r2, [pc, #440]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 800888c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008892:	f7fd fa89 	bl	8005da8 <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008898:	e008      	b.n	80088ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800889a:	f7fd fa85 	bl	8005da8 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e255      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088ac:	4b65      	ldr	r3, [pc, #404]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f0      	beq.n	800889a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b8:	4b62      	ldr	r3, [pc, #392]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	061b      	lsls	r3, r3, #24
 80088c6:	495f      	ldr	r1, [pc, #380]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	604b      	str	r3, [r1, #4]
 80088cc:	e018      	b.n	8008900 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ce:	4b5d      	ldr	r3, [pc, #372]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a5c      	ldr	r2, [pc, #368]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80088d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088da:	f7fd fa65 	bl	8005da8 <HAL_GetTick>
 80088de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088e0:	e008      	b.n	80088f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088e2:	f7fd fa61 	bl	8005da8 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e231      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088f4:	4b53      	ldr	r3, [pc, #332]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1f0      	bne.n	80088e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0308 	and.w	r3, r3, #8
 8008908:	2b00      	cmp	r3, #0
 800890a:	d03c      	beq.n	8008986 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01c      	beq.n	800894e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008914:	4b4b      	ldr	r3, [pc, #300]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800891a:	4a4a      	ldr	r2, [pc, #296]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008924:	f7fd fa40 	bl	8005da8 <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800892c:	f7fd fa3c 	bl	8005da8 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e20c      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800893e:	4b41      	ldr	r3, [pc, #260]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0ef      	beq.n	800892c <HAL_RCC_OscConfig+0x3ec>
 800894c:	e01b      	b.n	8008986 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800894e:	4b3d      	ldr	r3, [pc, #244]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008954:	4a3b      	ldr	r2, [pc, #236]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008956:	f023 0301 	bic.w	r3, r3, #1
 800895a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800895e:	f7fd fa23 	bl	8005da8 <HAL_GetTick>
 8008962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008964:	e008      	b.n	8008978 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008966:	f7fd fa1f 	bl	8005da8 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e1ef      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008978:	4b32      	ldr	r3, [pc, #200]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 800897a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1ef      	bne.n	8008966 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80a6 	beq.w	8008ae0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008994:	2300      	movs	r3, #0
 8008996:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008998:	4b2a      	ldr	r3, [pc, #168]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 800899a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10d      	bne.n	80089c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089a4:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80089a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a8:	4a26      	ldr	r2, [pc, #152]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ae:	6593      	str	r3, [r2, #88]	; 0x58
 80089b0:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 80089b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089bc:	2301      	movs	r3, #1
 80089be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c0:	4b21      	ldr	r3, [pc, #132]	; (8008a48 <HAL_RCC_OscConfig+0x508>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d118      	bne.n	80089fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089cc:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <HAL_RCC_OscConfig+0x508>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1d      	ldr	r2, [pc, #116]	; (8008a48 <HAL_RCC_OscConfig+0x508>)
 80089d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089d8:	f7fd f9e6 	bl	8005da8 <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089e0:	f7fd f9e2 	bl	8005da8 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e1b2      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <HAL_RCC_OscConfig+0x508>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f0      	beq.n	80089e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d108      	bne.n	8008a18 <HAL_RCC_OscConfig+0x4d8>
 8008a06:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0c:	4a0d      	ldr	r2, [pc, #52]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a16:	e029      	b.n	8008a6c <HAL_RCC_OscConfig+0x52c>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	2b05      	cmp	r3, #5
 8008a1e:	d115      	bne.n	8008a4c <HAL_RCC_OscConfig+0x50c>
 8008a20:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a26:	4a07      	ldr	r2, [pc, #28]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008a28:	f043 0304 	orr.w	r3, r3, #4
 8008a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a30:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a36:	4a03      	ldr	r2, [pc, #12]	; (8008a44 <HAL_RCC_OscConfig+0x504>)
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a40:	e014      	b.n	8008a6c <HAL_RCC_OscConfig+0x52c>
 8008a42:	bf00      	nop
 8008a44:	40021000 	.word	0x40021000
 8008a48:	40007000 	.word	0x40007000
 8008a4c:	4b9a      	ldr	r3, [pc, #616]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a52:	4a99      	ldr	r2, [pc, #612]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008a54:	f023 0301 	bic.w	r3, r3, #1
 8008a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a5c:	4b96      	ldr	r3, [pc, #600]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a62:	4a95      	ldr	r2, [pc, #596]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008a64:	f023 0304 	bic.w	r3, r3, #4
 8008a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d016      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a74:	f7fd f998 	bl	8005da8 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a7a:	e00a      	b.n	8008a92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7c:	f7fd f994 	bl	8005da8 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e162      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a92:	4b89      	ldr	r3, [pc, #548]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0ed      	beq.n	8008a7c <HAL_RCC_OscConfig+0x53c>
 8008aa0:	e015      	b.n	8008ace <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa2:	f7fd f981 	bl	8005da8 <HAL_GetTick>
 8008aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008aa8:	e00a      	b.n	8008ac0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aaa:	f7fd f97d 	bl	8005da8 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e14b      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ac0:	4b7d      	ldr	r3, [pc, #500]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1ed      	bne.n	8008aaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ace:	7ffb      	ldrb	r3, [r7, #31]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d105      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ad4:	4b78      	ldr	r3, [pc, #480]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad8:	4a77      	ldr	r2, [pc, #476]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ade:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d03c      	beq.n	8008b66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01c      	beq.n	8008b2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008af4:	4b70      	ldr	r3, [pc, #448]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008afa:	4a6f      	ldr	r2, [pc, #444]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008afc:	f043 0301 	orr.w	r3, r3, #1
 8008b00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b04:	f7fd f950 	bl	8005da8 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b0c:	f7fd f94c 	bl	8005da8 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e11c      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b1e:	4b66      	ldr	r3, [pc, #408]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0ef      	beq.n	8008b0c <HAL_RCC_OscConfig+0x5cc>
 8008b2c:	e01b      	b.n	8008b66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b2e:	4b62      	ldr	r3, [pc, #392]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b34:	4a60      	ldr	r2, [pc, #384]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b3e:	f7fd f933 	bl	8005da8 <HAL_GetTick>
 8008b42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b44:	e008      	b.n	8008b58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b46:	f7fd f92f 	bl	8005da8 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d901      	bls.n	8008b58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e0ff      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b58:	4b57      	ldr	r3, [pc, #348]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1ef      	bne.n	8008b46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80f3 	beq.w	8008d56 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	f040 80c9 	bne.w	8008d0c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008b7a:	4b4f      	ldr	r3, [pc, #316]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f003 0203 	and.w	r2, r3, #3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d12c      	bne.n	8008be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d123      	bne.n	8008be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d11b      	bne.n	8008be8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d113      	bne.n	8008be8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d109      	bne.n	8008be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	3b01      	subs	r3, #1
 8008be2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d06b      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b0c      	cmp	r3, #12
 8008bec:	d062      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008bee:	4b32      	ldr	r3, [pc, #200]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e0ac      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008bfe:	4b2e      	ldr	r3, [pc, #184]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a2d      	ldr	r2, [pc, #180]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c0a:	f7fd f8cd 	bl	8005da8 <HAL_GetTick>
 8008c0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c12:	f7fd f8c9 	bl	8005da8 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e099      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c24:	4b24      	ldr	r3, [pc, #144]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1f0      	bne.n	8008c12 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c30:	4b21      	ldr	r3, [pc, #132]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	4b21      	ldr	r3, [pc, #132]	; (8008cbc <HAL_RCC_OscConfig+0x77c>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c40:	3a01      	subs	r2, #1
 8008c42:	0112      	lsls	r2, r2, #4
 8008c44:	4311      	orrs	r1, r2
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008c4a:	0212      	lsls	r2, r2, #8
 8008c4c:	4311      	orrs	r1, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c52:	0852      	lsrs	r2, r2, #1
 8008c54:	3a01      	subs	r2, #1
 8008c56:	0552      	lsls	r2, r2, #21
 8008c58:	4311      	orrs	r1, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008c5e:	0852      	lsrs	r2, r2, #1
 8008c60:	3a01      	subs	r2, #1
 8008c62:	0652      	lsls	r2, r2, #25
 8008c64:	4311      	orrs	r1, r2
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c6a:	06d2      	lsls	r2, r2, #27
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	4912      	ldr	r1, [pc, #72]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c74:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a0f      	ldr	r2, [pc, #60]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	4a0c      	ldr	r2, [pc, #48]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c8c:	f7fd f88c 	bl	8005da8 <HAL_GetTick>
 8008c90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c94:	f7fd f888 	bl	8005da8 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e058      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ca6:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0f0      	beq.n	8008c94 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cb2:	e050      	b.n	8008d56 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e04f      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
 8008cb8:	40021000 	.word	0x40021000
 8008cbc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cc0:	4b27      	ldr	r3, [pc, #156]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d144      	bne.n	8008d56 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ccc:	4b24      	ldr	r3, [pc, #144]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a23      	ldr	r2, [pc, #140]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cd8:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	4a20      	ldr	r2, [pc, #128]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ce4:	f7fd f860 	bl	8005da8 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cea:	e008      	b.n	8008cfe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cec:	f7fd f85c 	bl	8005da8 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e02c      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cfe:	4b18      	ldr	r3, [pc, #96]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f0      	beq.n	8008cec <HAL_RCC_OscConfig+0x7ac>
 8008d0a:	e024      	b.n	8008d56 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	2b0c      	cmp	r3, #12
 8008d10:	d01f      	beq.n	8008d52 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a12      	ldr	r2, [pc, #72]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1e:	f7fd f843 	bl	8005da8 <HAL_GetTick>
 8008d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d24:	e008      	b.n	8008d38 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d26:	f7fd f83f 	bl	8005da8 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d901      	bls.n	8008d38 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e00f      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d38:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f0      	bne.n	8008d26 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008d44:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	4905      	ldr	r1, [pc, #20]	; (8008d60 <HAL_RCC_OscConfig+0x820>)
 8008d4a:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <HAL_RCC_OscConfig+0x824>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60cb      	str	r3, [r1, #12]
 8008d50:	e001      	b.n	8008d56 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	40021000 	.word	0x40021000
 8008d64:	feeefffc 	.word	0xfeeefffc

08008d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e0e7      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d7c:	4b75      	ldr	r3, [pc, #468]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d910      	bls.n	8008dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d8a:	4b72      	ldr	r3, [pc, #456]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f023 0207 	bic.w	r2, r3, #7
 8008d92:	4970      	ldr	r1, [pc, #448]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d9a:	4b6e      	ldr	r3, [pc, #440]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d001      	beq.n	8008dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0cf      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d010      	beq.n	8008dda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	4b66      	ldr	r3, [pc, #408]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d908      	bls.n	8008dda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dc8:	4b63      	ldr	r3, [pc, #396]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4960      	ldr	r1, [pc, #384]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d04c      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d107      	bne.n	8008dfe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dee:	4b5a      	ldr	r3, [pc, #360]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d121      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e0a6      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d107      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e06:	4b54      	ldr	r3, [pc, #336]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d115      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e09a      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e1e:	4b4e      	ldr	r3, [pc, #312]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e08e      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e2e:	4b4a      	ldr	r3, [pc, #296]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e086      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e3e:	4b46      	ldr	r3, [pc, #280]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f023 0203 	bic.w	r2, r3, #3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	4943      	ldr	r1, [pc, #268]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e50:	f7fc ffaa 	bl	8005da8 <HAL_GetTick>
 8008e54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e56:	e00a      	b.n	8008e6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e58:	f7fc ffa6 	bl	8005da8 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e06e      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6e:	4b3a      	ldr	r3, [pc, #232]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 020c 	and.w	r2, r3, #12
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1eb      	bne.n	8008e58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d010      	beq.n	8008eae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	4b31      	ldr	r3, [pc, #196]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d208      	bcs.n	8008eae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e9c:	4b2e      	ldr	r3, [pc, #184]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	492b      	ldr	r1, [pc, #172]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008eae:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d210      	bcs.n	8008ede <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ebc:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f023 0207 	bic.w	r2, r3, #7
 8008ec4:	4923      	ldr	r1, [pc, #140]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ecc:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <HAL_RCC_ClockConfig+0x1ec>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d001      	beq.n	8008ede <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e036      	b.n	8008f4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0304 	and.w	r3, r3, #4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d008      	beq.n	8008efc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eea:	4b1b      	ldr	r3, [pc, #108]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	4918      	ldr	r1, [pc, #96]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d009      	beq.n	8008f1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f08:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	4910      	ldr	r1, [pc, #64]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f1c:	f000 f858 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 8008f20:	4602      	mov	r2, r0
 8008f22:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <HAL_RCC_ClockConfig+0x1f0>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	091b      	lsrs	r3, r3, #4
 8008f28:	f003 030f 	and.w	r3, r3, #15
 8008f2c:	490b      	ldr	r1, [pc, #44]	; (8008f5c <HAL_RCC_ClockConfig+0x1f4>)
 8008f2e:	5ccb      	ldrb	r3, [r1, r3]
 8008f30:	f003 031f 	and.w	r3, r3, #31
 8008f34:	fa22 f303 	lsr.w	r3, r2, r3
 8008f38:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <HAL_RCC_ClockConfig+0x1f8>)
 8008f3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008f3c:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <HAL_RCC_ClockConfig+0x1fc>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7f8 ff2d 	bl	8001da0 <HAL_InitTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	72fb      	strb	r3, [r7, #11]

  return status;
 8008f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	40022000 	.word	0x40022000
 8008f58:	40021000 	.word	0x40021000
 8008f5c:	0800ebc4 	.word	0x0800ebc4
 8008f60:	20000060 	.word	0x20000060
 8008f64:	20000164 	.word	0x20000164

08008f68 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8008f74:	4b15      	ldr	r3, [pc, #84]	; (8008fcc <HAL_RCC_MCOConfig+0x64>)
 8008f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f78:	4a14      	ldr	r2, [pc, #80]	; (8008fcc <HAL_RCC_MCOConfig+0x64>)
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f80:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <HAL_RCC_MCOConfig+0x64>)
 8008f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	613b      	str	r3, [r7, #16]
 8008f8a:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8008f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f92:	2302      	movs	r3, #2
 8008f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f96:	2302      	movs	r3, #2
 8008f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008fa2:	f107 0314 	add.w	r3, r7, #20
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008fac:	f7fd ff70 	bl	8006e90 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8008fb0:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <HAL_RCC_MCOConfig+0x64>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	4903      	ldr	r1, [pc, #12]	; (8008fcc <HAL_RCC_MCOConfig+0x64>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	608b      	str	r3, [r1, #8]
}
 8008fc4:	bf00      	nop
 8008fc6:	3728      	adds	r7, #40	; 0x28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40021000 	.word	0x40021000

08008fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b089      	sub	sp, #36	; 0x24
 8008fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61fb      	str	r3, [r7, #28]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fde:	4b3e      	ldr	r3, [pc, #248]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f003 030c 	and.w	r3, r3, #12
 8008fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fe8:	4b3b      	ldr	r3, [pc, #236]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_RCC_GetSysClockFreq+0x34>
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b0c      	cmp	r3, #12
 8008ffc:	d121      	bne.n	8009042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d11e      	bne.n	8009042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009004:	4b34      	ldr	r3, [pc, #208]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d107      	bne.n	8009020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009010:	4b31      	ldr	r3, [pc, #196]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009016:	0a1b      	lsrs	r3, r3, #8
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	e005      	b.n	800902c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009020:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	091b      	lsrs	r3, r3, #4
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800902c:	4a2b      	ldr	r2, [pc, #172]	; (80090dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10d      	bne.n	8009058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009040:	e00a      	b.n	8009058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b04      	cmp	r3, #4
 8009046:	d102      	bne.n	800904e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	e004      	b.n	8009058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b08      	cmp	r3, #8
 8009052:	d101      	bne.n	8009058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009054:	4b23      	ldr	r3, [pc, #140]	; (80090e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b0c      	cmp	r3, #12
 800905c:	d134      	bne.n	80090c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800905e:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b02      	cmp	r3, #2
 800906c:	d003      	beq.n	8009076 <HAL_RCC_GetSysClockFreq+0xa6>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d003      	beq.n	800907c <HAL_RCC_GetSysClockFreq+0xac>
 8009074:	e005      	b.n	8009082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009076:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009078:	617b      	str	r3, [r7, #20]
      break;
 800907a:	e005      	b.n	8009088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800907c:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800907e:	617b      	str	r3, [r7, #20]
      break;
 8009080:	e002      	b.n	8009088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	617b      	str	r3, [r7, #20]
      break;
 8009086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009088:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	091b      	lsrs	r3, r3, #4
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	3301      	adds	r3, #1
 8009094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009096:	4b10      	ldr	r3, [pc, #64]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	0a1b      	lsrs	r3, r3, #8
 800909c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	fb03 f202 	mul.w	r2, r3, r2
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090ae:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	0e5b      	lsrs	r3, r3, #25
 80090b4:	f003 0303 	and.w	r3, r3, #3
 80090b8:	3301      	adds	r3, #1
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80090c8:	69bb      	ldr	r3, [r7, #24]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3724      	adds	r7, #36	; 0x24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	40021000 	.word	0x40021000
 80090dc:	0800ebdc 	.word	0x0800ebdc
 80090e0:	00f42400 	.word	0x00f42400
 80090e4:	007a1200 	.word	0x007a1200

080090e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090ec:	4b03      	ldr	r3, [pc, #12]	; (80090fc <HAL_RCC_GetHCLKFreq+0x14>)
 80090ee:	681b      	ldr	r3, [r3, #0]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000060 	.word	0x20000060

08009100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009104:	f7ff fff0 	bl	80090e8 <HAL_RCC_GetHCLKFreq>
 8009108:	4602      	mov	r2, r0
 800910a:	4b06      	ldr	r3, [pc, #24]	; (8009124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	4904      	ldr	r1, [pc, #16]	; (8009128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009116:	5ccb      	ldrb	r3, [r1, r3]
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009120:	4618      	mov	r0, r3
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40021000 	.word	0x40021000
 8009128:	0800ebd4 	.word	0x0800ebd4

0800912c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009130:	f7ff ffda 	bl	80090e8 <HAL_RCC_GetHCLKFreq>
 8009134:	4602      	mov	r2, r0
 8009136:	4b06      	ldr	r3, [pc, #24]	; (8009150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	0adb      	lsrs	r3, r3, #11
 800913c:	f003 0307 	and.w	r3, r3, #7
 8009140:	4904      	ldr	r1, [pc, #16]	; (8009154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009142:	5ccb      	ldrb	r3, [r1, r3]
 8009144:	f003 031f 	and.w	r3, r3, #31
 8009148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800914c:	4618      	mov	r0, r3
 800914e:	bd80      	pop	{r7, pc}
 8009150:	40021000 	.word	0x40021000
 8009154:	0800ebd4 	.word	0x0800ebd4

08009158 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	220f      	movs	r2, #15
 8009166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <HAL_RCC_GetClockConfig+0x5c>)
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f003 0203 	and.w	r2, r3, #3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <HAL_RCC_GetClockConfig+0x5c>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009180:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <HAL_RCC_GetClockConfig+0x5c>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800918c:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <HAL_RCC_GetClockConfig+0x5c>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	08db      	lsrs	r3, r3, #3
 8009192:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800919a:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <HAL_RCC_GetClockConfig+0x60>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0207 	and.w	r2, r3, #7
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	40021000 	.word	0x40021000
 80091b8:	40022000 	.word	0x40022000

080091bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80091c4:	2300      	movs	r3, #0
 80091c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80091c8:	4b2a      	ldr	r3, [pc, #168]	; (8009274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80091d4:	f7ff f88e 	bl	80082f4 <HAL_PWREx_GetVoltageRange>
 80091d8:	6178      	str	r0, [r7, #20]
 80091da:	e014      	b.n	8009206 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e0:	4a24      	ldr	r2, [pc, #144]	; (8009274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e6:	6593      	str	r3, [r2, #88]	; 0x58
 80091e8:	4b22      	ldr	r3, [pc, #136]	; (8009274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80091f4:	f7ff f87e 	bl	80082f4 <HAL_PWREx_GetVoltageRange>
 80091f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fe:	4a1d      	ldr	r2, [pc, #116]	; (8009274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009204:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800920c:	d10b      	bne.n	8009226 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b80      	cmp	r3, #128	; 0x80
 8009212:	d919      	bls.n	8009248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2ba0      	cmp	r3, #160	; 0xa0
 8009218:	d902      	bls.n	8009220 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800921a:	2302      	movs	r3, #2
 800921c:	613b      	str	r3, [r7, #16]
 800921e:	e013      	b.n	8009248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009220:	2301      	movs	r3, #1
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	e010      	b.n	8009248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b80      	cmp	r3, #128	; 0x80
 800922a:	d902      	bls.n	8009232 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800922c:	2303      	movs	r3, #3
 800922e:	613b      	str	r3, [r7, #16]
 8009230:	e00a      	b.n	8009248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b80      	cmp	r3, #128	; 0x80
 8009236:	d102      	bne.n	800923e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009238:	2302      	movs	r3, #2
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	e004      	b.n	8009248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b70      	cmp	r3, #112	; 0x70
 8009242:	d101      	bne.n	8009248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009244:	2301      	movs	r3, #1
 8009246:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f023 0207 	bic.w	r2, r3, #7
 8009250:	4909      	ldr	r1, [pc, #36]	; (8009278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4313      	orrs	r3, r2
 8009256:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	429a      	cmp	r2, r3
 8009264:	d001      	beq.n	800926a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e000      	b.n	800926c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40021000 	.word	0x40021000
 8009278:	40022000 	.word	0x40022000

0800927c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009284:	2300      	movs	r3, #0
 8009286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009288:	2300      	movs	r3, #0
 800928a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009294:	2b00      	cmp	r3, #0
 8009296:	d031      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80092a0:	d01a      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80092a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80092a6:	d814      	bhi.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80092ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092b0:	d10f      	bne.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80092b2:	4b5d      	ldr	r3, [pc, #372]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	4a5c      	ldr	r2, [pc, #368]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80092b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092be:	e00c      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3304      	adds	r3, #4
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fa54 	bl	8009774 <RCCEx_PLLSAI1_Config>
 80092cc:	4603      	mov	r3, r0
 80092ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092d0:	e003      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	74fb      	strb	r3, [r7, #19]
      break;
 80092d6:	e000      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80092d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092da:	7cfb      	ldrb	r3, [r7, #19]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10b      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092e0:	4b51      	ldr	r3, [pc, #324]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80092e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ee:	494e      	ldr	r1, [pc, #312]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80092f6:	e001      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f8:	7cfb      	ldrb	r3, [r7, #19]
 80092fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 809e 	beq.w	8009446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800930a:	2300      	movs	r3, #0
 800930c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800930e:	4b46      	ldr	r3, [pc, #280]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800931e:	2300      	movs	r3, #0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00d      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009324:	4b40      	ldr	r3, [pc, #256]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009328:	4a3f      	ldr	r2, [pc, #252]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800932a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800932e:	6593      	str	r3, [r2, #88]	; 0x58
 8009330:	4b3d      	ldr	r3, [pc, #244]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009338:	60bb      	str	r3, [r7, #8]
 800933a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800933c:	2301      	movs	r3, #1
 800933e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009340:	4b3a      	ldr	r3, [pc, #232]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a39      	ldr	r2, [pc, #228]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800934a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800934c:	f7fc fd2c 	bl	8005da8 <HAL_GetTick>
 8009350:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009352:	e009      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009354:	f7fc fd28 	bl	8005da8 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d902      	bls.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	74fb      	strb	r3, [r7, #19]
        break;
 8009366:	e005      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009368:	4b30      	ldr	r3, [pc, #192]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0ef      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009374:	7cfb      	ldrb	r3, [r7, #19]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d15a      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800937a:	4b2b      	ldr	r3, [pc, #172]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800937c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009384:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d01e      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	429a      	cmp	r2, r3
 8009394:	d019      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009396:	4b24      	ldr	r3, [pc, #144]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800939c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093a2:	4b21      	ldr	r3, [pc, #132]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80093a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a8:	4a1f      	ldr	r2, [pc, #124]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80093aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093b2:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80093b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b8:	4a1b      	ldr	r2, [pc, #108]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80093ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093c2:	4a19      	ldr	r2, [pc, #100]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d016      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d4:	f7fc fce8 	bl	8005da8 <HAL_GetTick>
 80093d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093da:	e00b      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093dc:	f7fc fce4 	bl	8005da8 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d902      	bls.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	74fb      	strb	r3, [r7, #19]
            break;
 80093f2:	e006      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093f4:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80093f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0ec      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009402:	7cfb      	ldrb	r3, [r7, #19]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10b      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009408:	4b07      	ldr	r3, [pc, #28]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800940a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009416:	4904      	ldr	r1, [pc, #16]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009418:	4313      	orrs	r3, r2
 800941a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800941e:	e009      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009420:	7cfb      	ldrb	r3, [r7, #19]
 8009422:	74bb      	strb	r3, [r7, #18]
 8009424:	e006      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009426:	bf00      	nop
 8009428:	40021000 	.word	0x40021000
 800942c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	7cfb      	ldrb	r3, [r7, #19]
 8009432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009434:	7c7b      	ldrb	r3, [r7, #17]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d105      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800943a:	4b9e      	ldr	r3, [pc, #632]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800943c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943e:	4a9d      	ldr	r2, [pc, #628]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009444:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009452:	4b98      	ldr	r3, [pc, #608]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009458:	f023 0203 	bic.w	r2, r3, #3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	4994      	ldr	r1, [pc, #592]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009462:	4313      	orrs	r3, r2
 8009464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00a      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009474:	4b8f      	ldr	r3, [pc, #572]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800947a:	f023 020c 	bic.w	r2, r3, #12
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	498c      	ldr	r1, [pc, #560]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009484:	4313      	orrs	r3, r2
 8009486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009496:	4b87      	ldr	r3, [pc, #540]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a4:	4983      	ldr	r1, [pc, #524]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00a      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094b8:	4b7e      	ldr	r3, [pc, #504]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80094ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	497b      	ldr	r1, [pc, #492]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094da:	4b76      	ldr	r3, [pc, #472]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e8:	4972      	ldr	r1, [pc, #456]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094fc:	4b6d      	ldr	r3, [pc, #436]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80094fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009502:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950a:	496a      	ldr	r1, [pc, #424]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800950c:	4313      	orrs	r3, r2
 800950e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800951e:	4b65      	ldr	r3, [pc, #404]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800952c:	4961      	ldr	r1, [pc, #388]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800952e:	4313      	orrs	r3, r2
 8009530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009540:	4b5c      	ldr	r3, [pc, #368]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009546:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954e:	4959      	ldr	r1, [pc, #356]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009550:	4313      	orrs	r3, r2
 8009552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009562:	4b54      	ldr	r3, [pc, #336]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009570:	4950      	ldr	r1, [pc, #320]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009572:	4313      	orrs	r3, r2
 8009574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00a      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009584:	4b4b      	ldr	r3, [pc, #300]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800958a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009592:	4948      	ldr	r1, [pc, #288]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009594:	4313      	orrs	r3, r2
 8009596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095a6:	4b43      	ldr	r3, [pc, #268]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80095a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095ac:	f023 0203 	bic.w	r2, r3, #3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b4:	493f      	ldr	r1, [pc, #252]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d028      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095c8:	4b3a      	ldr	r3, [pc, #232]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80095ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d6:	4937      	ldr	r1, [pc, #220]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095e6:	d106      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095e8:	4b32      	ldr	r3, [pc, #200]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	4a31      	ldr	r2, [pc, #196]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80095ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095f2:	60d3      	str	r3, [r2, #12]
 80095f4:	e011      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095fe:	d10c      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3304      	adds	r3, #4
 8009604:	2101      	movs	r1, #1
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f8b4 	bl	8009774 <RCCEx_PLLSAI1_Config>
 800960c:	4603      	mov	r3, r0
 800960e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009610:	7cfb      	ldrb	r3, [r7, #19]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8009616:	7cfb      	ldrb	r3, [r7, #19]
 8009618:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d028      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009626:	4b23      	ldr	r3, [pc, #140]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009634:	491f      	ldr	r1, [pc, #124]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009636:	4313      	orrs	r3, r2
 8009638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009644:	d106      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009646:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	4a1a      	ldr	r2, [pc, #104]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800964c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009650:	60d3      	str	r3, [r2, #12]
 8009652:	e011      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800965c:	d10c      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3304      	adds	r3, #4
 8009662:	2101      	movs	r1, #1
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f885 	bl	8009774 <RCCEx_PLLSAI1_Config>
 800966a:	4603      	mov	r3, r0
 800966c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800966e:	7cfb      	ldrb	r3, [r7, #19]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8009674:	7cfb      	ldrb	r3, [r7, #19]
 8009676:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d02b      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009684:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009692:	4908      	ldr	r1, [pc, #32]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096a2:	d109      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096a4:	4b03      	ldr	r3, [pc, #12]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a02      	ldr	r2, [pc, #8]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80096aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096ae:	60d3      	str	r3, [r2, #12]
 80096b0:	e014      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x460>
 80096b2:	bf00      	nop
 80096b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096c0:	d10c      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3304      	adds	r3, #4
 80096c6:	2101      	movs	r1, #1
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 f853 	bl	8009774 <RCCEx_PLLSAI1_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80096d2:	7cfb      	ldrb	r3, [r7, #19]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80096d8:	7cfb      	ldrb	r3, [r7, #19]
 80096da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01c      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096e8:	4b19      	ldr	r3, [pc, #100]	; (8009750 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80096ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096f6:	4916      	ldr	r1, [pc, #88]	; (8009750 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009706:	d10c      	bne.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3304      	adds	r3, #4
 800970c:	2102      	movs	r1, #2
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f830 	bl	8009774 <RCCEx_PLLSAI1_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009718:	7cfb      	ldrb	r3, [r7, #19]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800971e:	7cfb      	ldrb	r3, [r7, #19]
 8009720:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800972e:	4b08      	ldr	r3, [pc, #32]	; (8009750 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8009730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800973c:	4904      	ldr	r1, [pc, #16]	; (8009750 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009744:	7cbb      	ldrb	r3, [r7, #18]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	40021000 	.word	0x40021000

08009754 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a04      	ldr	r2, [pc, #16]	; (8009770 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800975e:	f043 0304 	orr.w	r3, r3, #4
 8009762:	6013      	str	r3, [r2, #0]
}
 8009764:	bf00      	nop
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	40021000 	.word	0x40021000

08009774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009782:	4b74      	ldr	r3, [pc, #464]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d018      	beq.n	80097c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800978e:	4b71      	ldr	r3, [pc, #452]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f003 0203 	and.w	r2, r3, #3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d10d      	bne.n	80097ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
       ||
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80097a6:	4b6b      	ldr	r3, [pc, #428]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	091b      	lsrs	r3, r3, #4
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
       ||
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d047      	beq.n	800984a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	73fb      	strb	r3, [r7, #15]
 80097be:	e044      	b.n	800984a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d018      	beq.n	80097fa <RCCEx_PLLSAI1_Config+0x86>
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d825      	bhi.n	8009818 <RCCEx_PLLSAI1_Config+0xa4>
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d002      	beq.n	80097d6 <RCCEx_PLLSAI1_Config+0x62>
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d009      	beq.n	80097e8 <RCCEx_PLLSAI1_Config+0x74>
 80097d4:	e020      	b.n	8009818 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80097d6:	4b5f      	ldr	r3, [pc, #380]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d11d      	bne.n	800981e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097e6:	e01a      	b.n	800981e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80097e8:	4b5a      	ldr	r3, [pc, #360]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d116      	bne.n	8009822 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097f8:	e013      	b.n	8009822 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80097fa:	4b56      	ldr	r3, [pc, #344]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10f      	bne.n	8009826 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009806:	4b53      	ldr	r3, [pc, #332]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009816:	e006      	b.n	8009826 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
      break;
 800981c:	e004      	b.n	8009828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800981e:	bf00      	nop
 8009820:	e002      	b.n	8009828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009822:	bf00      	nop
 8009824:	e000      	b.n	8009828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009826:	bf00      	nop
    }

    if(status == HAL_OK)
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10d      	bne.n	800984a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800982e:	4b49      	ldr	r3, [pc, #292]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	3b01      	subs	r3, #1
 8009840:	011b      	lsls	r3, r3, #4
 8009842:	430b      	orrs	r3, r1
 8009844:	4943      	ldr	r1, [pc, #268]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009846:	4313      	orrs	r3, r2
 8009848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d17c      	bne.n	800994a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009850:	4b40      	ldr	r3, [pc, #256]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a3f      	ldr	r2, [pc, #252]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009856:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800985a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800985c:	f7fc faa4 	bl	8005da8 <HAL_GetTick>
 8009860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009862:	e009      	b.n	8009878 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009864:	f7fc faa0 	bl	8005da8 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d902      	bls.n	8009878 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	73fb      	strb	r3, [r7, #15]
        break;
 8009876:	e005      	b.n	8009884 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009878:	4b36      	ldr	r3, [pc, #216]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1ef      	bne.n	8009864 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d15f      	bne.n	800994a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d110      	bne.n	80098b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009890:	4b30      	ldr	r3, [pc, #192]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6892      	ldr	r2, [r2, #8]
 80098a0:	0211      	lsls	r1, r2, #8
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	68d2      	ldr	r2, [r2, #12]
 80098a6:	06d2      	lsls	r2, r2, #27
 80098a8:	430a      	orrs	r2, r1
 80098aa:	492a      	ldr	r1, [pc, #168]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	610b      	str	r3, [r1, #16]
 80098b0:	e027      	b.n	8009902 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d112      	bne.n	80098de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098b8:	4b26      	ldr	r3, [pc, #152]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80098c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6892      	ldr	r2, [r2, #8]
 80098c8:	0211      	lsls	r1, r2, #8
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6912      	ldr	r2, [r2, #16]
 80098ce:	0852      	lsrs	r2, r2, #1
 80098d0:	3a01      	subs	r2, #1
 80098d2:	0552      	lsls	r2, r2, #21
 80098d4:	430a      	orrs	r2, r1
 80098d6:	491f      	ldr	r1, [pc, #124]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	610b      	str	r3, [r1, #16]
 80098dc:	e011      	b.n	8009902 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098de:	4b1d      	ldr	r3, [pc, #116]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80098e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6892      	ldr	r2, [r2, #8]
 80098ee:	0211      	lsls	r1, r2, #8
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6952      	ldr	r2, [r2, #20]
 80098f4:	0852      	lsrs	r2, r2, #1
 80098f6:	3a01      	subs	r2, #1
 80098f8:	0652      	lsls	r2, r2, #25
 80098fa:	430a      	orrs	r2, r1
 80098fc:	4915      	ldr	r1, [pc, #84]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009902:	4b14      	ldr	r3, [pc, #80]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a13      	ldr	r2, [pc, #76]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800990c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990e:	f7fc fa4b 	bl	8005da8 <HAL_GetTick>
 8009912:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009914:	e009      	b.n	800992a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009916:	f7fc fa47 	bl	8005da8 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	2b02      	cmp	r3, #2
 8009922:	d902      	bls.n	800992a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	73fb      	strb	r3, [r7, #15]
          break;
 8009928:	e005      	b.n	8009936 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0ef      	beq.n	8009916 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 800993e:	691a      	ldr	r2, [r3, #16]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	4903      	ldr	r1, [pc, #12]	; (8009954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009946:	4313      	orrs	r3, r2
 8009948:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	40021000 	.word	0x40021000

08009958 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e049      	b.n	80099fe <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	795b      	ldrb	r3, [r3, #5]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7f7 fef6 	bl	800176c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f042 0204 	orr.w	r2, r2, #4
 8009994:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a0:	2b40      	cmp	r3, #64	; 0x40
 80099a2:	d104      	bne.n	80099ae <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2204      	movs	r2, #4
 80099a8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e027      	b.n	80099fe <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80099ae:	f7fc f9fb 	bl	8005da8 <HAL_GetTick>
 80099b2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80099b4:	e015      	b.n	80099e2 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80099b6:	f7fc f9f7 	bl	8005da8 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d90e      	bls.n	80099e2 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d107      	bne.n	80099e2 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2204      	movs	r2, #4
 80099d6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2202      	movs	r2, #2
 80099dc:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e00d      	b.n	80099fe <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d0e2      	beq.n	80099b6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d079      	beq.n	8009b0c <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d106      	bne.n	8009a32 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7f7 febd 	bl	80017ac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2202      	movs	r2, #2
 8009a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f003 0310 	and.w	r3, r3, #16
 8009a44:	2b10      	cmp	r3, #16
 8009a46:	d058      	beq.n	8009afa <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	22ca      	movs	r2, #202	; 0xca
 8009a4e:	625a      	str	r2, [r3, #36]	; 0x24
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2253      	movs	r2, #83	; 0x53
 8009a56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f881 	bl	8009b60 <RTC_EnterInitMode>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d127      	bne.n	8009ab8 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a7a:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6899      	ldr	r1, [r3, #8]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	68d2      	ldr	r2, [r2, #12]
 8009aa2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6919      	ldr	r1, [r3, #16]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	041a      	lsls	r2, r3, #16
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f885 	bl	8009bc8 <RTC_ExitInitMode>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d113      	bne.n	8009af0 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0203 	bic.w	r2, r2, #3
 8009ad6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	69da      	ldr	r2, [r3, #28]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	22ff      	movs	r2, #255	; 0xff
 8009af6:	625a      	str	r2, [r3, #36]	; 0x24
 8009af8:	e001      	b.n	8009afe <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d103      	bne.n	8009b0c <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a0d      	ldr	r2, [pc, #52]	; (8009b5c <HAL_RTC_WaitForSynchro+0x44>)
 8009b26:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009b28:	f7fc f93e 	bl	8005da8 <HAL_GetTick>
 8009b2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b2e:	e009      	b.n	8009b44 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b30:	f7fc f93a 	bl	8005da8 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b3e:	d901      	bls.n	8009b44 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e007      	b.n	8009b54 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f003 0320 	and.w	r3, r3, #32
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0ee      	beq.n	8009b30 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	0003ff5f 	.word	0x0003ff5f

08009b60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d120      	bne.n	8009bbc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b84:	f7fc f910 	bl	8005da8 <HAL_GetTick>
 8009b88:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b8a:	e00d      	b.n	8009ba8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009b8c:	f7fc f90c 	bl	8005da8 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b9a:	d905      	bls.n	8009ba8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <RTC_EnterInitMode+0x5c>
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d1e7      	bne.n	8009b8c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009bd4:	4b1a      	ldr	r3, [pc, #104]	; (8009c40 <RTC_ExitInitMode+0x78>)
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	4a19      	ldr	r2, [pc, #100]	; (8009c40 <RTC_ExitInitMode+0x78>)
 8009bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bde:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009be0:	4b17      	ldr	r3, [pc, #92]	; (8009c40 <RTC_ExitInitMode+0x78>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10c      	bne.n	8009c06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff ff93 	bl	8009b18 <HAL_RTC_WaitForSynchro>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d01e      	beq.n	8009c36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2203      	movs	r2, #3
 8009bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	73fb      	strb	r3, [r7, #15]
 8009c04:	e017      	b.n	8009c36 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009c06:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <RTC_ExitInitMode+0x78>)
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	4a0d      	ldr	r2, [pc, #52]	; (8009c40 <RTC_ExitInitMode+0x78>)
 8009c0c:	f023 0320 	bic.w	r3, r3, #32
 8009c10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff ff80 	bl	8009b18 <HAL_RTC_WaitForSynchro>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2203      	movs	r2, #3
 8009c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <RTC_ExitInitMode+0x78>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	4a04      	ldr	r2, [pc, #16]	; (8009c40 <RTC_ExitInitMode+0x78>)
 8009c30:	f043 0320 	orr.w	r3, r3, #32
 8009c34:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	40002800 	.word	0x40002800

08009c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e095      	b.n	8009d82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d108      	bne.n	8009c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c66:	d009      	beq.n	8009c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	61da      	str	r2, [r3, #28]
 8009c6e:	e005      	b.n	8009c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7f7 fdb8 	bl	800180c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cbc:	d902      	bls.n	8009cc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	e002      	b.n	8009cca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009cd2:	d007      	beq.n	8009ce4 <HAL_SPI_Init+0xa0>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cdc:	d002      	beq.n	8009ce4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0302 	and.w	r3, r3, #2
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d12:	431a      	orrs	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d1c:	431a      	orrs	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d26:	ea42 0103 	orr.w	r1, r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	0c1b      	lsrs	r3, r3, #16
 8009d40:	f003 0204 	and.w	r2, r3, #4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	f003 0310 	and.w	r3, r3, #16
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	431a      	orrs	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d60:	ea42 0103 	orr.w	r1, r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e049      	b.n	8009e30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f841 	bl	8009e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f000 fb31 	bl	800a430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d001      	beq.n	8009e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e040      	b.n	8009ee6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 0201 	orr.w	r2, r2, #1
 8009e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1c      	ldr	r2, [pc, #112]	; (8009ef4 <HAL_TIM_Base_Start_IT+0xa8>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00e      	beq.n	8009ea4 <HAL_TIM_Base_Start_IT+0x58>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8e:	d009      	beq.n	8009ea4 <HAL_TIM_Base_Start_IT+0x58>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a18      	ldr	r2, [pc, #96]	; (8009ef8 <HAL_TIM_Base_Start_IT+0xac>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d004      	beq.n	8009ea4 <HAL_TIM_Base_Start_IT+0x58>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a17      	ldr	r2, [pc, #92]	; (8009efc <HAL_TIM_Base_Start_IT+0xb0>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d115      	bne.n	8009ed0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689a      	ldr	r2, [r3, #8]
 8009eaa:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <HAL_TIM_Base_Start_IT+0xb4>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b06      	cmp	r3, #6
 8009eb4:	d015      	beq.n	8009ee2 <HAL_TIM_Base_Start_IT+0x96>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ebc:	d011      	beq.n	8009ee2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0201 	orr.w	r2, r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ece:	e008      	b.n	8009ee2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	e000      	b.n	8009ee4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	40000400 	.word	0x40000400
 8009efc:	40014000 	.word	0x40014000
 8009f00:	00010007 	.word	0x00010007

08009f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e049      	b.n	8009faa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7f7 fd20 	bl	8001970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f000 fa74 	bl	800a430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d020      	beq.n	800a016 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d01b      	beq.n	800a016 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f06f 0202 	mvn.w	r2, #2
 8009fe6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f9f9 	bl	800a3f4 <HAL_TIM_IC_CaptureCallback>
 800a002:	e005      	b.n	800a010 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f9eb 	bl	800a3e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f9fc 	bl	800a408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d020      	beq.n	800a062 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01b      	beq.n	800a062 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f06f 0204 	mvn.w	r2, #4
 800a032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f9d3 	bl	800a3f4 <HAL_TIM_IC_CaptureCallback>
 800a04e:	e005      	b.n	800a05c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f9c5 	bl	800a3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f9d6 	bl	800a408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d020      	beq.n	800a0ae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d01b      	beq.n	800a0ae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f06f 0208 	mvn.w	r2, #8
 800a07e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2204      	movs	r2, #4
 800a084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	f003 0303 	and.w	r3, r3, #3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f9ad 	bl	800a3f4 <HAL_TIM_IC_CaptureCallback>
 800a09a:	e005      	b.n	800a0a8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f99f 	bl	800a3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f9b0 	bl	800a408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d020      	beq.n	800a0fa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01b      	beq.n	800a0fa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f06f 0210 	mvn.w	r2, #16
 800a0ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2208      	movs	r2, #8
 800a0d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69db      	ldr	r3, [r3, #28]
 800a0d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d003      	beq.n	800a0e8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f987 	bl	800a3f4 <HAL_TIM_IC_CaptureCallback>
 800a0e6:	e005      	b.n	800a0f4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f979 	bl	800a3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f98a 	bl	800a408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00c      	beq.n	800a11e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f06f 0201 	mvn.w	r2, #1
 800a116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7f7 f991 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00c      	beq.n	800a142 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d007      	beq.n	800a142 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fcdb 	bl	800aaf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00c      	beq.n	800a166 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a152:	2b00      	cmp	r3, #0
 800a154:	d007      	beq.n	800a166 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fcd3 	bl	800ab0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00c      	beq.n	800a18a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d007      	beq.n	800a18a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f949 	bl	800a41c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	f003 0320 	and.w	r3, r3, #32
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00c      	beq.n	800a1ae <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f06f 0220 	mvn.w	r2, #32
 800a1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fc9b 	bl	800aae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e0ff      	b.n	800a3d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b14      	cmp	r3, #20
 800a1e2:	f200 80f0 	bhi.w	800a3c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a1e6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a241 	.word	0x0800a241
 800a1f0:	0800a3c7 	.word	0x0800a3c7
 800a1f4:	0800a3c7 	.word	0x0800a3c7
 800a1f8:	0800a3c7 	.word	0x0800a3c7
 800a1fc:	0800a281 	.word	0x0800a281
 800a200:	0800a3c7 	.word	0x0800a3c7
 800a204:	0800a3c7 	.word	0x0800a3c7
 800a208:	0800a3c7 	.word	0x0800a3c7
 800a20c:	0800a2c3 	.word	0x0800a2c3
 800a210:	0800a3c7 	.word	0x0800a3c7
 800a214:	0800a3c7 	.word	0x0800a3c7
 800a218:	0800a3c7 	.word	0x0800a3c7
 800a21c:	0800a303 	.word	0x0800a303
 800a220:	0800a3c7 	.word	0x0800a3c7
 800a224:	0800a3c7 	.word	0x0800a3c7
 800a228:	0800a3c7 	.word	0x0800a3c7
 800a22c:	0800a345 	.word	0x0800a345
 800a230:	0800a3c7 	.word	0x0800a3c7
 800a234:	0800a3c7 	.word	0x0800a3c7
 800a238:	0800a3c7 	.word	0x0800a3c7
 800a23c:	0800a385 	.word	0x0800a385
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f960 	bl	800a50c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f042 0208 	orr.w	r2, r2, #8
 800a25a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 0204 	bic.w	r2, r2, #4
 800a26a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6999      	ldr	r1, [r3, #24]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	691a      	ldr	r2, [r3, #16]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	619a      	str	r2, [r3, #24]
      break;
 800a27e:	e0a5      	b.n	800a3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68b9      	ldr	r1, [r7, #8]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 f9bc 	bl	800a604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a29a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	699a      	ldr	r2, [r3, #24]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6999      	ldr	r1, [r3, #24]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	021a      	lsls	r2, r3, #8
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	619a      	str	r2, [r3, #24]
      break;
 800a2c0:	e084      	b.n	800a3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fa15 	bl	800a6f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69da      	ldr	r2, [r3, #28]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0208 	orr.w	r2, r2, #8
 800a2dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69da      	ldr	r2, [r3, #28]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0204 	bic.w	r2, r2, #4
 800a2ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	69d9      	ldr	r1, [r3, #28]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	691a      	ldr	r2, [r3, #16]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	61da      	str	r2, [r3, #28]
      break;
 800a300:	e064      	b.n	800a3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fa6d 	bl	800a7e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69da      	ldr	r2, [r3, #28]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a31c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	69da      	ldr	r2, [r3, #28]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a32c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	69d9      	ldr	r1, [r3, #28]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	021a      	lsls	r2, r3, #8
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	61da      	str	r2, [r3, #28]
      break;
 800a342:	e043      	b.n	800a3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 faaa 	bl	800a8a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f042 0208 	orr.w	r2, r2, #8
 800a35e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0204 	bic.w	r2, r2, #4
 800a36e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a382:	e023      	b.n	800a3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fae2 	bl	800a954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a39e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	021a      	lsls	r2, r3, #8
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a3c4:	e002      	b.n	800a3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop

0800a3e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a2e      	ldr	r2, [pc, #184]	; (800a4fc <TIM_Base_SetConfig+0xcc>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d007      	beq.n	800a458 <TIM_Base_SetConfig+0x28>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44e:	d003      	beq.n	800a458 <TIM_Base_SetConfig+0x28>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a2b      	ldr	r2, [pc, #172]	; (800a500 <TIM_Base_SetConfig+0xd0>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d108      	bne.n	800a46a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a23      	ldr	r2, [pc, #140]	; (800a4fc <TIM_Base_SetConfig+0xcc>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d00f      	beq.n	800a492 <TIM_Base_SetConfig+0x62>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a478:	d00b      	beq.n	800a492 <TIM_Base_SetConfig+0x62>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a20      	ldr	r2, [pc, #128]	; (800a500 <TIM_Base_SetConfig+0xd0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d007      	beq.n	800a492 <TIM_Base_SetConfig+0x62>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a1f      	ldr	r2, [pc, #124]	; (800a504 <TIM_Base_SetConfig+0xd4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d003      	beq.n	800a492 <TIM_Base_SetConfig+0x62>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a1e      	ldr	r2, [pc, #120]	; (800a508 <TIM_Base_SetConfig+0xd8>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d108      	bne.n	800a4a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a0c      	ldr	r2, [pc, #48]	; (800a4fc <TIM_Base_SetConfig+0xcc>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <TIM_Base_SetConfig+0xb0>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a0c      	ldr	r2, [pc, #48]	; (800a504 <TIM_Base_SetConfig+0xd4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_Base_SetConfig+0xb0>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a0b      	ldr	r2, [pc, #44]	; (800a508 <TIM_Base_SetConfig+0xd8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d103      	bne.n	800a4e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	691a      	ldr	r2, [r3, #16]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	615a      	str	r2, [r3, #20]
}
 800a4ee:	bf00      	nop
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40012c00 	.word	0x40012c00
 800a500:	40000400 	.word	0x40000400
 800a504:	40014000 	.word	0x40014000
 800a508:	40014400 	.word	0x40014400

0800a50c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	f023 0201 	bic.w	r2, r3, #1
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0303 	bic.w	r3, r3, #3
 800a546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f023 0302 	bic.w	r3, r3, #2
 800a558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	4313      	orrs	r3, r2
 800a562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a24      	ldr	r2, [pc, #144]	; (800a5f8 <TIM_OC1_SetConfig+0xec>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d007      	beq.n	800a57c <TIM_OC1_SetConfig+0x70>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a23      	ldr	r2, [pc, #140]	; (800a5fc <TIM_OC1_SetConfig+0xf0>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d003      	beq.n	800a57c <TIM_OC1_SetConfig+0x70>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a22      	ldr	r2, [pc, #136]	; (800a600 <TIM_OC1_SetConfig+0xf4>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d10c      	bne.n	800a596 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f023 0308 	bic.w	r3, r3, #8
 800a582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f023 0304 	bic.w	r3, r3, #4
 800a594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a17      	ldr	r2, [pc, #92]	; (800a5f8 <TIM_OC1_SetConfig+0xec>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d007      	beq.n	800a5ae <TIM_OC1_SetConfig+0xa2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a16      	ldr	r2, [pc, #88]	; (800a5fc <TIM_OC1_SetConfig+0xf0>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_OC1_SetConfig+0xa2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a15      	ldr	r2, [pc, #84]	; (800a600 <TIM_OC1_SetConfig+0xf4>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d111      	bne.n	800a5d2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	621a      	str	r2, [r3, #32]
}
 800a5ec:	bf00      	nop
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	40012c00 	.word	0x40012c00
 800a5fc:	40014000 	.word	0x40014000
 800a600:	40014400 	.word	0x40014400

0800a604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a1b      	ldr	r3, [r3, #32]
 800a618:	f023 0210 	bic.w	r2, r3, #16
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a63e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	021b      	lsls	r3, r3, #8
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f023 0320 	bic.w	r3, r3, #32
 800a652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	011b      	lsls	r3, r3, #4
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a22      	ldr	r2, [pc, #136]	; (800a6ec <TIM_OC2_SetConfig+0xe8>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d10d      	bne.n	800a684 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a66e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4313      	orrs	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a19      	ldr	r2, [pc, #100]	; (800a6ec <TIM_OC2_SetConfig+0xe8>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d007      	beq.n	800a69c <TIM_OC2_SetConfig+0x98>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a18      	ldr	r2, [pc, #96]	; (800a6f0 <TIM_OC2_SetConfig+0xec>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_OC2_SetConfig+0x98>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a17      	ldr	r2, [pc, #92]	; (800a6f4 <TIM_OC2_SetConfig+0xf0>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d113      	bne.n	800a6c4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	621a      	str	r2, [r3, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	40012c00 	.word	0x40012c00
 800a6f0:	40014000 	.word	0x40014000
 800a6f4:	40014400 	.word	0x40014400

0800a6f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 0303 	bic.w	r3, r3, #3
 800a732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	021b      	lsls	r3, r3, #8
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	4313      	orrs	r3, r2
 800a750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a21      	ldr	r2, [pc, #132]	; (800a7dc <TIM_OC3_SetConfig+0xe4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d10d      	bne.n	800a776 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	021b      	lsls	r3, r3, #8
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a18      	ldr	r2, [pc, #96]	; (800a7dc <TIM_OC3_SetConfig+0xe4>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d007      	beq.n	800a78e <TIM_OC3_SetConfig+0x96>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a17      	ldr	r2, [pc, #92]	; (800a7e0 <TIM_OC3_SetConfig+0xe8>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d003      	beq.n	800a78e <TIM_OC3_SetConfig+0x96>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a16      	ldr	r2, [pc, #88]	; (800a7e4 <TIM_OC3_SetConfig+0xec>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d113      	bne.n	800a7b6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a79c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	011b      	lsls	r3, r3, #4
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	011b      	lsls	r3, r3, #4
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	621a      	str	r2, [r3, #32]
}
 800a7d0:	bf00      	nop
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	40012c00 	.word	0x40012c00
 800a7e0:	40014000 	.word	0x40014000
 800a7e4:	40014400 	.word	0x40014400

0800a7e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	031b      	lsls	r3, r3, #12
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	4313      	orrs	r3, r2
 800a842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a14      	ldr	r2, [pc, #80]	; (800a898 <TIM_OC4_SetConfig+0xb0>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d007      	beq.n	800a85c <TIM_OC4_SetConfig+0x74>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a13      	ldr	r2, [pc, #76]	; (800a89c <TIM_OC4_SetConfig+0xb4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d003      	beq.n	800a85c <TIM_OC4_SetConfig+0x74>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a12      	ldr	r2, [pc, #72]	; (800a8a0 <TIM_OC4_SetConfig+0xb8>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d109      	bne.n	800a870 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	019b      	lsls	r3, r3, #6
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	621a      	str	r2, [r3, #32]
}
 800a88a:	bf00      	nop
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	40012c00 	.word	0x40012c00
 800a89c:	40014000 	.word	0x40014000
 800a8a0:	40014400 	.word	0x40014400

0800a8a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a8e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	041b      	lsls	r3, r3, #16
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a13      	ldr	r2, [pc, #76]	; (800a948 <TIM_OC5_SetConfig+0xa4>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d007      	beq.n	800a90e <TIM_OC5_SetConfig+0x6a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a12      	ldr	r2, [pc, #72]	; (800a94c <TIM_OC5_SetConfig+0xa8>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d003      	beq.n	800a90e <TIM_OC5_SetConfig+0x6a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a11      	ldr	r2, [pc, #68]	; (800a950 <TIM_OC5_SetConfig+0xac>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d109      	bne.n	800a922 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	021b      	lsls	r3, r3, #8
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	621a      	str	r2, [r3, #32]
}
 800a93c:	bf00      	nop
 800a93e:	371c      	adds	r7, #28
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	40012c00 	.word	0x40012c00
 800a94c:	40014000 	.word	0x40014000
 800a950:	40014400 	.word	0x40014400

0800a954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a1b      	ldr	r3, [r3, #32]
 800a968:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	021b      	lsls	r3, r3, #8
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	4313      	orrs	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a99a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	051b      	lsls	r3, r3, #20
 800a9a2:	693a      	ldr	r2, [r7, #16]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a14      	ldr	r2, [pc, #80]	; (800a9fc <TIM_OC6_SetConfig+0xa8>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d007      	beq.n	800a9c0 <TIM_OC6_SetConfig+0x6c>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a13      	ldr	r2, [pc, #76]	; (800aa00 <TIM_OC6_SetConfig+0xac>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d003      	beq.n	800a9c0 <TIM_OC6_SetConfig+0x6c>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a12      	ldr	r2, [pc, #72]	; (800aa04 <TIM_OC6_SetConfig+0xb0>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d109      	bne.n	800a9d4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	029b      	lsls	r3, r3, #10
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	621a      	str	r2, [r3, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	40012c00 	.word	0x40012c00
 800aa00:	40014000 	.word	0x40014000
 800aa04:	40014400 	.word	0x40014400

0800aa08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d101      	bne.n	800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	e054      	b.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a24      	ldr	r2, [pc, #144]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d108      	bne.n	800aa5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00e      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa88:	d009      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a13      	ldr	r2, [pc, #76]	; (800aadc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d004      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a11      	ldr	r2, [pc, #68]	; (800aae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d10c      	bne.n	800aab8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	40012c00 	.word	0x40012c00
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40014000 	.word	0x40014000

0800aae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e040      	b.n	800abb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d106      	bne.n	800ab48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7f6 ffa2 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2224      	movs	r2, #36	; 0x24
 800ab4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f022 0201 	bic.w	r2, r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fe42 	bl	800b7f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fbb9 	bl	800b2e4 <UART_SetConfig>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d101      	bne.n	800ab7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e01b      	b.n	800abb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f042 0201 	orr.w	r2, r2, #1
 800abaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fec1 	bl	800b934 <UART_CheckIdleState>
 800abb2:	4603      	mov	r3, r0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08a      	sub	sp, #40	; 0x28
 800abc0:	af02      	add	r7, sp, #8
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	4613      	mov	r3, r2
 800abca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d178      	bne.n	800acc6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <HAL_UART_Transmit+0x24>
 800abda:	88fb      	ldrh	r3, [r7, #6]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e071      	b.n	800acc8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2221      	movs	r2, #33	; 0x21
 800abf0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abf2:	f7fb f8d9 	bl	8005da8 <HAL_GetTick>
 800abf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	88fa      	ldrh	r2, [r7, #6]
 800abfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	88fa      	ldrh	r2, [r7, #6]
 800ac04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac10:	d108      	bne.n	800ac24 <HAL_UART_Transmit+0x68>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d104      	bne.n	800ac24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	61bb      	str	r3, [r7, #24]
 800ac22:	e003      	b.n	800ac2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac2c:	e030      	b.n	800ac90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2200      	movs	r2, #0
 800ac36:	2180      	movs	r1, #128	; 0x80
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f000 ff23 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2220      	movs	r2, #32
 800ac48:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e03c      	b.n	800acc8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10b      	bne.n	800ac6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	881a      	ldrh	r2, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac60:	b292      	uxth	r2, r2
 800ac62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	3302      	adds	r3, #2
 800ac68:	61bb      	str	r3, [r7, #24]
 800ac6a:	e008      	b.n	800ac7e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	781a      	ldrb	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	b292      	uxth	r2, r2
 800ac76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	3b01      	subs	r3, #1
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1c8      	bne.n	800ac2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2200      	movs	r2, #0
 800aca4:	2140      	movs	r1, #64	; 0x40
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 feec 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d004      	beq.n	800acbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2220      	movs	r2, #32
 800acb6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800acb8:	2303      	movs	r3, #3
 800acba:	e005      	b.n	800acc8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2220      	movs	r2, #32
 800acc0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e000      	b.n	800acc8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800acc6:	2302      	movs	r3, #2
  }
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b0ba      	sub	sp, #232	; 0xe8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800acf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800acfa:	f640 030f 	movw	r3, #2063	; 0x80f
 800acfe:	4013      	ands	r3, r2
 800ad00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d115      	bne.n	800ad38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ad0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad10:	f003 0320 	and.w	r3, r3, #32
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00f      	beq.n	800ad38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ad18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad1c:	f003 0320 	and.w	r3, r3, #32
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d009      	beq.n	800ad38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 82ae 	beq.w	800b28a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
      }
      return;
 800ad36:	e2a8      	b.n	800b28a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ad38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 8117 	beq.w	800af70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ad42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ad4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad52:	4b85      	ldr	r3, [pc, #532]	; (800af68 <HAL_UART_IRQHandler+0x298>)
 800ad54:	4013      	ands	r3, r2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 810a 	beq.w	800af70 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d011      	beq.n	800ad8c <HAL_UART_IRQHandler+0xbc>
 800ad68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad82:	f043 0201 	orr.w	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d011      	beq.n	800adbc <HAL_UART_IRQHandler+0xec>
 800ad98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2202      	movs	r2, #2
 800adaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adb2:	f043 0204 	orr.w	r2, r3, #4
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d011      	beq.n	800adec <HAL_UART_IRQHandler+0x11c>
 800adc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00b      	beq.n	800adec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2204      	movs	r2, #4
 800adda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ade2:	f043 0202 	orr.w	r2, r3, #2
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800adec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf0:	f003 0308 	and.w	r3, r3, #8
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d017      	beq.n	800ae28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800adf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d105      	bne.n	800ae10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ae04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2208      	movs	r2, #8
 800ae16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae1e:	f043 0208 	orr.w	r2, r3, #8
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d012      	beq.n	800ae5a <HAL_UART_IRQHandler+0x18a>
 800ae34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00c      	beq.n	800ae5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae50:	f043 0220 	orr.w	r2, r3, #32
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8214 	beq.w	800b28e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae76:	f003 0320 	and.w	r3, r3, #32
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d007      	beq.n	800ae8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea2:	2b40      	cmp	r3, #64	; 0x40
 800aea4:	d005      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aeaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d04f      	beq.n	800af52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fe4d 	bl	800bb52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec2:	2b40      	cmp	r3, #64	; 0x40
 800aec4:	d141      	bne.n	800af4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aed4:	e853 3f00 	ldrex	r3, [r3]
 800aed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3308      	adds	r3, #8
 800aeee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aefe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1d9      	bne.n	800aec6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af16:	2b00      	cmp	r3, #0
 800af18:	d013      	beq.n	800af42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af1e:	4a13      	ldr	r2, [pc, #76]	; (800af6c <HAL_UART_IRQHandler+0x29c>)
 800af20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af26:	4618      	mov	r0, r3
 800af28:	f7fb ff70 	bl	8006e0c <HAL_DMA_Abort_IT>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d017      	beq.n	800af62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af40:	e00f      	b.n	800af62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f9b8 	bl	800b2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af48:	e00b      	b.n	800af62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f9b4 	bl	800b2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af50:	e007      	b.n	800af62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f9b0 	bl	800b2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800af60:	e195      	b.n	800b28e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af62:	bf00      	nop
    return;
 800af64:	e193      	b.n	800b28e <HAL_UART_IRQHandler+0x5be>
 800af66:	bf00      	nop
 800af68:	04000120 	.word	0x04000120
 800af6c:	0800bc1b 	.word	0x0800bc1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af74:	2b01      	cmp	r3, #1
 800af76:	f040 814e 	bne.w	800b216 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af7e:	f003 0310 	and.w	r3, r3, #16
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 8147 	beq.w	800b216 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af8c:	f003 0310 	and.w	r3, r3, #16
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 8140 	beq.w	800b216 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2210      	movs	r2, #16
 800af9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa8:	2b40      	cmp	r3, #64	; 0x40
 800afaa:	f040 80b8 	bne.w	800b11e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800afba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 8167 	beq.w	800b292 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800afca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afce:	429a      	cmp	r2, r3
 800afd0:	f080 815f 	bcs.w	800b292 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0320 	and.w	r3, r3, #32
 800afea:	2b00      	cmp	r3, #0
 800afec:	f040 8086 	bne.w	800b0fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b00c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	461a      	mov	r2, r3
 800b016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b01a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b01e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b02a:	e841 2300 	strex	r3, r2, [r1]
 800b02e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1da      	bne.n	800aff0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3308      	adds	r3, #8
 800b040:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b044:	e853 3f00 	ldrex	r3, [r3]
 800b048:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b04a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b04c:	f023 0301 	bic.w	r3, r3, #1
 800b050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3308      	adds	r3, #8
 800b05a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b05e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b062:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b066:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b06a:	e841 2300 	strex	r3, r2, [r1]
 800b06e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1e1      	bne.n	800b03a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3308      	adds	r3, #8
 800b07c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b080:	e853 3f00 	ldrex	r3, [r3]
 800b084:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b09a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b09c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e3      	bne.n	800b076 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0cc:	f023 0310 	bic.w	r3, r3, #16
 800b0d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0de:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e4      	bne.n	800b0bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fb fe4a 	bl	8006d90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2202      	movs	r2, #2
 800b100:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b10e:	b29b      	uxth	r3, r3
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	b29b      	uxth	r3, r3
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f8d8 	bl	800b2cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b11c:	e0b9      	b.n	800b292 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b138:	b29b      	uxth	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 80ab 	beq.w	800b296 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800b140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 80a6 	beq.w	800b296 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	e853 3f00 	ldrex	r3, [r3]
 800b156:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b15e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b16c:	647b      	str	r3, [r7, #68]	; 0x44
 800b16e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b174:	e841 2300 	strex	r3, r2, [r1]
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e4      	bne.n	800b14a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3308      	adds	r3, #8
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	e853 3f00 	ldrex	r3, [r3]
 800b18e:	623b      	str	r3, [r7, #32]
   return(result);
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	f023 0301 	bic.w	r3, r3, #1
 800b196:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3308      	adds	r3, #8
 800b1a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1a4:	633a      	str	r2, [r7, #48]	; 0x30
 800b1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ac:	e841 2300 	strex	r3, r2, [r1]
 800b1b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e3      	bne.n	800b180 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	e853 3f00 	ldrex	r3, [r3]
 800b1d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f023 0310 	bic.w	r3, r3, #16
 800b1e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b1ee:	61fb      	str	r3, [r7, #28]
 800b1f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	69b9      	ldr	r1, [r7, #24]
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	617b      	str	r3, [r7, #20]
   return(result);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e4      	bne.n	800b1cc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2202      	movs	r2, #2
 800b206:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f85c 	bl	800b2cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b214:	e03f      	b.n	800b296 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b21a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00e      	beq.n	800b240 <HAL_UART_IRQHandler+0x570>
 800b222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d008      	beq.n	800b240 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fd2e 	bl	800bc9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b23e:	e02d      	b.n	800b29c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00e      	beq.n	800b26a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b254:	2b00      	cmp	r3, #0
 800b256:	d008      	beq.n	800b26a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d01c      	beq.n	800b29a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	4798      	blx	r3
    }
    return;
 800b268:	e017      	b.n	800b29a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d012      	beq.n	800b29c <HAL_UART_IRQHandler+0x5cc>
 800b276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00c      	beq.n	800b29c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fcdf 	bl	800bc46 <UART_EndTransmit_IT>
    return;
 800b288:	e008      	b.n	800b29c <HAL_UART_IRQHandler+0x5cc>
      return;
 800b28a:	bf00      	nop
 800b28c:	e006      	b.n	800b29c <HAL_UART_IRQHandler+0x5cc>
    return;
 800b28e:	bf00      	nop
 800b290:	e004      	b.n	800b29c <HAL_UART_IRQHandler+0x5cc>
      return;
 800b292:	bf00      	nop
 800b294:	e002      	b.n	800b29c <HAL_UART_IRQHandler+0x5cc>
      return;
 800b296:	bf00      	nop
 800b298:	e000      	b.n	800b29c <HAL_UART_IRQHandler+0x5cc>
    return;
 800b29a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b29c:	37e8      	adds	r7, #232	; 0xe8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop

0800b2a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2e8:	b08a      	sub	sp, #40	; 0x28
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	431a      	orrs	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	431a      	orrs	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	4313      	orrs	r3, r2
 800b30a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	4ba5      	ldr	r3, [pc, #660]	; (800b5a8 <UART_SetConfig+0x2c4>)
 800b314:	4013      	ands	r3, r2
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	6812      	ldr	r2, [r2, #0]
 800b31a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b31c:	430b      	orrs	r3, r1
 800b31e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	430a      	orrs	r2, r1
 800b334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a9a      	ldr	r2, [pc, #616]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d004      	beq.n	800b350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34c:	4313      	orrs	r3, r2
 800b34e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b360:	430a      	orrs	r2, r1
 800b362:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a91      	ldr	r2, [pc, #580]	; (800b5b0 <UART_SetConfig+0x2cc>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d126      	bne.n	800b3bc <UART_SetConfig+0xd8>
 800b36e:	4b91      	ldr	r3, [pc, #580]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b374:	f003 0303 	and.w	r3, r3, #3
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d81b      	bhi.n	800b3b4 <UART_SetConfig+0xd0>
 800b37c:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <UART_SetConfig+0xa0>)
 800b37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b382:	bf00      	nop
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b39d 	.word	0x0800b39d
 800b390:	0800b3ad 	.word	0x0800b3ad
 800b394:	2301      	movs	r3, #1
 800b396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b39a:	e0d6      	b.n	800b54a <UART_SetConfig+0x266>
 800b39c:	2302      	movs	r3, #2
 800b39e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3a2:	e0d2      	b.n	800b54a <UART_SetConfig+0x266>
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3aa:	e0ce      	b.n	800b54a <UART_SetConfig+0x266>
 800b3ac:	2308      	movs	r3, #8
 800b3ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3b2:	e0ca      	b.n	800b54a <UART_SetConfig+0x266>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3ba:	e0c6      	b.n	800b54a <UART_SetConfig+0x266>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a7d      	ldr	r2, [pc, #500]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d138      	bne.n	800b438 <UART_SetConfig+0x154>
 800b3c6:	4b7b      	ldr	r3, [pc, #492]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3cc:	f003 030c 	and.w	r3, r3, #12
 800b3d0:	2b0c      	cmp	r3, #12
 800b3d2:	d82d      	bhi.n	800b430 <UART_SetConfig+0x14c>
 800b3d4:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <UART_SetConfig+0xf8>)
 800b3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3da:	bf00      	nop
 800b3dc:	0800b411 	.word	0x0800b411
 800b3e0:	0800b431 	.word	0x0800b431
 800b3e4:	0800b431 	.word	0x0800b431
 800b3e8:	0800b431 	.word	0x0800b431
 800b3ec:	0800b421 	.word	0x0800b421
 800b3f0:	0800b431 	.word	0x0800b431
 800b3f4:	0800b431 	.word	0x0800b431
 800b3f8:	0800b431 	.word	0x0800b431
 800b3fc:	0800b419 	.word	0x0800b419
 800b400:	0800b431 	.word	0x0800b431
 800b404:	0800b431 	.word	0x0800b431
 800b408:	0800b431 	.word	0x0800b431
 800b40c:	0800b429 	.word	0x0800b429
 800b410:	2300      	movs	r3, #0
 800b412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b416:	e098      	b.n	800b54a <UART_SetConfig+0x266>
 800b418:	2302      	movs	r3, #2
 800b41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b41e:	e094      	b.n	800b54a <UART_SetConfig+0x266>
 800b420:	2304      	movs	r3, #4
 800b422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b426:	e090      	b.n	800b54a <UART_SetConfig+0x266>
 800b428:	2308      	movs	r3, #8
 800b42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b42e:	e08c      	b.n	800b54a <UART_SetConfig+0x266>
 800b430:	2310      	movs	r3, #16
 800b432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b436:	e088      	b.n	800b54a <UART_SetConfig+0x266>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a5f      	ldr	r2, [pc, #380]	; (800b5bc <UART_SetConfig+0x2d8>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d125      	bne.n	800b48e <UART_SetConfig+0x1aa>
 800b442:	4b5c      	ldr	r3, [pc, #368]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b44c:	2b30      	cmp	r3, #48	; 0x30
 800b44e:	d016      	beq.n	800b47e <UART_SetConfig+0x19a>
 800b450:	2b30      	cmp	r3, #48	; 0x30
 800b452:	d818      	bhi.n	800b486 <UART_SetConfig+0x1a2>
 800b454:	2b20      	cmp	r3, #32
 800b456:	d00a      	beq.n	800b46e <UART_SetConfig+0x18a>
 800b458:	2b20      	cmp	r3, #32
 800b45a:	d814      	bhi.n	800b486 <UART_SetConfig+0x1a2>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <UART_SetConfig+0x182>
 800b460:	2b10      	cmp	r3, #16
 800b462:	d008      	beq.n	800b476 <UART_SetConfig+0x192>
 800b464:	e00f      	b.n	800b486 <UART_SetConfig+0x1a2>
 800b466:	2300      	movs	r3, #0
 800b468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b46c:	e06d      	b.n	800b54a <UART_SetConfig+0x266>
 800b46e:	2302      	movs	r3, #2
 800b470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b474:	e069      	b.n	800b54a <UART_SetConfig+0x266>
 800b476:	2304      	movs	r3, #4
 800b478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b47c:	e065      	b.n	800b54a <UART_SetConfig+0x266>
 800b47e:	2308      	movs	r3, #8
 800b480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b484:	e061      	b.n	800b54a <UART_SetConfig+0x266>
 800b486:	2310      	movs	r3, #16
 800b488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b48c:	e05d      	b.n	800b54a <UART_SetConfig+0x266>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a4b      	ldr	r2, [pc, #300]	; (800b5c0 <UART_SetConfig+0x2dc>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d125      	bne.n	800b4e4 <UART_SetConfig+0x200>
 800b498:	4b46      	ldr	r3, [pc, #280]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b49e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b4a2:	2bc0      	cmp	r3, #192	; 0xc0
 800b4a4:	d016      	beq.n	800b4d4 <UART_SetConfig+0x1f0>
 800b4a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b4a8:	d818      	bhi.n	800b4dc <UART_SetConfig+0x1f8>
 800b4aa:	2b80      	cmp	r3, #128	; 0x80
 800b4ac:	d00a      	beq.n	800b4c4 <UART_SetConfig+0x1e0>
 800b4ae:	2b80      	cmp	r3, #128	; 0x80
 800b4b0:	d814      	bhi.n	800b4dc <UART_SetConfig+0x1f8>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <UART_SetConfig+0x1d8>
 800b4b6:	2b40      	cmp	r3, #64	; 0x40
 800b4b8:	d008      	beq.n	800b4cc <UART_SetConfig+0x1e8>
 800b4ba:	e00f      	b.n	800b4dc <UART_SetConfig+0x1f8>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4c2:	e042      	b.n	800b54a <UART_SetConfig+0x266>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ca:	e03e      	b.n	800b54a <UART_SetConfig+0x266>
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4d2:	e03a      	b.n	800b54a <UART_SetConfig+0x266>
 800b4d4:	2308      	movs	r3, #8
 800b4d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4da:	e036      	b.n	800b54a <UART_SetConfig+0x266>
 800b4dc:	2310      	movs	r3, #16
 800b4de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4e2:	e032      	b.n	800b54a <UART_SetConfig+0x266>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a30      	ldr	r2, [pc, #192]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d12a      	bne.n	800b544 <UART_SetConfig+0x260>
 800b4ee:	4b31      	ldr	r3, [pc, #196]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4fc:	d01a      	beq.n	800b534 <UART_SetConfig+0x250>
 800b4fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b502:	d81b      	bhi.n	800b53c <UART_SetConfig+0x258>
 800b504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b508:	d00c      	beq.n	800b524 <UART_SetConfig+0x240>
 800b50a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b50e:	d815      	bhi.n	800b53c <UART_SetConfig+0x258>
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <UART_SetConfig+0x238>
 800b514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b518:	d008      	beq.n	800b52c <UART_SetConfig+0x248>
 800b51a:	e00f      	b.n	800b53c <UART_SetConfig+0x258>
 800b51c:	2300      	movs	r3, #0
 800b51e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b522:	e012      	b.n	800b54a <UART_SetConfig+0x266>
 800b524:	2302      	movs	r3, #2
 800b526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b52a:	e00e      	b.n	800b54a <UART_SetConfig+0x266>
 800b52c:	2304      	movs	r3, #4
 800b52e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b532:	e00a      	b.n	800b54a <UART_SetConfig+0x266>
 800b534:	2308      	movs	r3, #8
 800b536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b53a:	e006      	b.n	800b54a <UART_SetConfig+0x266>
 800b53c:	2310      	movs	r3, #16
 800b53e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b542:	e002      	b.n	800b54a <UART_SetConfig+0x266>
 800b544:	2310      	movs	r3, #16
 800b546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a17      	ldr	r2, [pc, #92]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b550:	4293      	cmp	r3, r2
 800b552:	f040 808b 	bne.w	800b66c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b55a:	2b08      	cmp	r3, #8
 800b55c:	d834      	bhi.n	800b5c8 <UART_SetConfig+0x2e4>
 800b55e:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <UART_SetConfig+0x280>)
 800b560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b5c9 	.word	0x0800b5c9
 800b56c:	0800b591 	.word	0x0800b591
 800b570:	0800b5c9 	.word	0x0800b5c9
 800b574:	0800b597 	.word	0x0800b597
 800b578:	0800b5c9 	.word	0x0800b5c9
 800b57c:	0800b5c9 	.word	0x0800b5c9
 800b580:	0800b5c9 	.word	0x0800b5c9
 800b584:	0800b59f 	.word	0x0800b59f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b588:	f7fd fdba 	bl	8009100 <HAL_RCC_GetPCLK1Freq>
 800b58c:	61f8      	str	r0, [r7, #28]
        break;
 800b58e:	e021      	b.n	800b5d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b590:	4b0c      	ldr	r3, [pc, #48]	; (800b5c4 <UART_SetConfig+0x2e0>)
 800b592:	61fb      	str	r3, [r7, #28]
        break;
 800b594:	e01e      	b.n	800b5d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b596:	f7fd fd1b 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 800b59a:	61f8      	str	r0, [r7, #28]
        break;
 800b59c:	e01a      	b.n	800b5d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a2:	61fb      	str	r3, [r7, #28]
        break;
 800b5a4:	e016      	b.n	800b5d4 <UART_SetConfig+0x2f0>
 800b5a6:	bf00      	nop
 800b5a8:	efff69f3 	.word	0xefff69f3
 800b5ac:	40008000 	.word	0x40008000
 800b5b0:	40013800 	.word	0x40013800
 800b5b4:	40021000 	.word	0x40021000
 800b5b8:	40004400 	.word	0x40004400
 800b5bc:	40004800 	.word	0x40004800
 800b5c0:	40004c00 	.word	0x40004c00
 800b5c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b5d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f000 80fa 	beq.w	800b7d0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	4413      	add	r3, r2
 800b5e6:	69fa      	ldr	r2, [r7, #28]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d305      	bcc.n	800b5f8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b5f2:	69fa      	ldr	r2, [r7, #28]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d903      	bls.n	800b600 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b5fe:	e0e7      	b.n	800b7d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	2200      	movs	r2, #0
 800b604:	461c      	mov	r4, r3
 800b606:	4615      	mov	r5, r2
 800b608:	f04f 0200 	mov.w	r2, #0
 800b60c:	f04f 0300 	mov.w	r3, #0
 800b610:	022b      	lsls	r3, r5, #8
 800b612:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b616:	0222      	lsls	r2, r4, #8
 800b618:	68f9      	ldr	r1, [r7, #12]
 800b61a:	6849      	ldr	r1, [r1, #4]
 800b61c:	0849      	lsrs	r1, r1, #1
 800b61e:	2000      	movs	r0, #0
 800b620:	4688      	mov	r8, r1
 800b622:	4681      	mov	r9, r0
 800b624:	eb12 0a08 	adds.w	sl, r2, r8
 800b628:	eb43 0b09 	adc.w	fp, r3, r9
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b63a:	4650      	mov	r0, sl
 800b63c:	4659      	mov	r1, fp
 800b63e:	f7f5 f803 	bl	8000648 <__aeabi_uldivmod>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4613      	mov	r3, r2
 800b648:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b650:	d308      	bcc.n	800b664 <UART_SetConfig+0x380>
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b658:	d204      	bcs.n	800b664 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	60da      	str	r2, [r3, #12]
 800b662:	e0b5      	b.n	800b7d0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b66a:	e0b1      	b.n	800b7d0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	69db      	ldr	r3, [r3, #28]
 800b670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b674:	d15d      	bne.n	800b732 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800b676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b67a:	2b08      	cmp	r3, #8
 800b67c:	d827      	bhi.n	800b6ce <UART_SetConfig+0x3ea>
 800b67e:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <UART_SetConfig+0x3a0>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b6a9 	.word	0x0800b6a9
 800b688:	0800b6b1 	.word	0x0800b6b1
 800b68c:	0800b6b9 	.word	0x0800b6b9
 800b690:	0800b6cf 	.word	0x0800b6cf
 800b694:	0800b6bf 	.word	0x0800b6bf
 800b698:	0800b6cf 	.word	0x0800b6cf
 800b69c:	0800b6cf 	.word	0x0800b6cf
 800b6a0:	0800b6cf 	.word	0x0800b6cf
 800b6a4:	0800b6c7 	.word	0x0800b6c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6a8:	f7fd fd2a 	bl	8009100 <HAL_RCC_GetPCLK1Freq>
 800b6ac:	61f8      	str	r0, [r7, #28]
        break;
 800b6ae:	e014      	b.n	800b6da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6b0:	f7fd fd3c 	bl	800912c <HAL_RCC_GetPCLK2Freq>
 800b6b4:	61f8      	str	r0, [r7, #28]
        break;
 800b6b6:	e010      	b.n	800b6da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6b8:	4b4c      	ldr	r3, [pc, #304]	; (800b7ec <UART_SetConfig+0x508>)
 800b6ba:	61fb      	str	r3, [r7, #28]
        break;
 800b6bc:	e00d      	b.n	800b6da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6be:	f7fd fc87 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 800b6c2:	61f8      	str	r0, [r7, #28]
        break;
 800b6c4:	e009      	b.n	800b6da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ca:	61fb      	str	r3, [r7, #28]
        break;
 800b6cc:	e005      	b.n	800b6da <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b6d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d077      	beq.n	800b7d0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	005a      	lsls	r2, r3, #1
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	085b      	lsrs	r3, r3, #1
 800b6ea:	441a      	add	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	2b0f      	cmp	r3, #15
 800b6fa:	d916      	bls.n	800b72a <UART_SetConfig+0x446>
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b702:	d212      	bcs.n	800b72a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	b29b      	uxth	r3, r3
 800b708:	f023 030f 	bic.w	r3, r3, #15
 800b70c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	085b      	lsrs	r3, r3, #1
 800b712:	b29b      	uxth	r3, r3
 800b714:	f003 0307 	and.w	r3, r3, #7
 800b718:	b29a      	uxth	r2, r3
 800b71a:	8afb      	ldrh	r3, [r7, #22]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	8afa      	ldrh	r2, [r7, #22]
 800b726:	60da      	str	r2, [r3, #12]
 800b728:	e052      	b.n	800b7d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b730:	e04e      	b.n	800b7d0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b736:	2b08      	cmp	r3, #8
 800b738:	d827      	bhi.n	800b78a <UART_SetConfig+0x4a6>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <UART_SetConfig+0x45c>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b765 	.word	0x0800b765
 800b744:	0800b76d 	.word	0x0800b76d
 800b748:	0800b775 	.word	0x0800b775
 800b74c:	0800b78b 	.word	0x0800b78b
 800b750:	0800b77b 	.word	0x0800b77b
 800b754:	0800b78b 	.word	0x0800b78b
 800b758:	0800b78b 	.word	0x0800b78b
 800b75c:	0800b78b 	.word	0x0800b78b
 800b760:	0800b783 	.word	0x0800b783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b764:	f7fd fccc 	bl	8009100 <HAL_RCC_GetPCLK1Freq>
 800b768:	61f8      	str	r0, [r7, #28]
        break;
 800b76a:	e014      	b.n	800b796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b76c:	f7fd fcde 	bl	800912c <HAL_RCC_GetPCLK2Freq>
 800b770:	61f8      	str	r0, [r7, #28]
        break;
 800b772:	e010      	b.n	800b796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b774:	4b1d      	ldr	r3, [pc, #116]	; (800b7ec <UART_SetConfig+0x508>)
 800b776:	61fb      	str	r3, [r7, #28]
        break;
 800b778:	e00d      	b.n	800b796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b77a:	f7fd fc29 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 800b77e:	61f8      	str	r0, [r7, #28]
        break;
 800b780:	e009      	b.n	800b796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b786:	61fb      	str	r3, [r7, #28]
        break;
 800b788:	e005      	b.n	800b796 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b794:	bf00      	nop
    }

    if (pclk != 0U)
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d019      	beq.n	800b7d0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	085a      	lsrs	r2, r3, #1
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	441a      	add	r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	2b0f      	cmp	r3, #15
 800b7b4:	d909      	bls.n	800b7ca <UART_SetConfig+0x4e6>
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7bc:	d205      	bcs.n	800b7ca <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	60da      	str	r2, [r3, #12]
 800b7c8:	e002      	b.n	800b7d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b7dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3728      	adds	r7, #40	; 0x28
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7ea:	bf00      	nop
 800b7ec:	00f42400 	.word	0x00f42400

0800b7f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00a      	beq.n	800b81a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	430a      	orrs	r2, r1
 800b83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	f003 0302 	and.w	r3, r3, #2
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00a      	beq.n	800b85e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00a      	beq.n	800b880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	430a      	orrs	r2, r1
 800b87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	f003 0310 	and.w	r3, r3, #16
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00a      	beq.n	800b8a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	f003 0320 	and.w	r3, r3, #32
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d01a      	beq.n	800b906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8ee:	d10a      	bne.n	800b906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	605a      	str	r2, [r3, #4]
  }
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b098      	sub	sp, #96	; 0x60
 800b938:	af02      	add	r7, sp, #8
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b944:	f7fa fa30 	bl	8005da8 <HAL_GetTick>
 800b948:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0308 	and.w	r3, r3, #8
 800b954:	2b08      	cmp	r3, #8
 800b956:	d12e      	bne.n	800b9b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b960:	2200      	movs	r2, #0
 800b962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f88c 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d021      	beq.n	800b9b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	e853 3f00 	ldrex	r3, [r3]
 800b97e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b986:	653b      	str	r3, [r7, #80]	; 0x50
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	461a      	mov	r2, r3
 800b98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b990:	647b      	str	r3, [r7, #68]	; 0x44
 800b992:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b998:	e841 2300 	strex	r3, r2, [r1]
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e6      	bne.n	800b972 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e062      	b.n	800ba7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0304 	and.w	r3, r3, #4
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	d149      	bne.n	800ba58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f856 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d03c      	beq.n	800ba58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fc:	633b      	str	r3, [r7, #48]	; 0x30
 800b9fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e6      	bne.n	800b9de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3308      	adds	r3, #8
 800ba16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f023 0301 	bic.w	r3, r3, #1
 800ba26:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba30:	61fa      	str	r2, [r7, #28]
 800ba32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba34:	69b9      	ldr	r1, [r7, #24]
 800ba36:	69fa      	ldr	r2, [r7, #28]
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e5      	bne.n	800ba10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e011      	b.n	800ba7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2220      	movs	r2, #32
 800ba5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2220      	movs	r2, #32
 800ba62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3758      	adds	r7, #88	; 0x58
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba94:	e049      	b.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9c:	d045      	beq.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba9e:	f7fa f983 	bl	8005da8 <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d302      	bcc.n	800bab4 <UART_WaitOnFlagUntilTimeout+0x30>
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e048      	b.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0304 	and.w	r3, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d031      	beq.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	69db      	ldr	r3, [r3, #28]
 800bacc:	f003 0308 	and.w	r3, r3, #8
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	d110      	bne.n	800baf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2208      	movs	r2, #8
 800bada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 f838 	bl	800bb52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2208      	movs	r2, #8
 800bae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e029      	b.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb04:	d111      	bne.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 f81e 	bl	800bb52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bb26:	2303      	movs	r3, #3
 800bb28:	e00f      	b.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	69da      	ldr	r2, [r3, #28]
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	4013      	ands	r3, r2
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	bf0c      	ite	eq
 800bb3a:	2301      	moveq	r3, #1
 800bb3c:	2300      	movne	r3, #0
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	461a      	mov	r2, r3
 800bb42:	79fb      	ldrb	r3, [r7, #7]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d0a6      	beq.n	800ba96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b095      	sub	sp, #84	; 0x54
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb62:	e853 3f00 	ldrex	r3, [r3]
 800bb66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
 800bb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb78:	643b      	str	r3, [r7, #64]	; 0x40
 800bb7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb80:	e841 2300 	strex	r3, r2, [r1]
 800bb84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1e6      	bne.n	800bb5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3308      	adds	r3, #8
 800bb92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	e853 3f00 	ldrex	r3, [r3]
 800bb9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	f023 0301 	bic.w	r3, r3, #1
 800bba2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3308      	adds	r3, #8
 800bbaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb4:	e841 2300 	strex	r3, r2, [r1]
 800bbb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1e5      	bne.n	800bb8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d118      	bne.n	800bbfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	e853 3f00 	ldrex	r3, [r3]
 800bbd4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f023 0310 	bic.w	r3, r3, #16
 800bbdc:	647b      	str	r3, [r7, #68]	; 0x44
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe6:	61bb      	str	r3, [r7, #24]
 800bbe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	6979      	ldr	r1, [r7, #20]
 800bbec:	69ba      	ldr	r2, [r7, #24]
 800bbee:	e841 2300 	strex	r3, r2, [r1]
 800bbf2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1e6      	bne.n	800bbc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bc0e:	bf00      	nop
 800bc10:	3754      	adds	r7, #84	; 0x54
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f7ff fb3d 	bl	800b2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b088      	sub	sp, #32
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	e853 3f00 	ldrex	r3, [r3]
 800bc5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc62:	61fb      	str	r3, [r7, #28]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	461a      	mov	r2, r3
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc70:	6979      	ldr	r1, [r7, #20]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	e841 2300 	strex	r3, r2, [r1]
 800bc78:	613b      	str	r3, [r7, #16]
   return(result);
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1e6      	bne.n	800bc4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2220      	movs	r2, #32
 800bc84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff fb09 	bl	800b2a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc92:	bf00      	nop
 800bc94:	3720      	adds	r7, #32
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b083      	sub	sp, #12
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bca2:	bf00      	nop
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bcae:	b084      	sub	sp, #16
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	f107 0014 	add.w	r0, r7, #20
 800bcbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	b004      	add	sp, #16
 800bcce:	4770      	bx	lr

0800bcd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcd8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bcdc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	43db      	mvns	r3, r3
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	4013      	ands	r3, r2
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	460b      	mov	r3, r1
 800bd10:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd20:	b084      	sub	sp, #16
 800bd22:	b480      	push	{r7}
 800bd24:	b083      	sub	sp, #12
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	f107 0014 	add.w	r0, r7, #20
 800bd2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	b004      	add	sp, #16
 800bd60:	4770      	bx	lr

0800bd62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b083      	sub	sp, #12
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bd96:	2300      	movs	r3, #0
 800bd98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bd9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd9e:	2b84      	cmp	r3, #132	; 0x84
 800bda0:	d005      	beq.n	800bdae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bda2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	4413      	add	r3, r2
 800bdaa:	3303      	adds	r3, #3
 800bdac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bdae:	68fb      	ldr	r3, [r7, #12]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdc2:	f3ef 8305 	mrs	r3, IPSR
 800bdc6:	607b      	str	r3, [r7, #4]
  return(result);
 800bdc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	bf14      	ite	ne
 800bdce:	2301      	movne	r3, #1
 800bdd0:	2300      	moveq	r3, #0
 800bdd2:	b2db      	uxtb	r3, r3
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde2:	b089      	sub	sp, #36	; 0x24
 800bde4:	af04      	add	r7, sp, #16
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d020      	beq.n	800be34 <osThreadCreate+0x54>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d01c      	beq.n	800be34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685c      	ldr	r4, [r3, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	691e      	ldr	r6, [r3, #16]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff ffbd 	bl	800bd8c <makeFreeRtosPriority>
 800be12:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be1c:	9202      	str	r2, [sp, #8]
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	9100      	str	r1, [sp, #0]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	4632      	mov	r2, r6
 800be26:	4629      	mov	r1, r5
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 ff1d 	bl	800cc68 <xTaskCreateStatic>
 800be2e:	4603      	mov	r3, r0
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	e01c      	b.n	800be6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685c      	ldr	r4, [r3, #4]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be40:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff ff9f 	bl	800bd8c <makeFreeRtosPriority>
 800be4e:	4602      	mov	r2, r0
 800be50:	f107 030c 	add.w	r3, r7, #12
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	9200      	str	r2, [sp, #0]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	4632      	mov	r2, r6
 800be5c:	4629      	mov	r1, r5
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 ff5f 	bl	800cd22 <xTaskCreate>
 800be64:	4603      	mov	r3, r0
 800be66:	2b01      	cmp	r3, #1
 800be68:	d001      	beq.n	800be6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	e000      	b.n	800be70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be6e:	68fb      	ldr	r3, [r7, #12]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <osDelay+0x16>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	e000      	b.n	800be90 <osDelay+0x18>
 800be8e:	2301      	movs	r3, #1
 800be90:	4618      	mov	r0, r3
 800be92:	f001 f87d 	bl	800cf90 <vTaskDelay>
  
  return osOK;
 800be96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00f      	beq.n	800bed2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d10a      	bne.n	800bece <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	2203      	movs	r2, #3
 800bebe:	9200      	str	r2, [sp, #0]
 800bec0:	2200      	movs	r2, #0
 800bec2:	2100      	movs	r1, #0
 800bec4:	2001      	movs	r0, #1
 800bec6:	f000 f9bd 	bl	800c244 <xQueueGenericCreateStatic>
 800beca:	4603      	mov	r3, r0
 800becc:	e016      	b.n	800befc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	e014      	b.n	800befc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d110      	bne.n	800befa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bed8:	2203      	movs	r2, #3
 800beda:	2100      	movs	r1, #0
 800bedc:	2001      	movs	r0, #1
 800bede:	f000 fa29 	bl	800c334 <xQueueGenericCreate>
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <osSemaphoreCreate+0x56>
 800beea:	2300      	movs	r3, #0
 800beec:	2200      	movs	r2, #0
 800beee:	2100      	movs	r1, #0
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f000 fa79 	bl	800c3e8 <xQueueGenericSend>
      return sema;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	e000      	b.n	800befc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800befa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bf18:	2380      	movs	r3, #128	; 0x80
 800bf1a:	e03a      	b.n	800bf92 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf26:	d103      	bne.n	800bf30 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2c:	60fb      	str	r3, [r7, #12]
 800bf2e:	e009      	b.n	800bf44 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d006      	beq.n	800bf44 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d101      	bne.n	800bf44 <osSemaphoreWait+0x40>
      ticks = 1;
 800bf40:	2301      	movs	r3, #1
 800bf42:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bf44:	f7ff ff3a 	bl	800bdbc <inHandlerMode>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d017      	beq.n	800bf7e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf4e:	f107 0308 	add.w	r3, r7, #8
 800bf52:	461a      	mov	r2, r3
 800bf54:	2100      	movs	r1, #0
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fcde 	bl	800c918 <xQueueReceiveFromISR>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d001      	beq.n	800bf66 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bf62:	23ff      	movs	r3, #255	; 0xff
 800bf64:	e015      	b.n	800bf92 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d011      	beq.n	800bf90 <osSemaphoreWait+0x8c>
 800bf6c:	4b0b      	ldr	r3, [pc, #44]	; (800bf9c <osSemaphoreWait+0x98>)
 800bf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	e008      	b.n	800bf90 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf7e:	68f9      	ldr	r1, [r7, #12]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fbbd 	bl	800c700 <xQueueSemaphoreTake>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d001      	beq.n	800bf90 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bf8c:	23ff      	movs	r3, #255	; 0xff
 800bf8e:	e000      	b.n	800bf92 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	e000ed04 	.word	0xe000ed04

0800bfa0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bfb0:	f7ff ff04 	bl	800bdbc <inHandlerMode>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d016      	beq.n	800bfe8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bfba:	f107 0308 	add.w	r3, r7, #8
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fb0f 	bl	800c5e4 <xQueueGiveFromISR>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d001      	beq.n	800bfd0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bfcc:	23ff      	movs	r3, #255	; 0xff
 800bfce:	e017      	b.n	800c000 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d013      	beq.n	800bffe <osSemaphoreRelease+0x5e>
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <osSemaphoreRelease+0x68>)
 800bfd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	e00a      	b.n	800bffe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bfe8:	2300      	movs	r3, #0
 800bfea:	2200      	movs	r2, #0
 800bfec:	2100      	movs	r1, #0
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f9fa 	bl	800c3e8 <xQueueGenericSend>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d001      	beq.n	800bffe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bffa:	23ff      	movs	r3, #255	; 0xff
 800bffc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bffe:	68fb      	ldr	r3, [r7, #12]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	e000ed04 	.word	0xe000ed04

0800c00c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f103 0208 	add.w	r2, r3, #8
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f04f 32ff 	mov.w	r2, #4294967295
 800c024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f103 0208 	add.w	r2, r3, #8
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f103 0208 	add.w	r2, r3, #8
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c066:	b480      	push	{r7}
 800c068:	b085      	sub	sp, #20
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	601a      	str	r2, [r3, #0]
}
 800c0a2:	bf00      	nop
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c4:	d103      	bne.n	800c0ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	e00c      	b.n	800c0e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e002      	b.n	800c0dc <vListInsert+0x2e>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d2f6      	bcs.n	800c0d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	601a      	str	r2, [r3, #0]
}
 800c114:	bf00      	nop
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	6892      	ldr	r2, [r2, #8]
 800c136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	6852      	ldr	r2, [r2, #4]
 800c140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d103      	bne.n	800c154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	689a      	ldr	r2, [r3, #8]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	1e5a      	subs	r2, r3, #1
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c19e:	f001 fceb 	bl	800db78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1ae:	fb01 f303 	mul.w	r3, r1, r3
 800c1b2:	441a      	add	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	68f9      	ldr	r1, [r7, #12]
 800c1d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1d4:	fb01 f303 	mul.w	r3, r1, r3
 800c1d8:	441a      	add	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	22ff      	movs	r2, #255	; 0xff
 800c1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	22ff      	movs	r2, #255	; 0xff
 800c1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d114      	bne.n	800c21e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	691b      	ldr	r3, [r3, #16]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d01a      	beq.n	800c232 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	3310      	adds	r3, #16
 800c200:	4618      	mov	r0, r3
 800c202:	f001 f8db 	bl	800d3bc <xTaskRemoveFromEventList>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d012      	beq.n	800c232 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c20c:	4b0c      	ldr	r3, [pc, #48]	; (800c240 <xQueueGenericReset+0xcc>)
 800c20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	e009      	b.n	800c232 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3310      	adds	r3, #16
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fef2 	bl	800c00c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3324      	adds	r3, #36	; 0x24
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff feed 	bl	800c00c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c232:	f001 fcd1 	bl	800dbd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c236:	2301      	movs	r3, #1
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	e000ed04 	.word	0xe000ed04

0800c244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08e      	sub	sp, #56	; 0x38
 800c248:	af02      	add	r7, sp, #8
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10a      	bne.n	800c28a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d002      	beq.n	800c296 <xQueueGenericCreateStatic+0x52>
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d001      	beq.n	800c29a <xQueueGenericCreateStatic+0x56>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueGenericCreateStatic+0x58>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	623b      	str	r3, [r7, #32]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d102      	bne.n	800c2c2 <xQueueGenericCreateStatic+0x7e>
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <xQueueGenericCreateStatic+0x82>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e000      	b.n	800c2c8 <xQueueGenericCreateStatic+0x84>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	61fb      	str	r3, [r7, #28]
}
 800c2de:	bf00      	nop
 800c2e0:	e7fe      	b.n	800c2e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2e2:	2348      	movs	r3, #72	; 0x48
 800c2e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b48      	cmp	r3, #72	; 0x48
 800c2ea:	d00a      	beq.n	800c302 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	61bb      	str	r3, [r7, #24]
}
 800c2fe:	bf00      	nop
 800c300:	e7fe      	b.n	800c300 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c302:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00d      	beq.n	800c32a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c316:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	4613      	mov	r3, r2
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	68b9      	ldr	r1, [r7, #8]
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 f83f 	bl	800c3a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3730      	adds	r7, #48	; 0x30
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08a      	sub	sp, #40	; 0x28
 800c338:	af02      	add	r7, sp, #8
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	4613      	mov	r3, r2
 800c340:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10a      	bne.n	800c35e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	613b      	str	r3, [r7, #16]
}
 800c35a:	bf00      	nop
 800c35c:	e7fe      	b.n	800c35c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	fb02 f303 	mul.w	r3, r2, r3
 800c366:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	3348      	adds	r3, #72	; 0x48
 800c36c:	4618      	mov	r0, r3
 800c36e:	f001 fcf5 	bl	800dd5c <pvPortMalloc>
 800c372:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d011      	beq.n	800c39e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	3348      	adds	r3, #72	; 0x48
 800c382:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c38c:	79fa      	ldrb	r2, [r7, #7]
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	4613      	mov	r3, r2
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	68b9      	ldr	r1, [r7, #8]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f000 f805 	bl	800c3a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c39e:	69bb      	ldr	r3, [r7, #24]
	}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3720      	adds	r7, #32
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d103      	bne.n	800c3c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e002      	b.n	800c3ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	69b8      	ldr	r0, [r7, #24]
 800c3da:	f7ff fecb 	bl	800c174 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08e      	sub	sp, #56	; 0x38
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <xQueueGenericSend+0x32>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d103      	bne.n	800c428 <xQueueGenericSend+0x40>
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <xQueueGenericSend+0x44>
 800c428:	2301      	movs	r3, #1
 800c42a:	e000      	b.n	800c42e <xQueueGenericSend+0x46>
 800c42c:	2300      	movs	r3, #0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10a      	bne.n	800c448 <xQueueGenericSend+0x60>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c444:	bf00      	nop
 800c446:	e7fe      	b.n	800c446 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d103      	bne.n	800c456 <xQueueGenericSend+0x6e>
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c452:	2b01      	cmp	r3, #1
 800c454:	d101      	bne.n	800c45a <xQueueGenericSend+0x72>
 800c456:	2301      	movs	r3, #1
 800c458:	e000      	b.n	800c45c <xQueueGenericSend+0x74>
 800c45a:	2300      	movs	r3, #0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10a      	bne.n	800c476 <xQueueGenericSend+0x8e>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	623b      	str	r3, [r7, #32]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c476:	f001 f8e7 	bl	800d648 <xTaskGetSchedulerState>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <xQueueGenericSend+0x9e>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <xQueueGenericSend+0xa2>
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <xQueueGenericSend+0xa4>
 800c48a:	2300      	movs	r3, #0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10a      	bne.n	800c4a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	61fb      	str	r3, [r7, #28]
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a6:	f001 fb67 	bl	800db78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d302      	bcc.n	800c4bc <xQueueGenericSend+0xd4>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d129      	bne.n	800c510 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4c2:	f000 fac1 	bl	800ca48 <prvCopyDataToQueue>
 800c4c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d010      	beq.n	800c4f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d2:	3324      	adds	r3, #36	; 0x24
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 ff71 	bl	800d3bc <xTaskRemoveFromEventList>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d013      	beq.n	800c508 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c4e0:	4b3f      	ldr	r3, [pc, #252]	; (800c5e0 <xQueueGenericSend+0x1f8>)
 800c4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	e00a      	b.n	800c508 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c4f8:	4b39      	ldr	r3, [pc, #228]	; (800c5e0 <xQueueGenericSend+0x1f8>)
 800c4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4fe:	601a      	str	r2, [r3, #0]
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c508:	f001 fb66 	bl	800dbd8 <vPortExitCritical>
				return pdPASS;
 800c50c:	2301      	movs	r3, #1
 800c50e:	e063      	b.n	800c5d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d103      	bne.n	800c51e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c516:	f001 fb5f 	bl	800dbd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	e05c      	b.n	800c5d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c524:	f107 0314 	add.w	r3, r7, #20
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 ffa9 	bl	800d480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c52e:	2301      	movs	r3, #1
 800c530:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c532:	f001 fb51 	bl	800dbd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c536:	f000 fd5f 	bl	800cff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c53a:	f001 fb1d 	bl	800db78 <vPortEnterCritical>
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c544:	b25b      	sxtb	r3, r3
 800c546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54a:	d103      	bne.n	800c554 <xQueueGenericSend+0x16c>
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	2200      	movs	r2, #0
 800c550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c55a:	b25b      	sxtb	r3, r3
 800c55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c560:	d103      	bne.n	800c56a <xQueueGenericSend+0x182>
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c56a:	f001 fb35 	bl	800dbd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c56e:	1d3a      	adds	r2, r7, #4
 800c570:	f107 0314 	add.w	r3, r7, #20
 800c574:	4611      	mov	r1, r2
 800c576:	4618      	mov	r0, r3
 800c578:	f000 ff98 	bl	800d4ac <xTaskCheckForTimeOut>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d124      	bne.n	800c5cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c584:	f000 fb58 	bl	800cc38 <prvIsQueueFull>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d018      	beq.n	800c5c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	3310      	adds	r3, #16
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f000 feec 	bl	800d374 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c59e:	f000 fae3 	bl	800cb68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5a2:	f000 fd37 	bl	800d014 <xTaskResumeAll>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f47f af7c 	bne.w	800c4a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c5ae:	4b0c      	ldr	r3, [pc, #48]	; (800c5e0 <xQueueGenericSend+0x1f8>)
 800c5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	e772      	b.n	800c4a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c5c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5c2:	f000 fad1 	bl	800cb68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5c6:	f000 fd25 	bl	800d014 <xTaskResumeAll>
 800c5ca:	e76c      	b.n	800c4a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c5cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5ce:	f000 facb 	bl	800cb68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5d2:	f000 fd1f 	bl	800d014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c5d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3738      	adds	r7, #56	; 0x38
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	e000ed04 	.word	0xe000ed04

0800c5e4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08e      	sub	sp, #56	; 0x38
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10a      	bne.n	800c60e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	623b      	str	r3, [r7, #32]
}
 800c60a:	bf00      	nop
 800c60c:	e7fe      	b.n	800c60c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <xQueueGiveFromISR+0x48>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	61fb      	str	r3, [r7, #28]
}
 800c628:	bf00      	nop
 800c62a:	e7fe      	b.n	800c62a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d103      	bne.n	800c63c <xQueueGiveFromISR+0x58>
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d101      	bne.n	800c640 <xQueueGiveFromISR+0x5c>
 800c63c:	2301      	movs	r3, #1
 800c63e:	e000      	b.n	800c642 <xQueueGiveFromISR+0x5e>
 800c640:	2300      	movs	r3, #0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <xQueueGiveFromISR+0x78>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	61bb      	str	r3, [r7, #24]
}
 800c658:	bf00      	nop
 800c65a:	e7fe      	b.n	800c65a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c65c:	f001 fb3e 	bl	800dcdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c660:	f3ef 8211 	mrs	r2, BASEPRI
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	617a      	str	r2, [r7, #20]
 800c676:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c678:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c67a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c680:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c688:	429a      	cmp	r2, r3
 800c68a:	d22b      	bcs.n	800c6e4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c69e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d112      	bne.n	800c6ce <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d016      	beq.n	800c6de <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	3324      	adds	r3, #36	; 0x24
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fe81 	bl	800d3bc <xTaskRemoveFromEventList>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00e      	beq.n	800c6de <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00b      	beq.n	800c6de <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	601a      	str	r2, [r3, #0]
 800c6cc:	e007      	b.n	800c6de <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	b25a      	sxtb	r2, r3
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800c6e2:	e001      	b.n	800c6e8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c6f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3738      	adds	r7, #56	; 0x38
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
	...

0800c700 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08e      	sub	sp, #56	; 0x38
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c70a:	2300      	movs	r3, #0
 800c70c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c712:	2300      	movs	r3, #0
 800c714:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10a      	bne.n	800c732 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	623b      	str	r3, [r7, #32]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00a      	beq.n	800c750 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	61fb      	str	r3, [r7, #28]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c750:	f000 ff7a 	bl	800d648 <xTaskGetSchedulerState>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d102      	bne.n	800c760 <xQueueSemaphoreTake+0x60>
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <xQueueSemaphoreTake+0x64>
 800c760:	2301      	movs	r3, #1
 800c762:	e000      	b.n	800c766 <xQueueSemaphoreTake+0x66>
 800c764:	2300      	movs	r3, #0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	61bb      	str	r3, [r7, #24]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c780:	f001 f9fa 	bl	800db78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c788:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d024      	beq.n	800c7da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	1e5a      	subs	r2, r3, #1
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d104      	bne.n	800c7aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c7a0:	f001 f8fa 	bl	800d998 <pvTaskIncrementMutexHeldCount>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00f      	beq.n	800c7d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	3310      	adds	r3, #16
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fe00 	bl	800d3bc <xTaskRemoveFromEventList>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d007      	beq.n	800c7d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c7c2:	4b54      	ldr	r3, [pc, #336]	; (800c914 <xQueueSemaphoreTake+0x214>)
 800c7c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c8:	601a      	str	r2, [r3, #0]
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c7d2:	f001 fa01 	bl	800dbd8 <vPortExitCritical>
				return pdPASS;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e097      	b.n	800c90a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d111      	bne.n	800c804 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00a      	beq.n	800c7fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	617b      	str	r3, [r7, #20]
}
 800c7f8:	bf00      	nop
 800c7fa:	e7fe      	b.n	800c7fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c7fc:	f001 f9ec 	bl	800dbd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c800:	2300      	movs	r3, #0
 800c802:	e082      	b.n	800c90a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c806:	2b00      	cmp	r3, #0
 800c808:	d106      	bne.n	800c818 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c80a:	f107 030c 	add.w	r3, r7, #12
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 fe36 	bl	800d480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c814:	2301      	movs	r3, #1
 800c816:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c818:	f001 f9de 	bl	800dbd8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c81c:	f000 fbec 	bl	800cff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c820:	f001 f9aa 	bl	800db78 <vPortEnterCritical>
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c82a:	b25b      	sxtb	r3, r3
 800c82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c830:	d103      	bne.n	800c83a <xQueueSemaphoreTake+0x13a>
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	2200      	movs	r2, #0
 800c836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c840:	b25b      	sxtb	r3, r3
 800c842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c846:	d103      	bne.n	800c850 <xQueueSemaphoreTake+0x150>
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c850:	f001 f9c2 	bl	800dbd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c854:	463a      	mov	r2, r7
 800c856:	f107 030c 	add.w	r3, r7, #12
 800c85a:	4611      	mov	r1, r2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 fe25 	bl	800d4ac <xTaskCheckForTimeOut>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d132      	bne.n	800c8ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c86a:	f000 f9cf 	bl	800cc0c <prvIsQueueEmpty>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d026      	beq.n	800c8c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d109      	bne.n	800c890 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c87c:	f001 f97c 	bl	800db78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 fefd 	bl	800d684 <xTaskPriorityInherit>
 800c88a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c88c:	f001 f9a4 	bl	800dbd8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	3324      	adds	r3, #36	; 0x24
 800c894:	683a      	ldr	r2, [r7, #0]
 800c896:	4611      	mov	r1, r2
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 fd6b 	bl	800d374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c89e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8a0:	f000 f962 	bl	800cb68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8a4:	f000 fbb6 	bl	800d014 <xTaskResumeAll>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f47f af68 	bne.w	800c780 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c8b0:	4b18      	ldr	r3, [pc, #96]	; (800c914 <xQueueSemaphoreTake+0x214>)
 800c8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	e75e      	b.n	800c780 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c8c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8c4:	f000 f950 	bl	800cb68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8c8:	f000 fba4 	bl	800d014 <xTaskResumeAll>
 800c8cc:	e758      	b.n	800c780 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c8ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8d0:	f000 f94a 	bl	800cb68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8d4:	f000 fb9e 	bl	800d014 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8da:	f000 f997 	bl	800cc0c <prvIsQueueEmpty>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f43f af4d 	beq.w	800c780 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00d      	beq.n	800c908 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c8ec:	f001 f944 	bl	800db78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c8f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8f2:	f000 f891 	bl	800ca18 <prvGetDisinheritPriorityAfterTimeout>
 800c8f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 ffbc 	bl	800d87c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c904:	f001 f968 	bl	800dbd8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c908:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3738      	adds	r7, #56	; 0x38
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	e000ed04 	.word	0xe000ed04

0800c918 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08e      	sub	sp, #56	; 0x38
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	623b      	str	r3, [r7, #32]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <xQueueReceiveFromISR+0x3a>
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <xQueueReceiveFromISR+0x3e>
 800c952:	2301      	movs	r3, #1
 800c954:	e000      	b.n	800c958 <xQueueReceiveFromISR+0x40>
 800c956:	2300      	movs	r3, #0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	61fb      	str	r3, [r7, #28]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c972:	f001 f9b3 	bl	800dcdc <vPortValidateInterruptPriority>
	__asm volatile
 800c976:	f3ef 8211 	mrs	r2, BASEPRI
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	61ba      	str	r2, [r7, #24]
 800c98c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c98e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c990:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c996:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d02f      	beq.n	800c9fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ac:	f000 f8b6 	bl	800cb1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	1e5a      	subs	r2, r3, #1
 800c9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c9b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c0:	d112      	bne.n	800c9e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d016      	beq.n	800c9f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	3310      	adds	r3, #16
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 fcf4 	bl	800d3bc <xTaskRemoveFromEventList>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00e      	beq.n	800c9f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00b      	beq.n	800c9f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	e007      	b.n	800c9f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	b25a      	sxtb	r2, r3
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c9fc:	e001      	b.n	800ca02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	637b      	str	r3, [r7, #52]	; 0x34
 800ca02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca04:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f383 8811 	msr	BASEPRI, r3
}
 800ca0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3738      	adds	r7, #56	; 0x38
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d006      	beq.n	800ca36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f1c3 0307 	rsb	r3, r3, #7
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	e001      	b.n	800ca3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ca36:	2300      	movs	r3, #0
 800ca38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
	}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca54:	2300      	movs	r3, #0
 800ca56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10d      	bne.n	800ca82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d14d      	bne.n	800cb0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 fe7c 	bl	800d770 <xTaskPriorityDisinherit>
 800ca78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	609a      	str	r2, [r3, #8]
 800ca80:	e043      	b.n	800cb0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d119      	bne.n	800cabc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6858      	ldr	r0, [r3, #4]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca90:	461a      	mov	r2, r3
 800ca92:	68b9      	ldr	r1, [r7, #8]
 800ca94:	f001 fbb4 	bl	800e200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa0:	441a      	add	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d32b      	bcc.n	800cb0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	605a      	str	r2, [r3, #4]
 800caba:	e026      	b.n	800cb0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68d8      	ldr	r0, [r3, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac4:	461a      	mov	r2, r3
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	f001 fb9a 	bl	800e200 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	68da      	ldr	r2, [r3, #12]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad4:	425b      	negs	r3, r3
 800cad6:	441a      	add	r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	68da      	ldr	r2, [r3, #12]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d207      	bcs.n	800caf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	689a      	ldr	r2, [r3, #8]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf0:	425b      	negs	r3, r3
 800caf2:	441a      	add	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d105      	bne.n	800cb0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d002      	beq.n	800cb0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	3b01      	subs	r3, #1
 800cb08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	1c5a      	adds	r2, r3, #1
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cb12:	697b      	ldr	r3, [r7, #20]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d018      	beq.n	800cb60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb36:	441a      	add	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68da      	ldr	r2, [r3, #12]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d303      	bcc.n	800cb50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68d9      	ldr	r1, [r3, #12]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6838      	ldr	r0, [r7, #0]
 800cb5c:	f001 fb50 	bl	800e200 <memcpy>
	}
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb70:	f001 f802 	bl	800db78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb7c:	e011      	b.n	800cba2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d012      	beq.n	800cbac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3324      	adds	r3, #36	; 0x24
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 fc16 	bl	800d3bc <xTaskRemoveFromEventList>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb96:	f000 fceb 	bl	800d570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	dce9      	bgt.n	800cb7e <prvUnlockQueue+0x16>
 800cbaa:	e000      	b.n	800cbae <prvUnlockQueue+0x46>
					break;
 800cbac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	22ff      	movs	r2, #255	; 0xff
 800cbb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cbb6:	f001 f80f 	bl	800dbd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cbba:	f000 ffdd 	bl	800db78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbc6:	e011      	b.n	800cbec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d012      	beq.n	800cbf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3310      	adds	r3, #16
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 fbf1 	bl	800d3bc <xTaskRemoveFromEventList>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cbe0:	f000 fcc6 	bl	800d570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cbe4:	7bbb      	ldrb	r3, [r7, #14]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dce9      	bgt.n	800cbc8 <prvUnlockQueue+0x60>
 800cbf4:	e000      	b.n	800cbf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cbf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	22ff      	movs	r2, #255	; 0xff
 800cbfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cc00:	f000 ffea 	bl	800dbd8 <vPortExitCritical>
}
 800cc04:	bf00      	nop
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc14:	f000 ffb0 	bl	800db78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e001      	b.n	800cc2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc2a:	f000 ffd5 	bl	800dbd8 <vPortExitCritical>

	return xReturn;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc40:	f000 ff9a 	bl	800db78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d102      	bne.n	800cc56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc50:	2301      	movs	r3, #1
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	e001      	b.n	800cc5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc56:	2300      	movs	r3, #0
 800cc58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc5a:	f000 ffbd 	bl	800dbd8 <vPortExitCritical>

	return xReturn;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08e      	sub	sp, #56	; 0x38
 800cc6c:	af04      	add	r7, sp, #16
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10a      	bne.n	800cc92 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	623b      	str	r3, [r7, #32]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10a      	bne.n	800ccae <xTaskCreateStatic+0x46>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	61fb      	str	r3, [r7, #28]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccae:	2354      	movs	r3, #84	; 0x54
 800ccb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b54      	cmp	r3, #84	; 0x54
 800ccb6:	d00a      	beq.n	800ccce <xTaskCreateStatic+0x66>
	__asm volatile
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	61bb      	str	r3, [r7, #24]
}
 800ccca:	bf00      	nop
 800cccc:	e7fe      	b.n	800cccc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ccce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d01e      	beq.n	800cd14 <xTaskCreateStatic+0xac>
 800ccd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01b      	beq.n	800cd14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cce4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce8:	2202      	movs	r2, #2
 800ccea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9303      	str	r3, [sp, #12]
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	9302      	str	r3, [sp, #8]
 800ccf6:	f107 0314 	add.w	r3, r7, #20
 800ccfa:	9301      	str	r3, [sp, #4]
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	68b9      	ldr	r1, [r7, #8]
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f000 f850 	bl	800cdac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd0e:	f000 f8d5 	bl	800cebc <prvAddNewTaskToReadyList>
 800cd12:	e001      	b.n	800cd18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd18:	697b      	ldr	r3, [r7, #20]
	}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3728      	adds	r7, #40	; 0x28
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b08c      	sub	sp, #48	; 0x30
 800cd26:	af04      	add	r7, sp, #16
 800cd28:	60f8      	str	r0, [r7, #12]
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	603b      	str	r3, [r7, #0]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd32:	88fb      	ldrh	r3, [r7, #6]
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4618      	mov	r0, r3
 800cd38:	f001 f810 	bl	800dd5c <pvPortMalloc>
 800cd3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00e      	beq.n	800cd62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd44:	2054      	movs	r0, #84	; 0x54
 800cd46:	f001 f809 	bl	800dd5c <pvPortMalloc>
 800cd4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d003      	beq.n	800cd5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	697a      	ldr	r2, [r7, #20]
 800cd56:	631a      	str	r2, [r3, #48]	; 0x30
 800cd58:	e005      	b.n	800cd66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd5a:	6978      	ldr	r0, [r7, #20]
 800cd5c:	f001 f8ca 	bl	800def4 <vPortFree>
 800cd60:	e001      	b.n	800cd66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d017      	beq.n	800cd9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd74:	88fa      	ldrh	r2, [r7, #6]
 800cd76:	2300      	movs	r3, #0
 800cd78:	9303      	str	r3, [sp, #12]
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	9302      	str	r3, [sp, #8]
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f000 f80e 	bl	800cdac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd90:	69f8      	ldr	r0, [r7, #28]
 800cd92:	f000 f893 	bl	800cebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd96:	2301      	movs	r3, #1
 800cd98:	61bb      	str	r3, [r7, #24]
 800cd9a:	e002      	b.n	800cda2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cda0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cda2:	69bb      	ldr	r3, [r7, #24]
	}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3720      	adds	r7, #32
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	f023 0307 	bic.w	r3, r3, #7
 800cdd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	f003 0307 	and.w	r3, r3, #7
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00a      	beq.n	800cdf4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	617b      	str	r3, [r7, #20]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01f      	beq.n	800ce3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	61fb      	str	r3, [r7, #28]
 800cdfe:	e012      	b.n	800ce26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce00:	68ba      	ldr	r2, [r7, #8]
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	4413      	add	r3, r2
 800ce06:	7819      	ldrb	r1, [r3, #0]
 800ce08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	3334      	adds	r3, #52	; 0x34
 800ce10:	460a      	mov	r2, r1
 800ce12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	4413      	add	r3, r2
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d006      	beq.n	800ce2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	3301      	adds	r3, #1
 800ce24:	61fb      	str	r3, [r7, #28]
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	2b0f      	cmp	r3, #15
 800ce2a:	d9e9      	bls.n	800ce00 <prvInitialiseNewTask+0x54>
 800ce2c:	e000      	b.n	800ce30 <prvInitialiseNewTask+0x84>
			{
				break;
 800ce2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce38:	e003      	b.n	800ce42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce44:	2b06      	cmp	r3, #6
 800ce46:	d901      	bls.n	800ce4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce48:	2306      	movs	r3, #6
 800ce4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ce58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	3304      	adds	r3, #4
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff f8f2 	bl	800c04c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6a:	3318      	adds	r3, #24
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff f8ed 	bl	800c04c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	f1c3 0207 	rsb	r2, r3, #7
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	68f9      	ldr	r1, [r7, #12]
 800ce9a:	69b8      	ldr	r0, [r7, #24]
 800ce9c:	f000 fdf6 	bl	800da8c <pxPortInitialiseStack>
 800cea0:	4602      	mov	r2, r0
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ceb2:	bf00      	nop
 800ceb4:	3720      	adds	r7, #32
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cec4:	f000 fe58 	bl	800db78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cec8:	4b2a      	ldr	r3, [pc, #168]	; (800cf74 <prvAddNewTaskToReadyList+0xb8>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	3301      	adds	r3, #1
 800cece:	4a29      	ldr	r2, [pc, #164]	; (800cf74 <prvAddNewTaskToReadyList+0xb8>)
 800ced0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ced2:	4b29      	ldr	r3, [pc, #164]	; (800cf78 <prvAddNewTaskToReadyList+0xbc>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d109      	bne.n	800ceee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ceda:	4a27      	ldr	r2, [pc, #156]	; (800cf78 <prvAddNewTaskToReadyList+0xbc>)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cee0:	4b24      	ldr	r3, [pc, #144]	; (800cf74 <prvAddNewTaskToReadyList+0xb8>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d110      	bne.n	800cf0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cee8:	f000 fb4e 	bl	800d588 <prvInitialiseTaskLists>
 800ceec:	e00d      	b.n	800cf0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ceee:	4b23      	ldr	r3, [pc, #140]	; (800cf7c <prvAddNewTaskToReadyList+0xc0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d109      	bne.n	800cf0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cef6:	4b20      	ldr	r3, [pc, #128]	; (800cf78 <prvAddNewTaskToReadyList+0xbc>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d802      	bhi.n	800cf0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf04:	4a1c      	ldr	r2, [pc, #112]	; (800cf78 <prvAddNewTaskToReadyList+0xbc>)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf0a:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <prvAddNewTaskToReadyList+0xc4>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	4a1b      	ldr	r2, [pc, #108]	; (800cf80 <prvAddNewTaskToReadyList+0xc4>)
 800cf12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	2201      	movs	r2, #1
 800cf1a:	409a      	lsls	r2, r3
 800cf1c:	4b19      	ldr	r3, [pc, #100]	; (800cf84 <prvAddNewTaskToReadyList+0xc8>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	4a18      	ldr	r2, [pc, #96]	; (800cf84 <prvAddNewTaskToReadyList+0xc8>)
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4a15      	ldr	r2, [pc, #84]	; (800cf88 <prvAddNewTaskToReadyList+0xcc>)
 800cf34:	441a      	add	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	3304      	adds	r3, #4
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	f7ff f892 	bl	800c066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf42:	f000 fe49 	bl	800dbd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf46:	4b0d      	ldr	r3, [pc, #52]	; (800cf7c <prvAddNewTaskToReadyList+0xc0>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00e      	beq.n	800cf6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf4e:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <prvAddNewTaskToReadyList+0xbc>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d207      	bcs.n	800cf6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf5c:	4b0b      	ldr	r3, [pc, #44]	; (800cf8c <prvAddNewTaskToReadyList+0xd0>)
 800cf5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20000cc8 	.word	0x20000cc8
 800cf78:	20000bcc 	.word	0x20000bcc
 800cf7c:	20000cd4 	.word	0x20000cd4
 800cf80:	20000ce4 	.word	0x20000ce4
 800cf84:	20000cd0 	.word	0x20000cd0
 800cf88:	20000bd0 	.word	0x20000bd0
 800cf8c:	e000ed04 	.word	0xe000ed04

0800cf90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d017      	beq.n	800cfd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cfa2:	4b13      	ldr	r3, [pc, #76]	; (800cff0 <vTaskDelay+0x60>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <vTaskDelay+0x30>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	60bb      	str	r3, [r7, #8]
}
 800cfbc:	bf00      	nop
 800cfbe:	e7fe      	b.n	800cfbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cfc0:	f000 f81a 	bl	800cff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fcfa 	bl	800d9c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cfcc:	f000 f822 	bl	800d014 <xTaskResumeAll>
 800cfd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d107      	bne.n	800cfe8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cfd8:	4b06      	ldr	r3, [pc, #24]	; (800cff4 <vTaskDelay+0x64>)
 800cfda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfe8:	bf00      	nop
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	20000cec 	.word	0x20000cec
 800cff4:	e000ed04 	.word	0xe000ed04

0800cff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cff8:	b480      	push	{r7}
 800cffa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cffc:	4b04      	ldr	r3, [pc, #16]	; (800d010 <vTaskSuspendAll+0x18>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3301      	adds	r3, #1
 800d002:	4a03      	ldr	r2, [pc, #12]	; (800d010 <vTaskSuspendAll+0x18>)
 800d004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d006:	bf00      	nop
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	20000cec 	.word	0x20000cec

0800d014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d01e:	2300      	movs	r3, #0
 800d020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d022:	4b41      	ldr	r3, [pc, #260]	; (800d128 <xTaskResumeAll+0x114>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10a      	bne.n	800d040 <xTaskResumeAll+0x2c>
	__asm volatile
 800d02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	603b      	str	r3, [r7, #0]
}
 800d03c:	bf00      	nop
 800d03e:	e7fe      	b.n	800d03e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d040:	f000 fd9a 	bl	800db78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d044:	4b38      	ldr	r3, [pc, #224]	; (800d128 <xTaskResumeAll+0x114>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3b01      	subs	r3, #1
 800d04a:	4a37      	ldr	r2, [pc, #220]	; (800d128 <xTaskResumeAll+0x114>)
 800d04c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d04e:	4b36      	ldr	r3, [pc, #216]	; (800d128 <xTaskResumeAll+0x114>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d161      	bne.n	800d11a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d056:	4b35      	ldr	r3, [pc, #212]	; (800d12c <xTaskResumeAll+0x118>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d05d      	beq.n	800d11a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d05e:	e02e      	b.n	800d0be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d060:	4b33      	ldr	r3, [pc, #204]	; (800d130 <xTaskResumeAll+0x11c>)
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3318      	adds	r3, #24
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7ff f857 	bl	800c120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	3304      	adds	r3, #4
 800d076:	4618      	mov	r0, r3
 800d078:	f7ff f852 	bl	800c120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d080:	2201      	movs	r2, #1
 800d082:	409a      	lsls	r2, r3
 800d084:	4b2b      	ldr	r3, [pc, #172]	; (800d134 <xTaskResumeAll+0x120>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4313      	orrs	r3, r2
 800d08a:	4a2a      	ldr	r2, [pc, #168]	; (800d134 <xTaskResumeAll+0x120>)
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4a27      	ldr	r2, [pc, #156]	; (800d138 <xTaskResumeAll+0x124>)
 800d09c:	441a      	add	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	f7fe ffde 	bl	800c066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ae:	4b23      	ldr	r3, [pc, #140]	; (800d13c <xTaskResumeAll+0x128>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d302      	bcc.n	800d0be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d0b8:	4b21      	ldr	r3, [pc, #132]	; (800d140 <xTaskResumeAll+0x12c>)
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0be:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <xTaskResumeAll+0x11c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1cc      	bne.n	800d060 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0cc:	f000 fa9c 	bl	800d608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0d0:	4b1c      	ldr	r3, [pc, #112]	; (800d144 <xTaskResumeAll+0x130>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d010      	beq.n	800d0fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0dc:	f000 f836 	bl	800d14c <xTaskIncrementTick>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d0e6:	4b16      	ldr	r3, [pc, #88]	; (800d140 <xTaskResumeAll+0x12c>)
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1f1      	bne.n	800d0dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d0f8:	4b12      	ldr	r3, [pc, #72]	; (800d144 <xTaskResumeAll+0x130>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0fe:	4b10      	ldr	r3, [pc, #64]	; (800d140 <xTaskResumeAll+0x12c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d009      	beq.n	800d11a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d106:	2301      	movs	r3, #1
 800d108:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d10a:	4b0f      	ldr	r3, [pc, #60]	; (800d148 <xTaskResumeAll+0x134>)
 800d10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d11a:	f000 fd5d 	bl	800dbd8 <vPortExitCritical>

	return xAlreadyYielded;
 800d11e:	68bb      	ldr	r3, [r7, #8]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	20000cec 	.word	0x20000cec
 800d12c:	20000cc8 	.word	0x20000cc8
 800d130:	20000c8c 	.word	0x20000c8c
 800d134:	20000cd0 	.word	0x20000cd0
 800d138:	20000bd0 	.word	0x20000bd0
 800d13c:	20000bcc 	.word	0x20000bcc
 800d140:	20000cdc 	.word	0x20000cdc
 800d144:	20000cd8 	.word	0x20000cd8
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d156:	4b4e      	ldr	r3, [pc, #312]	; (800d290 <xTaskIncrementTick+0x144>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f040 808e 	bne.w	800d27c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d160:	4b4c      	ldr	r3, [pc, #304]	; (800d294 <xTaskIncrementTick+0x148>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3301      	adds	r3, #1
 800d166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d168:	4a4a      	ldr	r2, [pc, #296]	; (800d294 <xTaskIncrementTick+0x148>)
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d120      	bne.n	800d1b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d174:	4b48      	ldr	r3, [pc, #288]	; (800d298 <xTaskIncrementTick+0x14c>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00a      	beq.n	800d194 <xTaskIncrementTick+0x48>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	603b      	str	r3, [r7, #0]
}
 800d190:	bf00      	nop
 800d192:	e7fe      	b.n	800d192 <xTaskIncrementTick+0x46>
 800d194:	4b40      	ldr	r3, [pc, #256]	; (800d298 <xTaskIncrementTick+0x14c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	4b40      	ldr	r3, [pc, #256]	; (800d29c <xTaskIncrementTick+0x150>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a3e      	ldr	r2, [pc, #248]	; (800d298 <xTaskIncrementTick+0x14c>)
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	4a3e      	ldr	r2, [pc, #248]	; (800d29c <xTaskIncrementTick+0x150>)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6013      	str	r3, [r2, #0]
 800d1a8:	4b3d      	ldr	r3, [pc, #244]	; (800d2a0 <xTaskIncrementTick+0x154>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	4a3c      	ldr	r2, [pc, #240]	; (800d2a0 <xTaskIncrementTick+0x154>)
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	f000 fa29 	bl	800d608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1b6:	4b3b      	ldr	r3, [pc, #236]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d348      	bcc.n	800d252 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1c0:	4b35      	ldr	r3, [pc, #212]	; (800d298 <xTaskIncrementTick+0x14c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d104      	bne.n	800d1d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1ca:	4b36      	ldr	r3, [pc, #216]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d0:	601a      	str	r2, [r3, #0]
					break;
 800d1d2:	e03e      	b.n	800d252 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d4:	4b30      	ldr	r3, [pc, #192]	; (800d298 <xTaskIncrementTick+0x14c>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d203      	bcs.n	800d1f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1ec:	4a2d      	ldr	r2, [pc, #180]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1f2:	e02e      	b.n	800d252 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe ff91 	bl	800c120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d202:	2b00      	cmp	r3, #0
 800d204:	d004      	beq.n	800d210 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	3318      	adds	r3, #24
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fe ff88 	bl	800c120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d214:	2201      	movs	r2, #1
 800d216:	409a      	lsls	r2, r3
 800d218:	4b23      	ldr	r3, [pc, #140]	; (800d2a8 <xTaskIncrementTick+0x15c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	4a22      	ldr	r2, [pc, #136]	; (800d2a8 <xTaskIncrementTick+0x15c>)
 800d220:	6013      	str	r3, [r2, #0]
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d226:	4613      	mov	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4a1f      	ldr	r2, [pc, #124]	; (800d2ac <xTaskIncrementTick+0x160>)
 800d230:	441a      	add	r2, r3
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	3304      	adds	r3, #4
 800d236:	4619      	mov	r1, r3
 800d238:	4610      	mov	r0, r2
 800d23a:	f7fe ff14 	bl	800c066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d242:	4b1b      	ldr	r3, [pc, #108]	; (800d2b0 <xTaskIncrementTick+0x164>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d248:	429a      	cmp	r2, r3
 800d24a:	d3b9      	bcc.n	800d1c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d24c:	2301      	movs	r3, #1
 800d24e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d250:	e7b6      	b.n	800d1c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d252:	4b17      	ldr	r3, [pc, #92]	; (800d2b0 <xTaskIncrementTick+0x164>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d258:	4914      	ldr	r1, [pc, #80]	; (800d2ac <xTaskIncrementTick+0x160>)
 800d25a:	4613      	mov	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	440b      	add	r3, r1
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b01      	cmp	r3, #1
 800d268:	d901      	bls.n	800d26e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d26a:	2301      	movs	r3, #1
 800d26c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d26e:	4b11      	ldr	r3, [pc, #68]	; (800d2b4 <xTaskIncrementTick+0x168>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d007      	beq.n	800d286 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d276:	2301      	movs	r3, #1
 800d278:	617b      	str	r3, [r7, #20]
 800d27a:	e004      	b.n	800d286 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d27c:	4b0e      	ldr	r3, [pc, #56]	; (800d2b8 <xTaskIncrementTick+0x16c>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3301      	adds	r3, #1
 800d282:	4a0d      	ldr	r2, [pc, #52]	; (800d2b8 <xTaskIncrementTick+0x16c>)
 800d284:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d286:	697b      	ldr	r3, [r7, #20]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3718      	adds	r7, #24
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	20000cec 	.word	0x20000cec
 800d294:	20000ccc 	.word	0x20000ccc
 800d298:	20000c84 	.word	0x20000c84
 800d29c:	20000c88 	.word	0x20000c88
 800d2a0:	20000ce0 	.word	0x20000ce0
 800d2a4:	20000ce8 	.word	0x20000ce8
 800d2a8:	20000cd0 	.word	0x20000cd0
 800d2ac:	20000bd0 	.word	0x20000bd0
 800d2b0:	20000bcc 	.word	0x20000bcc
 800d2b4:	20000cdc 	.word	0x20000cdc
 800d2b8:	20000cd8 	.word	0x20000cd8

0800d2bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2c2:	4b27      	ldr	r3, [pc, #156]	; (800d360 <vTaskSwitchContext+0xa4>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d003      	beq.n	800d2d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2ca:	4b26      	ldr	r3, [pc, #152]	; (800d364 <vTaskSwitchContext+0xa8>)
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2d0:	e03f      	b.n	800d352 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d2d2:	4b24      	ldr	r3, [pc, #144]	; (800d364 <vTaskSwitchContext+0xa8>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2d8:	4b23      	ldr	r3, [pc, #140]	; (800d368 <vTaskSwitchContext+0xac>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	fab3 f383 	clz	r3, r3
 800d2e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d2e6:	7afb      	ldrb	r3, [r7, #11]
 800d2e8:	f1c3 031f 	rsb	r3, r3, #31
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	491f      	ldr	r1, [pc, #124]	; (800d36c <vTaskSwitchContext+0xb0>)
 800d2f0:	697a      	ldr	r2, [r7, #20]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	440b      	add	r3, r1
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	607b      	str	r3, [r7, #4]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <vTaskSwitchContext+0x5a>
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4a12      	ldr	r2, [pc, #72]	; (800d36c <vTaskSwitchContext+0xb0>)
 800d324:	4413      	add	r3, r2
 800d326:	613b      	str	r3, [r7, #16]
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	685a      	ldr	r2, [r3, #4]
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	605a      	str	r2, [r3, #4]
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	3308      	adds	r3, #8
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d104      	bne.n	800d348 <vTaskSwitchContext+0x8c>
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	605a      	str	r2, [r3, #4]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	4a08      	ldr	r2, [pc, #32]	; (800d370 <vTaskSwitchContext+0xb4>)
 800d350:	6013      	str	r3, [r2, #0]
}
 800d352:	bf00      	nop
 800d354:	371c      	adds	r7, #28
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	20000cec 	.word	0x20000cec
 800d364:	20000cdc 	.word	0x20000cdc
 800d368:	20000cd0 	.word	0x20000cd0
 800d36c:	20000bd0 	.word	0x20000bd0
 800d370:	20000bcc 	.word	0x20000bcc

0800d374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	60fb      	str	r3, [r7, #12]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d39a:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <vTaskPlaceOnEventList+0x44>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3318      	adds	r3, #24
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7fe fe83 	bl	800c0ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	6838      	ldr	r0, [r7, #0]
 800d3ac:	f000 fb08 	bl	800d9c0 <prvAddCurrentTaskToDelayedList>
}
 800d3b0:	bf00      	nop
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	20000bcc 	.word	0x20000bcc

0800d3bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10a      	bne.n	800d3e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	60fb      	str	r3, [r7, #12]
}
 800d3e4:	bf00      	nop
 800d3e6:	e7fe      	b.n	800d3e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	3318      	adds	r3, #24
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe fe97 	bl	800c120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3f2:	4b1d      	ldr	r3, [pc, #116]	; (800d468 <xTaskRemoveFromEventList+0xac>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d11c      	bne.n	800d434 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fe8e 	bl	800c120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d408:	2201      	movs	r2, #1
 800d40a:	409a      	lsls	r2, r3
 800d40c:	4b17      	ldr	r3, [pc, #92]	; (800d46c <xTaskRemoveFromEventList+0xb0>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4313      	orrs	r3, r2
 800d412:	4a16      	ldr	r2, [pc, #88]	; (800d46c <xTaskRemoveFromEventList+0xb0>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4a13      	ldr	r2, [pc, #76]	; (800d470 <xTaskRemoveFromEventList+0xb4>)
 800d424:	441a      	add	r2, r3
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	3304      	adds	r3, #4
 800d42a:	4619      	mov	r1, r3
 800d42c:	4610      	mov	r0, r2
 800d42e:	f7fe fe1a 	bl	800c066 <vListInsertEnd>
 800d432:	e005      	b.n	800d440 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	3318      	adds	r3, #24
 800d438:	4619      	mov	r1, r3
 800d43a:	480e      	ldr	r0, [pc, #56]	; (800d474 <xTaskRemoveFromEventList+0xb8>)
 800d43c:	f7fe fe13 	bl	800c066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d444:	4b0c      	ldr	r3, [pc, #48]	; (800d478 <xTaskRemoveFromEventList+0xbc>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d905      	bls.n	800d45a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d44e:	2301      	movs	r3, #1
 800d450:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d452:	4b0a      	ldr	r3, [pc, #40]	; (800d47c <xTaskRemoveFromEventList+0xc0>)
 800d454:	2201      	movs	r2, #1
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	e001      	b.n	800d45e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d45e:	697b      	ldr	r3, [r7, #20]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20000cec 	.word	0x20000cec
 800d46c:	20000cd0 	.word	0x20000cd0
 800d470:	20000bd0 	.word	0x20000bd0
 800d474:	20000c8c 	.word	0x20000c8c
 800d478:	20000bcc 	.word	0x20000bcc
 800d47c:	20000cdc 	.word	0x20000cdc

0800d480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d488:	4b06      	ldr	r3, [pc, #24]	; (800d4a4 <vTaskInternalSetTimeOutState+0x24>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d490:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <vTaskInternalSetTimeOutState+0x28>)
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	605a      	str	r2, [r3, #4]
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	20000ce0 	.word	0x20000ce0
 800d4a8:	20000ccc 	.word	0x20000ccc

0800d4ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b088      	sub	sp, #32
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10a      	bne.n	800d4d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	613b      	str	r3, [r7, #16]
}
 800d4ce:	bf00      	nop
 800d4d0:	e7fe      	b.n	800d4d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10a      	bne.n	800d4ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4dc:	f383 8811 	msr	BASEPRI, r3
 800d4e0:	f3bf 8f6f 	isb	sy
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	60fb      	str	r3, [r7, #12]
}
 800d4ea:	bf00      	nop
 800d4ec:	e7fe      	b.n	800d4ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4ee:	f000 fb43 	bl	800db78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4f2:	4b1d      	ldr	r3, [pc, #116]	; (800d568 <xTaskCheckForTimeOut+0xbc>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50a:	d102      	bne.n	800d512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d50c:	2300      	movs	r3, #0
 800d50e:	61fb      	str	r3, [r7, #28]
 800d510:	e023      	b.n	800d55a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	4b15      	ldr	r3, [pc, #84]	; (800d56c <xTaskCheckForTimeOut+0xc0>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d007      	beq.n	800d52e <xTaskCheckForTimeOut+0x82>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	429a      	cmp	r2, r3
 800d526:	d302      	bcc.n	800d52e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d528:	2301      	movs	r3, #1
 800d52a:	61fb      	str	r3, [r7, #28]
 800d52c:	e015      	b.n	800d55a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	697a      	ldr	r2, [r7, #20]
 800d534:	429a      	cmp	r2, r3
 800d536:	d20b      	bcs.n	800d550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	1ad2      	subs	r2, r2, r3
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff ff9b 	bl	800d480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d54a:	2300      	movs	r3, #0
 800d54c:	61fb      	str	r3, [r7, #28]
 800d54e:	e004      	b.n	800d55a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d556:	2301      	movs	r3, #1
 800d558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d55a:	f000 fb3d 	bl	800dbd8 <vPortExitCritical>

	return xReturn;
 800d55e:	69fb      	ldr	r3, [r7, #28]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3720      	adds	r7, #32
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	20000ccc 	.word	0x20000ccc
 800d56c:	20000ce0 	.word	0x20000ce0

0800d570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d570:	b480      	push	{r7}
 800d572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d574:	4b03      	ldr	r3, [pc, #12]	; (800d584 <vTaskMissedYield+0x14>)
 800d576:	2201      	movs	r2, #1
 800d578:	601a      	str	r2, [r3, #0]
}
 800d57a:	bf00      	nop
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	20000cdc 	.word	0x20000cdc

0800d588 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d58e:	2300      	movs	r3, #0
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	e00c      	b.n	800d5ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	4613      	mov	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4a12      	ldr	r2, [pc, #72]	; (800d5e8 <prvInitialiseTaskLists+0x60>)
 800d5a0:	4413      	add	r3, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fe fd32 	bl	800c00c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	607b      	str	r3, [r7, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b06      	cmp	r3, #6
 800d5b2:	d9ef      	bls.n	800d594 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5b4:	480d      	ldr	r0, [pc, #52]	; (800d5ec <prvInitialiseTaskLists+0x64>)
 800d5b6:	f7fe fd29 	bl	800c00c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5ba:	480d      	ldr	r0, [pc, #52]	; (800d5f0 <prvInitialiseTaskLists+0x68>)
 800d5bc:	f7fe fd26 	bl	800c00c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5c0:	480c      	ldr	r0, [pc, #48]	; (800d5f4 <prvInitialiseTaskLists+0x6c>)
 800d5c2:	f7fe fd23 	bl	800c00c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5c6:	480c      	ldr	r0, [pc, #48]	; (800d5f8 <prvInitialiseTaskLists+0x70>)
 800d5c8:	f7fe fd20 	bl	800c00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5cc:	480b      	ldr	r0, [pc, #44]	; (800d5fc <prvInitialiseTaskLists+0x74>)
 800d5ce:	f7fe fd1d 	bl	800c00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5d2:	4b0b      	ldr	r3, [pc, #44]	; (800d600 <prvInitialiseTaskLists+0x78>)
 800d5d4:	4a05      	ldr	r2, [pc, #20]	; (800d5ec <prvInitialiseTaskLists+0x64>)
 800d5d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <prvInitialiseTaskLists+0x7c>)
 800d5da:	4a05      	ldr	r2, [pc, #20]	; (800d5f0 <prvInitialiseTaskLists+0x68>)
 800d5dc:	601a      	str	r2, [r3, #0]
}
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	20000bd0 	.word	0x20000bd0
 800d5ec:	20000c5c 	.word	0x20000c5c
 800d5f0:	20000c70 	.word	0x20000c70
 800d5f4:	20000c8c 	.word	0x20000c8c
 800d5f8:	20000ca0 	.word	0x20000ca0
 800d5fc:	20000cb4 	.word	0x20000cb4
 800d600:	20000c84 	.word	0x20000c84
 800d604:	20000c88 	.word	0x20000c88

0800d608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d60e:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <prvResetNextTaskUnblockTime+0x38>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d104      	bne.n	800d622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d618:	4b0a      	ldr	r3, [pc, #40]	; (800d644 <prvResetNextTaskUnblockTime+0x3c>)
 800d61a:	f04f 32ff 	mov.w	r2, #4294967295
 800d61e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d620:	e008      	b.n	800d634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d622:	4b07      	ldr	r3, [pc, #28]	; (800d640 <prvResetNextTaskUnblockTime+0x38>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	4a04      	ldr	r2, [pc, #16]	; (800d644 <prvResetNextTaskUnblockTime+0x3c>)
 800d632:	6013      	str	r3, [r2, #0]
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	20000c84 	.word	0x20000c84
 800d644:	20000ce8 	.word	0x20000ce8

0800d648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d64e:	4b0b      	ldr	r3, [pc, #44]	; (800d67c <xTaskGetSchedulerState+0x34>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d102      	bne.n	800d65c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d656:	2301      	movs	r3, #1
 800d658:	607b      	str	r3, [r7, #4]
 800d65a:	e008      	b.n	800d66e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d65c:	4b08      	ldr	r3, [pc, #32]	; (800d680 <xTaskGetSchedulerState+0x38>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d664:	2302      	movs	r3, #2
 800d666:	607b      	str	r3, [r7, #4]
 800d668:	e001      	b.n	800d66e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d66a:	2300      	movs	r3, #0
 800d66c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d66e:	687b      	ldr	r3, [r7, #4]
	}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	20000cd4 	.word	0x20000cd4
 800d680:	20000cec 	.word	0x20000cec

0800d684 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d690:	2300      	movs	r3, #0
 800d692:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d05e      	beq.n	800d758 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d69e:	4b31      	ldr	r3, [pc, #196]	; (800d764 <xTaskPriorityInherit+0xe0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d24e      	bcs.n	800d746 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	699b      	ldr	r3, [r3, #24]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	db06      	blt.n	800d6be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6b0:	4b2c      	ldr	r3, [pc, #176]	; (800d764 <xTaskPriorityInherit+0xe0>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	f1c3 0207 	rsb	r2, r3, #7
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	6959      	ldr	r1, [r3, #20]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4413      	add	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4a26      	ldr	r2, [pc, #152]	; (800d768 <xTaskPriorityInherit+0xe4>)
 800d6d0:	4413      	add	r3, r2
 800d6d2:	4299      	cmp	r1, r3
 800d6d4:	d12f      	bne.n	800d736 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	3304      	adds	r3, #4
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe fd20 	bl	800c120 <uxListRemove>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10a      	bne.n	800d6fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f0:	43da      	mvns	r2, r3
 800d6f2:	4b1e      	ldr	r3, [pc, #120]	; (800d76c <xTaskPriorityInherit+0xe8>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	4a1c      	ldr	r2, [pc, #112]	; (800d76c <xTaskPriorityInherit+0xe8>)
 800d6fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6fc:	4b19      	ldr	r3, [pc, #100]	; (800d764 <xTaskPriorityInherit+0xe0>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70a:	2201      	movs	r2, #1
 800d70c:	409a      	lsls	r2, r3
 800d70e:	4b17      	ldr	r3, [pc, #92]	; (800d76c <xTaskPriorityInherit+0xe8>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4313      	orrs	r3, r2
 800d714:	4a15      	ldr	r2, [pc, #84]	; (800d76c <xTaskPriorityInherit+0xe8>)
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71c:	4613      	mov	r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4413      	add	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4a10      	ldr	r2, [pc, #64]	; (800d768 <xTaskPriorityInherit+0xe4>)
 800d726:	441a      	add	r2, r3
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	3304      	adds	r3, #4
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f7fe fc99 	bl	800c066 <vListInsertEnd>
 800d734:	e004      	b.n	800d740 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d736:	4b0b      	ldr	r3, [pc, #44]	; (800d764 <xTaskPriorityInherit+0xe0>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d740:	2301      	movs	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	e008      	b.n	800d758 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d74a:	4b06      	ldr	r3, [pc, #24]	; (800d764 <xTaskPriorityInherit+0xe0>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d750:	429a      	cmp	r2, r3
 800d752:	d201      	bcs.n	800d758 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d754:	2301      	movs	r3, #1
 800d756:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d758:	68fb      	ldr	r3, [r7, #12]
	}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	20000bcc 	.word	0x20000bcc
 800d768:	20000bd0 	.word	0x20000bd0
 800d76c:	20000cd0 	.word	0x20000cd0

0800d770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d77c:	2300      	movs	r3, #0
 800d77e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d06e      	beq.n	800d864 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d786:	4b3a      	ldr	r3, [pc, #232]	; (800d870 <xTaskPriorityDisinherit+0x100>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d00a      	beq.n	800d7a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	60fb      	str	r3, [r7, #12]
}
 800d7a2:	bf00      	nop
 800d7a4:	e7fe      	b.n	800d7a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10a      	bne.n	800d7c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	60bb      	str	r3, [r7, #8]
}
 800d7c0:	bf00      	nop
 800d7c2:	e7fe      	b.n	800d7c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7c8:	1e5a      	subs	r2, r3, #1
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d044      	beq.n	800d864 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d140      	bne.n	800d864 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7fe fc9a 	bl	800c120 <uxListRemove>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d115      	bne.n	800d81e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f6:	491f      	ldr	r1, [pc, #124]	; (800d874 <xTaskPriorityDisinherit+0x104>)
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	440b      	add	r3, r1
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10a      	bne.n	800d81e <xTaskPriorityDisinherit+0xae>
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	2201      	movs	r2, #1
 800d80e:	fa02 f303 	lsl.w	r3, r2, r3
 800d812:	43da      	mvns	r2, r3
 800d814:	4b18      	ldr	r3, [pc, #96]	; (800d878 <xTaskPriorityDisinherit+0x108>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4013      	ands	r3, r2
 800d81a:	4a17      	ldr	r2, [pc, #92]	; (800d878 <xTaskPriorityDisinherit+0x108>)
 800d81c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82a:	f1c3 0207 	rsb	r2, r3, #7
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d836:	2201      	movs	r2, #1
 800d838:	409a      	lsls	r2, r3
 800d83a:	4b0f      	ldr	r3, [pc, #60]	; (800d878 <xTaskPriorityDisinherit+0x108>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4313      	orrs	r3, r2
 800d840:	4a0d      	ldr	r2, [pc, #52]	; (800d878 <xTaskPriorityDisinherit+0x108>)
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d848:	4613      	mov	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4a08      	ldr	r2, [pc, #32]	; (800d874 <xTaskPriorityDisinherit+0x104>)
 800d852:	441a      	add	r2, r3
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	3304      	adds	r3, #4
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f7fe fc03 	bl	800c066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d860:	2301      	movs	r3, #1
 800d862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d864:	697b      	ldr	r3, [r7, #20]
	}
 800d866:	4618      	mov	r0, r3
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	20000bcc 	.word	0x20000bcc
 800d874:	20000bd0 	.word	0x20000bd0
 800d878:	20000cd0 	.word	0x20000cd0

0800d87c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d88a:	2301      	movs	r3, #1
 800d88c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d077      	beq.n	800d984 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	60fb      	str	r3, [r7, #12]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d902      	bls.n	800d8c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	e002      	b.n	800d8c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8cc:	69fa      	ldr	r2, [r7, #28]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d058      	beq.n	800d984 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d153      	bne.n	800d984 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d8dc:	4b2b      	ldr	r3, [pc, #172]	; (800d98c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	69ba      	ldr	r2, [r7, #24]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d10a      	bne.n	800d8fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	60bb      	str	r3, [r7, #8]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d900:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	69fa      	ldr	r2, [r7, #28]
 800d906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	db04      	blt.n	800d91a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	f1c3 0207 	rsb	r2, r3, #7
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	6959      	ldr	r1, [r3, #20]
 800d91e:	693a      	ldr	r2, [r7, #16]
 800d920:	4613      	mov	r3, r2
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	4413      	add	r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	4a19      	ldr	r2, [pc, #100]	; (800d990 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d92a:	4413      	add	r3, r2
 800d92c:	4299      	cmp	r1, r3
 800d92e:	d129      	bne.n	800d984 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	3304      	adds	r3, #4
 800d934:	4618      	mov	r0, r3
 800d936:	f7fe fbf3 	bl	800c120 <uxListRemove>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10a      	bne.n	800d956 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d944:	2201      	movs	r2, #1
 800d946:	fa02 f303 	lsl.w	r3, r2, r3
 800d94a:	43da      	mvns	r2, r3
 800d94c:	4b11      	ldr	r3, [pc, #68]	; (800d994 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4013      	ands	r3, r2
 800d952:	4a10      	ldr	r2, [pc, #64]	; (800d994 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d954:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95a:	2201      	movs	r2, #1
 800d95c:	409a      	lsls	r2, r3
 800d95e:	4b0d      	ldr	r3, [pc, #52]	; (800d994 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4313      	orrs	r3, r2
 800d964:	4a0b      	ldr	r2, [pc, #44]	; (800d994 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d966:	6013      	str	r3, [r2, #0]
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96c:	4613      	mov	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	4413      	add	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4a06      	ldr	r2, [pc, #24]	; (800d990 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d976:	441a      	add	r2, r3
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	3304      	adds	r3, #4
 800d97c:	4619      	mov	r1, r3
 800d97e:	4610      	mov	r0, r2
 800d980:	f7fe fb71 	bl	800c066 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d984:	bf00      	nop
 800d986:	3720      	adds	r7, #32
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	20000bcc 	.word	0x20000bcc
 800d990:	20000bd0 	.word	0x20000bd0
 800d994:	20000cd0 	.word	0x20000cd0

0800d998 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d998:	b480      	push	{r7}
 800d99a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d99c:	4b07      	ldr	r3, [pc, #28]	; (800d9bc <pvTaskIncrementMutexHeldCount+0x24>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d004      	beq.n	800d9ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d9a4:	4b05      	ldr	r3, [pc, #20]	; (800d9bc <pvTaskIncrementMutexHeldCount+0x24>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9aa:	3201      	adds	r2, #1
 800d9ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d9ae:	4b03      	ldr	r3, [pc, #12]	; (800d9bc <pvTaskIncrementMutexHeldCount+0x24>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
	}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	20000bcc 	.word	0x20000bcc

0800d9c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9ca:	4b29      	ldr	r3, [pc, #164]	; (800da70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9d0:	4b28      	ldr	r3, [pc, #160]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fba2 	bl	800c120 <uxListRemove>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10b      	bne.n	800d9fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d9e2:	4b24      	ldr	r3, [pc, #144]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ee:	43da      	mvns	r2, r3
 800d9f0:	4b21      	ldr	r3, [pc, #132]	; (800da78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4013      	ands	r3, r2
 800d9f6:	4a20      	ldr	r2, [pc, #128]	; (800da78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da00:	d10a      	bne.n	800da18 <prvAddCurrentTaskToDelayedList+0x58>
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d007      	beq.n	800da18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da08:	4b1a      	ldr	r3, [pc, #104]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3304      	adds	r3, #4
 800da0e:	4619      	mov	r1, r3
 800da10:	481a      	ldr	r0, [pc, #104]	; (800da7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800da12:	f7fe fb28 	bl	800c066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da16:	e026      	b.n	800da66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4413      	add	r3, r2
 800da1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da20:	4b14      	ldr	r3, [pc, #80]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d209      	bcs.n	800da44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da30:	4b13      	ldr	r3, [pc, #76]	; (800da80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	4b0f      	ldr	r3, [pc, #60]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3304      	adds	r3, #4
 800da3a:	4619      	mov	r1, r3
 800da3c:	4610      	mov	r0, r2
 800da3e:	f7fe fb36 	bl	800c0ae <vListInsert>
}
 800da42:	e010      	b.n	800da66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da44:	4b0f      	ldr	r3, [pc, #60]	; (800da84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	4b0a      	ldr	r3, [pc, #40]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3304      	adds	r3, #4
 800da4e:	4619      	mov	r1, r3
 800da50:	4610      	mov	r0, r2
 800da52:	f7fe fb2c 	bl	800c0ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da56:	4b0c      	ldr	r3, [pc, #48]	; (800da88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68ba      	ldr	r2, [r7, #8]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d202      	bcs.n	800da66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800da60:	4a09      	ldr	r2, [pc, #36]	; (800da88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	6013      	str	r3, [r2, #0]
}
 800da66:	bf00      	nop
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20000ccc 	.word	0x20000ccc
 800da74:	20000bcc 	.word	0x20000bcc
 800da78:	20000cd0 	.word	0x20000cd0
 800da7c:	20000cb4 	.word	0x20000cb4
 800da80:	20000c88 	.word	0x20000c88
 800da84:	20000c84 	.word	0x20000c84
 800da88:	20000ce8 	.word	0x20000ce8

0800da8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da8c:	b480      	push	{r7}
 800da8e:	b085      	sub	sp, #20
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3b04      	subs	r3, #4
 800da9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800daa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3b04      	subs	r3, #4
 800daaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	f023 0201 	bic.w	r2, r3, #1
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3b04      	subs	r3, #4
 800daba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dabc:	4a0c      	ldr	r2, [pc, #48]	; (800daf0 <pxPortInitialiseStack+0x64>)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3b14      	subs	r3, #20
 800dac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3b04      	subs	r3, #4
 800dad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f06f 0202 	mvn.w	r2, #2
 800dada:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	3b20      	subs	r3, #32
 800dae0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dae2:	68fb      	ldr	r3, [r7, #12]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	0800daf5 	.word	0x0800daf5

0800daf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dafa:	2300      	movs	r3, #0
 800dafc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dafe:	4b12      	ldr	r3, [pc, #72]	; (800db48 <prvTaskExitError+0x54>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db06:	d00a      	beq.n	800db1e <prvTaskExitError+0x2a>
	__asm volatile
 800db08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	60fb      	str	r3, [r7, #12]
}
 800db1a:	bf00      	nop
 800db1c:	e7fe      	b.n	800db1c <prvTaskExitError+0x28>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	60bb      	str	r3, [r7, #8]
}
 800db30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db32:	bf00      	nop
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0fc      	beq.n	800db34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db3a:	bf00      	nop
 800db3c:	bf00      	nop
 800db3e:	3714      	adds	r7, #20
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	2000016c 	.word	0x2000016c
 800db4c:	00000000 	.word	0x00000000

0800db50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db50:	4b07      	ldr	r3, [pc, #28]	; (800db70 <pxCurrentTCBConst2>)
 800db52:	6819      	ldr	r1, [r3, #0]
 800db54:	6808      	ldr	r0, [r1, #0]
 800db56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5a:	f380 8809 	msr	PSP, r0
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f04f 0000 	mov.w	r0, #0
 800db66:	f380 8811 	msr	BASEPRI, r0
 800db6a:	4770      	bx	lr
 800db6c:	f3af 8000 	nop.w

0800db70 <pxCurrentTCBConst2>:
 800db70:	20000bcc 	.word	0x20000bcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop

0800db78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	607b      	str	r3, [r7, #4]
}
 800db90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db92:	4b0f      	ldr	r3, [pc, #60]	; (800dbd0 <vPortEnterCritical+0x58>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3301      	adds	r3, #1
 800db98:	4a0d      	ldr	r2, [pc, #52]	; (800dbd0 <vPortEnterCritical+0x58>)
 800db9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db9c:	4b0c      	ldr	r3, [pc, #48]	; (800dbd0 <vPortEnterCritical+0x58>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d10f      	bne.n	800dbc4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dba4:	4b0b      	ldr	r3, [pc, #44]	; (800dbd4 <vPortEnterCritical+0x5c>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	603b      	str	r3, [r7, #0]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <vPortEnterCritical+0x4a>
	}
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	2000016c 	.word	0x2000016c
 800dbd4:	e000ed04 	.word	0xe000ed04

0800dbd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbde:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <vPortExitCritical+0x50>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10a      	bne.n	800dbfc <vPortExitCritical+0x24>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	607b      	str	r3, [r7, #4]
}
 800dbf8:	bf00      	nop
 800dbfa:	e7fe      	b.n	800dbfa <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	; (800dc28 <vPortExitCritical+0x50>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3b01      	subs	r3, #1
 800dc02:	4a09      	ldr	r2, [pc, #36]	; (800dc28 <vPortExitCritical+0x50>)
 800dc04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc06:	4b08      	ldr	r3, [pc, #32]	; (800dc28 <vPortExitCritical+0x50>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d105      	bne.n	800dc1a <vPortExitCritical+0x42>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	f383 8811 	msr	BASEPRI, r3
}
 800dc18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	2000016c 	.word	0x2000016c
 800dc2c:	00000000 	.word	0x00000000

0800dc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc30:	f3ef 8009 	mrs	r0, PSP
 800dc34:	f3bf 8f6f 	isb	sy
 800dc38:	4b15      	ldr	r3, [pc, #84]	; (800dc90 <pxCurrentTCBConst>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	f01e 0f10 	tst.w	lr, #16
 800dc40:	bf08      	it	eq
 800dc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4a:	6010      	str	r0, [r2, #0]
 800dc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc54:	f380 8811 	msr	BASEPRI, r0
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f7ff fb2c 	bl	800d2bc <vTaskSwitchContext>
 800dc64:	f04f 0000 	mov.w	r0, #0
 800dc68:	f380 8811 	msr	BASEPRI, r0
 800dc6c:	bc09      	pop	{r0, r3}
 800dc6e:	6819      	ldr	r1, [r3, #0]
 800dc70:	6808      	ldr	r0, [r1, #0]
 800dc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc76:	f01e 0f10 	tst.w	lr, #16
 800dc7a:	bf08      	it	eq
 800dc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc80:	f380 8809 	msr	PSP, r0
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	f3af 8000 	nop.w

0800dc90 <pxCurrentTCBConst>:
 800dc90:	20000bcc 	.word	0x20000bcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc94:	bf00      	nop
 800dc96:	bf00      	nop

0800dc98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	607b      	str	r3, [r7, #4]
}
 800dcb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcb2:	f7ff fa4b 	bl	800d14c <xTaskIncrementTick>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcbc:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <SysTick_Handler+0x40>)
 800dcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	f383 8811 	msr	BASEPRI, r3
}
 800dcce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	e000ed04 	.word	0xe000ed04

0800dcdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dce2:	f3ef 8305 	mrs	r3, IPSR
 800dce6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b0f      	cmp	r3, #15
 800dcec:	d914      	bls.n	800dd18 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dcee:	4a17      	ldr	r2, [pc, #92]	; (800dd4c <vPortValidateInterruptPriority+0x70>)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dcf8:	4b15      	ldr	r3, [pc, #84]	; (800dd50 <vPortValidateInterruptPriority+0x74>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	7afa      	ldrb	r2, [r7, #11]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d20a      	bcs.n	800dd18 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd06:	f383 8811 	msr	BASEPRI, r3
 800dd0a:	f3bf 8f6f 	isb	sy
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	607b      	str	r3, [r7, #4]
}
 800dd14:	bf00      	nop
 800dd16:	e7fe      	b.n	800dd16 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd18:	4b0e      	ldr	r3, [pc, #56]	; (800dd54 <vPortValidateInterruptPriority+0x78>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd20:	4b0d      	ldr	r3, [pc, #52]	; (800dd58 <vPortValidateInterruptPriority+0x7c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d90a      	bls.n	800dd3e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	603b      	str	r3, [r7, #0]
}
 800dd3a:	bf00      	nop
 800dd3c:	e7fe      	b.n	800dd3c <vPortValidateInterruptPriority+0x60>
	}
 800dd3e:	bf00      	nop
 800dd40:	3714      	adds	r7, #20
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	e000e3f0 	.word	0xe000e3f0
 800dd50:	20000cf0 	.word	0x20000cf0
 800dd54:	e000ed0c 	.word	0xe000ed0c
 800dd58:	20000cf4 	.word	0x20000cf4

0800dd5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08a      	sub	sp, #40	; 0x28
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd64:	2300      	movs	r3, #0
 800dd66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd68:	f7ff f946 	bl	800cff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd6c:	4b5b      	ldr	r3, [pc, #364]	; (800dedc <pvPortMalloc+0x180>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d101      	bne.n	800dd78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd74:	f000 f920 	bl	800dfb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd78:	4b59      	ldr	r3, [pc, #356]	; (800dee0 <pvPortMalloc+0x184>)
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4013      	ands	r3, r2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f040 8093 	bne.w	800deac <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d01d      	beq.n	800ddc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dd8c:	2208      	movs	r2, #8
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4413      	add	r3, r2
 800dd92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f003 0307 	and.w	r3, r3, #7
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d014      	beq.n	800ddc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f023 0307 	bic.w	r3, r3, #7
 800dda4:	3308      	adds	r3, #8
 800dda6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f003 0307 	and.w	r3, r3, #7
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00a      	beq.n	800ddc8 <pvPortMalloc+0x6c>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	617b      	str	r3, [r7, #20]
}
 800ddc4:	bf00      	nop
 800ddc6:	e7fe      	b.n	800ddc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d06e      	beq.n	800deac <pvPortMalloc+0x150>
 800ddce:	4b45      	ldr	r3, [pc, #276]	; (800dee4 <pvPortMalloc+0x188>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d869      	bhi.n	800deac <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ddd8:	4b43      	ldr	r3, [pc, #268]	; (800dee8 <pvPortMalloc+0x18c>)
 800ddda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dddc:	4b42      	ldr	r3, [pc, #264]	; (800dee8 <pvPortMalloc+0x18c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dde2:	e004      	b.n	800ddee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d903      	bls.n	800de00 <pvPortMalloc+0xa4>
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1f1      	bne.n	800dde4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de00:	4b36      	ldr	r3, [pc, #216]	; (800dedc <pvPortMalloc+0x180>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de06:	429a      	cmp	r2, r3
 800de08:	d050      	beq.n	800deac <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de0a:	6a3b      	ldr	r3, [r7, #32]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2208      	movs	r2, #8
 800de10:	4413      	add	r3, r2
 800de12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	6a3b      	ldr	r3, [r7, #32]
 800de1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	685a      	ldr	r2, [r3, #4]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	1ad2      	subs	r2, r2, r3
 800de24:	2308      	movs	r3, #8
 800de26:	005b      	lsls	r3, r3, #1
 800de28:	429a      	cmp	r2, r3
 800de2a:	d91f      	bls.n	800de6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4413      	add	r3, r2
 800de32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	f003 0307 	and.w	r3, r3, #7
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00a      	beq.n	800de54 <pvPortMalloc+0xf8>
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	613b      	str	r3, [r7, #16]
}
 800de50:	bf00      	nop
 800de52:	e7fe      	b.n	800de52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	1ad2      	subs	r2, r2, r3
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de66:	69b8      	ldr	r0, [r7, #24]
 800de68:	f000 f908 	bl	800e07c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de6c:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <pvPortMalloc+0x188>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	1ad3      	subs	r3, r2, r3
 800de76:	4a1b      	ldr	r2, [pc, #108]	; (800dee4 <pvPortMalloc+0x188>)
 800de78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de7a:	4b1a      	ldr	r3, [pc, #104]	; (800dee4 <pvPortMalloc+0x188>)
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	4b1b      	ldr	r3, [pc, #108]	; (800deec <pvPortMalloc+0x190>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	429a      	cmp	r2, r3
 800de84:	d203      	bcs.n	800de8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de86:	4b17      	ldr	r3, [pc, #92]	; (800dee4 <pvPortMalloc+0x188>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a18      	ldr	r2, [pc, #96]	; (800deec <pvPortMalloc+0x190>)
 800de8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <pvPortMalloc+0x184>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	431a      	orrs	r2, r3
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	2200      	movs	r2, #0
 800dea0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dea2:	4b13      	ldr	r3, [pc, #76]	; (800def0 <pvPortMalloc+0x194>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3301      	adds	r3, #1
 800dea8:	4a11      	ldr	r2, [pc, #68]	; (800def0 <pvPortMalloc+0x194>)
 800deaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800deac:	f7ff f8b2 	bl	800d014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f003 0307 	and.w	r3, r3, #7
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00a      	beq.n	800ded0 <pvPortMalloc+0x174>
	__asm volatile
 800deba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debe:	f383 8811 	msr	BASEPRI, r3
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	60fb      	str	r3, [r7, #12]
}
 800decc:	bf00      	nop
 800dece:	e7fe      	b.n	800dece <pvPortMalloc+0x172>
	return pvReturn;
 800ded0:	69fb      	ldr	r3, [r7, #28]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3728      	adds	r7, #40	; 0x28
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	200018b8 	.word	0x200018b8
 800dee0:	200018cc 	.word	0x200018cc
 800dee4:	200018bc 	.word	0x200018bc
 800dee8:	200018b0 	.word	0x200018b0
 800deec:	200018c0 	.word	0x200018c0
 800def0:	200018c4 	.word	0x200018c4

0800def4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d04d      	beq.n	800dfa2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df06:	2308      	movs	r3, #8
 800df08:	425b      	negs	r3, r3
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	4413      	add	r3, r2
 800df0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	4b24      	ldr	r3, [pc, #144]	; (800dfac <vPortFree+0xb8>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4013      	ands	r3, r2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10a      	bne.n	800df38 <vPortFree+0x44>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	60fb      	str	r3, [r7, #12]
}
 800df34:	bf00      	nop
 800df36:	e7fe      	b.n	800df36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00a      	beq.n	800df56 <vPortFree+0x62>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	60bb      	str	r3, [r7, #8]
}
 800df52:	bf00      	nop
 800df54:	e7fe      	b.n	800df54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	4b14      	ldr	r3, [pc, #80]	; (800dfac <vPortFree+0xb8>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4013      	ands	r3, r2
 800df60:	2b00      	cmp	r3, #0
 800df62:	d01e      	beq.n	800dfa2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d11a      	bne.n	800dfa2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	685a      	ldr	r2, [r3, #4]
 800df70:	4b0e      	ldr	r3, [pc, #56]	; (800dfac <vPortFree+0xb8>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	43db      	mvns	r3, r3
 800df76:	401a      	ands	r2, r3
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df7c:	f7ff f83c 	bl	800cff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	4b0a      	ldr	r3, [pc, #40]	; (800dfb0 <vPortFree+0xbc>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4413      	add	r3, r2
 800df8a:	4a09      	ldr	r2, [pc, #36]	; (800dfb0 <vPortFree+0xbc>)
 800df8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df8e:	6938      	ldr	r0, [r7, #16]
 800df90:	f000 f874 	bl	800e07c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df94:	4b07      	ldr	r3, [pc, #28]	; (800dfb4 <vPortFree+0xc0>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	3301      	adds	r3, #1
 800df9a:	4a06      	ldr	r2, [pc, #24]	; (800dfb4 <vPortFree+0xc0>)
 800df9c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df9e:	f7ff f839 	bl	800d014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dfa2:	bf00      	nop
 800dfa4:	3718      	adds	r7, #24
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	200018cc 	.word	0x200018cc
 800dfb0:	200018bc 	.word	0x200018bc
 800dfb4:	200018c8 	.word	0x200018c8

0800dfb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b085      	sub	sp, #20
 800dfbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dfc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfc4:	4b27      	ldr	r3, [pc, #156]	; (800e064 <prvHeapInit+0xac>)
 800dfc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f003 0307 	and.w	r3, r3, #7
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00c      	beq.n	800dfec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3307      	adds	r3, #7
 800dfd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f023 0307 	bic.w	r3, r3, #7
 800dfde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	4a1f      	ldr	r2, [pc, #124]	; (800e064 <prvHeapInit+0xac>)
 800dfe8:	4413      	add	r3, r2
 800dfea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dff0:	4a1d      	ldr	r2, [pc, #116]	; (800e068 <prvHeapInit+0xb0>)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dff6:	4b1c      	ldr	r3, [pc, #112]	; (800e068 <prvHeapInit+0xb0>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	4413      	add	r3, r2
 800e002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e004:	2208      	movs	r2, #8
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	1a9b      	subs	r3, r3, r2
 800e00a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f023 0307 	bic.w	r3, r3, #7
 800e012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	4a15      	ldr	r2, [pc, #84]	; (800e06c <prvHeapInit+0xb4>)
 800e018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e01a:	4b14      	ldr	r3, [pc, #80]	; (800e06c <prvHeapInit+0xb4>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2200      	movs	r2, #0
 800e020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e022:	4b12      	ldr	r3, [pc, #72]	; (800e06c <prvHeapInit+0xb4>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2200      	movs	r2, #0
 800e028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	1ad2      	subs	r2, r2, r3
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e038:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <prvHeapInit+0xb4>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	4a0a      	ldr	r2, [pc, #40]	; (800e070 <prvHeapInit+0xb8>)
 800e046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	4a09      	ldr	r2, [pc, #36]	; (800e074 <prvHeapInit+0xbc>)
 800e04e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e050:	4b09      	ldr	r3, [pc, #36]	; (800e078 <prvHeapInit+0xc0>)
 800e052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e056:	601a      	str	r2, [r3, #0]
}
 800e058:	bf00      	nop
 800e05a:	3714      	adds	r7, #20
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	20000cf8 	.word	0x20000cf8
 800e068:	200018b0 	.word	0x200018b0
 800e06c:	200018b8 	.word	0x200018b8
 800e070:	200018c0 	.word	0x200018c0
 800e074:	200018bc 	.word	0x200018bc
 800e078:	200018cc 	.word	0x200018cc

0800e07c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e084:	4b28      	ldr	r3, [pc, #160]	; (800e128 <prvInsertBlockIntoFreeList+0xac>)
 800e086:	60fb      	str	r3, [r7, #12]
 800e088:	e002      	b.n	800e090 <prvInsertBlockIntoFreeList+0x14>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	60fb      	str	r3, [r7, #12]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	429a      	cmp	r2, r3
 800e098:	d8f7      	bhi.n	800e08a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	68ba      	ldr	r2, [r7, #8]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d108      	bne.n	800e0be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	685a      	ldr	r2, [r3, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	441a      	add	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	441a      	add	r2, r3
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d118      	bne.n	800e104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	4b15      	ldr	r3, [pc, #84]	; (800e12c <prvInsertBlockIntoFreeList+0xb0>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d00d      	beq.n	800e0fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685a      	ldr	r2, [r3, #4]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	441a      	add	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	601a      	str	r2, [r3, #0]
 800e0f8:	e008      	b.n	800e10c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0fa:	4b0c      	ldr	r3, [pc, #48]	; (800e12c <prvInsertBlockIntoFreeList+0xb0>)
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	601a      	str	r2, [r3, #0]
 800e102:	e003      	b.n	800e10c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	429a      	cmp	r2, r3
 800e112:	d002      	beq.n	800e11a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e11a:	bf00      	nop
 800e11c:	3714      	adds	r7, #20
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	200018b0 	.word	0x200018b0
 800e12c:	200018b8 	.word	0x200018b8

0800e130 <sniprintf>:
 800e130:	b40c      	push	{r2, r3}
 800e132:	b530      	push	{r4, r5, lr}
 800e134:	4b17      	ldr	r3, [pc, #92]	; (800e194 <sniprintf+0x64>)
 800e136:	1e0c      	subs	r4, r1, #0
 800e138:	681d      	ldr	r5, [r3, #0]
 800e13a:	b09d      	sub	sp, #116	; 0x74
 800e13c:	da08      	bge.n	800e150 <sniprintf+0x20>
 800e13e:	238b      	movs	r3, #139	; 0x8b
 800e140:	602b      	str	r3, [r5, #0]
 800e142:	f04f 30ff 	mov.w	r0, #4294967295
 800e146:	b01d      	add	sp, #116	; 0x74
 800e148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e14c:	b002      	add	sp, #8
 800e14e:	4770      	bx	lr
 800e150:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e154:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e158:	bf14      	ite	ne
 800e15a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e15e:	4623      	moveq	r3, r4
 800e160:	9304      	str	r3, [sp, #16]
 800e162:	9307      	str	r3, [sp, #28]
 800e164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e168:	9002      	str	r0, [sp, #8]
 800e16a:	9006      	str	r0, [sp, #24]
 800e16c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e170:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e172:	ab21      	add	r3, sp, #132	; 0x84
 800e174:	a902      	add	r1, sp, #8
 800e176:	4628      	mov	r0, r5
 800e178:	9301      	str	r3, [sp, #4]
 800e17a:	f000 f9a1 	bl	800e4c0 <_svfiprintf_r>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	bfbc      	itt	lt
 800e182:	238b      	movlt	r3, #139	; 0x8b
 800e184:	602b      	strlt	r3, [r5, #0]
 800e186:	2c00      	cmp	r4, #0
 800e188:	d0dd      	beq.n	800e146 <sniprintf+0x16>
 800e18a:	9b02      	ldr	r3, [sp, #8]
 800e18c:	2200      	movs	r2, #0
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	e7d9      	b.n	800e146 <sniprintf+0x16>
 800e192:	bf00      	nop
 800e194:	200001bc 	.word	0x200001bc

0800e198 <memset>:
 800e198:	4402      	add	r2, r0
 800e19a:	4603      	mov	r3, r0
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d100      	bne.n	800e1a2 <memset+0xa>
 800e1a0:	4770      	bx	lr
 800e1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1a6:	e7f9      	b.n	800e19c <memset+0x4>

0800e1a8 <__errno>:
 800e1a8:	4b01      	ldr	r3, [pc, #4]	; (800e1b0 <__errno+0x8>)
 800e1aa:	6818      	ldr	r0, [r3, #0]
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	200001bc 	.word	0x200001bc

0800e1b4 <__libc_init_array>:
 800e1b4:	b570      	push	{r4, r5, r6, lr}
 800e1b6:	4d0d      	ldr	r5, [pc, #52]	; (800e1ec <__libc_init_array+0x38>)
 800e1b8:	4c0d      	ldr	r4, [pc, #52]	; (800e1f0 <__libc_init_array+0x3c>)
 800e1ba:	1b64      	subs	r4, r4, r5
 800e1bc:	10a4      	asrs	r4, r4, #2
 800e1be:	2600      	movs	r6, #0
 800e1c0:	42a6      	cmp	r6, r4
 800e1c2:	d109      	bne.n	800e1d8 <__libc_init_array+0x24>
 800e1c4:	4d0b      	ldr	r5, [pc, #44]	; (800e1f4 <__libc_init_array+0x40>)
 800e1c6:	4c0c      	ldr	r4, [pc, #48]	; (800e1f8 <__libc_init_array+0x44>)
 800e1c8:	f000 fca4 	bl	800eb14 <_init>
 800e1cc:	1b64      	subs	r4, r4, r5
 800e1ce:	10a4      	asrs	r4, r4, #2
 800e1d0:	2600      	movs	r6, #0
 800e1d2:	42a6      	cmp	r6, r4
 800e1d4:	d105      	bne.n	800e1e2 <__libc_init_array+0x2e>
 800e1d6:	bd70      	pop	{r4, r5, r6, pc}
 800e1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1dc:	4798      	blx	r3
 800e1de:	3601      	adds	r6, #1
 800e1e0:	e7ee      	b.n	800e1c0 <__libc_init_array+0xc>
 800e1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1e6:	4798      	blx	r3
 800e1e8:	3601      	adds	r6, #1
 800e1ea:	e7f2      	b.n	800e1d2 <__libc_init_array+0x1e>
 800e1ec:	0800ec48 	.word	0x0800ec48
 800e1f0:	0800ec48 	.word	0x0800ec48
 800e1f4:	0800ec48 	.word	0x0800ec48
 800e1f8:	0800ec4c 	.word	0x0800ec4c

0800e1fc <__retarget_lock_acquire_recursive>:
 800e1fc:	4770      	bx	lr

0800e1fe <__retarget_lock_release_recursive>:
 800e1fe:	4770      	bx	lr

0800e200 <memcpy>:
 800e200:	440a      	add	r2, r1
 800e202:	4291      	cmp	r1, r2
 800e204:	f100 33ff 	add.w	r3, r0, #4294967295
 800e208:	d100      	bne.n	800e20c <memcpy+0xc>
 800e20a:	4770      	bx	lr
 800e20c:	b510      	push	{r4, lr}
 800e20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e212:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e216:	4291      	cmp	r1, r2
 800e218:	d1f9      	bne.n	800e20e <memcpy+0xe>
 800e21a:	bd10      	pop	{r4, pc}

0800e21c <_free_r>:
 800e21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e21e:	2900      	cmp	r1, #0
 800e220:	d044      	beq.n	800e2ac <_free_r+0x90>
 800e222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e226:	9001      	str	r0, [sp, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f1a1 0404 	sub.w	r4, r1, #4
 800e22e:	bfb8      	it	lt
 800e230:	18e4      	addlt	r4, r4, r3
 800e232:	f000 f8df 	bl	800e3f4 <__malloc_lock>
 800e236:	4a1e      	ldr	r2, [pc, #120]	; (800e2b0 <_free_r+0x94>)
 800e238:	9801      	ldr	r0, [sp, #4]
 800e23a:	6813      	ldr	r3, [r2, #0]
 800e23c:	b933      	cbnz	r3, 800e24c <_free_r+0x30>
 800e23e:	6063      	str	r3, [r4, #4]
 800e240:	6014      	str	r4, [r2, #0]
 800e242:	b003      	add	sp, #12
 800e244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e248:	f000 b8da 	b.w	800e400 <__malloc_unlock>
 800e24c:	42a3      	cmp	r3, r4
 800e24e:	d908      	bls.n	800e262 <_free_r+0x46>
 800e250:	6825      	ldr	r5, [r4, #0]
 800e252:	1961      	adds	r1, r4, r5
 800e254:	428b      	cmp	r3, r1
 800e256:	bf01      	itttt	eq
 800e258:	6819      	ldreq	r1, [r3, #0]
 800e25a:	685b      	ldreq	r3, [r3, #4]
 800e25c:	1949      	addeq	r1, r1, r5
 800e25e:	6021      	streq	r1, [r4, #0]
 800e260:	e7ed      	b.n	800e23e <_free_r+0x22>
 800e262:	461a      	mov	r2, r3
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	b10b      	cbz	r3, 800e26c <_free_r+0x50>
 800e268:	42a3      	cmp	r3, r4
 800e26a:	d9fa      	bls.n	800e262 <_free_r+0x46>
 800e26c:	6811      	ldr	r1, [r2, #0]
 800e26e:	1855      	adds	r5, r2, r1
 800e270:	42a5      	cmp	r5, r4
 800e272:	d10b      	bne.n	800e28c <_free_r+0x70>
 800e274:	6824      	ldr	r4, [r4, #0]
 800e276:	4421      	add	r1, r4
 800e278:	1854      	adds	r4, r2, r1
 800e27a:	42a3      	cmp	r3, r4
 800e27c:	6011      	str	r1, [r2, #0]
 800e27e:	d1e0      	bne.n	800e242 <_free_r+0x26>
 800e280:	681c      	ldr	r4, [r3, #0]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	6053      	str	r3, [r2, #4]
 800e286:	440c      	add	r4, r1
 800e288:	6014      	str	r4, [r2, #0]
 800e28a:	e7da      	b.n	800e242 <_free_r+0x26>
 800e28c:	d902      	bls.n	800e294 <_free_r+0x78>
 800e28e:	230c      	movs	r3, #12
 800e290:	6003      	str	r3, [r0, #0]
 800e292:	e7d6      	b.n	800e242 <_free_r+0x26>
 800e294:	6825      	ldr	r5, [r4, #0]
 800e296:	1961      	adds	r1, r4, r5
 800e298:	428b      	cmp	r3, r1
 800e29a:	bf04      	itt	eq
 800e29c:	6819      	ldreq	r1, [r3, #0]
 800e29e:	685b      	ldreq	r3, [r3, #4]
 800e2a0:	6063      	str	r3, [r4, #4]
 800e2a2:	bf04      	itt	eq
 800e2a4:	1949      	addeq	r1, r1, r5
 800e2a6:	6021      	streq	r1, [r4, #0]
 800e2a8:	6054      	str	r4, [r2, #4]
 800e2aa:	e7ca      	b.n	800e242 <_free_r+0x26>
 800e2ac:	b003      	add	sp, #12
 800e2ae:	bd30      	pop	{r4, r5, pc}
 800e2b0:	20001a10 	.word	0x20001a10

0800e2b4 <sbrk_aligned>:
 800e2b4:	b570      	push	{r4, r5, r6, lr}
 800e2b6:	4e0e      	ldr	r6, [pc, #56]	; (800e2f0 <sbrk_aligned+0x3c>)
 800e2b8:	460c      	mov	r4, r1
 800e2ba:	6831      	ldr	r1, [r6, #0]
 800e2bc:	4605      	mov	r5, r0
 800e2be:	b911      	cbnz	r1, 800e2c6 <sbrk_aligned+0x12>
 800e2c0:	f000 fba6 	bl	800ea10 <_sbrk_r>
 800e2c4:	6030      	str	r0, [r6, #0]
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f000 fba1 	bl	800ea10 <_sbrk_r>
 800e2ce:	1c43      	adds	r3, r0, #1
 800e2d0:	d00a      	beq.n	800e2e8 <sbrk_aligned+0x34>
 800e2d2:	1cc4      	adds	r4, r0, #3
 800e2d4:	f024 0403 	bic.w	r4, r4, #3
 800e2d8:	42a0      	cmp	r0, r4
 800e2da:	d007      	beq.n	800e2ec <sbrk_aligned+0x38>
 800e2dc:	1a21      	subs	r1, r4, r0
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f000 fb96 	bl	800ea10 <_sbrk_r>
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d101      	bne.n	800e2ec <sbrk_aligned+0x38>
 800e2e8:	f04f 34ff 	mov.w	r4, #4294967295
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}
 800e2f0:	20001a14 	.word	0x20001a14

0800e2f4 <_malloc_r>:
 800e2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f8:	1ccd      	adds	r5, r1, #3
 800e2fa:	f025 0503 	bic.w	r5, r5, #3
 800e2fe:	3508      	adds	r5, #8
 800e300:	2d0c      	cmp	r5, #12
 800e302:	bf38      	it	cc
 800e304:	250c      	movcc	r5, #12
 800e306:	2d00      	cmp	r5, #0
 800e308:	4607      	mov	r7, r0
 800e30a:	db01      	blt.n	800e310 <_malloc_r+0x1c>
 800e30c:	42a9      	cmp	r1, r5
 800e30e:	d905      	bls.n	800e31c <_malloc_r+0x28>
 800e310:	230c      	movs	r3, #12
 800e312:	603b      	str	r3, [r7, #0]
 800e314:	2600      	movs	r6, #0
 800e316:	4630      	mov	r0, r6
 800e318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e31c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e3f0 <_malloc_r+0xfc>
 800e320:	f000 f868 	bl	800e3f4 <__malloc_lock>
 800e324:	f8d8 3000 	ldr.w	r3, [r8]
 800e328:	461c      	mov	r4, r3
 800e32a:	bb5c      	cbnz	r4, 800e384 <_malloc_r+0x90>
 800e32c:	4629      	mov	r1, r5
 800e32e:	4638      	mov	r0, r7
 800e330:	f7ff ffc0 	bl	800e2b4 <sbrk_aligned>
 800e334:	1c43      	adds	r3, r0, #1
 800e336:	4604      	mov	r4, r0
 800e338:	d155      	bne.n	800e3e6 <_malloc_r+0xf2>
 800e33a:	f8d8 4000 	ldr.w	r4, [r8]
 800e33e:	4626      	mov	r6, r4
 800e340:	2e00      	cmp	r6, #0
 800e342:	d145      	bne.n	800e3d0 <_malloc_r+0xdc>
 800e344:	2c00      	cmp	r4, #0
 800e346:	d048      	beq.n	800e3da <_malloc_r+0xe6>
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	4631      	mov	r1, r6
 800e34c:	4638      	mov	r0, r7
 800e34e:	eb04 0903 	add.w	r9, r4, r3
 800e352:	f000 fb5d 	bl	800ea10 <_sbrk_r>
 800e356:	4581      	cmp	r9, r0
 800e358:	d13f      	bne.n	800e3da <_malloc_r+0xe6>
 800e35a:	6821      	ldr	r1, [r4, #0]
 800e35c:	1a6d      	subs	r5, r5, r1
 800e35e:	4629      	mov	r1, r5
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff ffa7 	bl	800e2b4 <sbrk_aligned>
 800e366:	3001      	adds	r0, #1
 800e368:	d037      	beq.n	800e3da <_malloc_r+0xe6>
 800e36a:	6823      	ldr	r3, [r4, #0]
 800e36c:	442b      	add	r3, r5
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	f8d8 3000 	ldr.w	r3, [r8]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d038      	beq.n	800e3ea <_malloc_r+0xf6>
 800e378:	685a      	ldr	r2, [r3, #4]
 800e37a:	42a2      	cmp	r2, r4
 800e37c:	d12b      	bne.n	800e3d6 <_malloc_r+0xe2>
 800e37e:	2200      	movs	r2, #0
 800e380:	605a      	str	r2, [r3, #4]
 800e382:	e00f      	b.n	800e3a4 <_malloc_r+0xb0>
 800e384:	6822      	ldr	r2, [r4, #0]
 800e386:	1b52      	subs	r2, r2, r5
 800e388:	d41f      	bmi.n	800e3ca <_malloc_r+0xd6>
 800e38a:	2a0b      	cmp	r2, #11
 800e38c:	d917      	bls.n	800e3be <_malloc_r+0xca>
 800e38e:	1961      	adds	r1, r4, r5
 800e390:	42a3      	cmp	r3, r4
 800e392:	6025      	str	r5, [r4, #0]
 800e394:	bf18      	it	ne
 800e396:	6059      	strne	r1, [r3, #4]
 800e398:	6863      	ldr	r3, [r4, #4]
 800e39a:	bf08      	it	eq
 800e39c:	f8c8 1000 	streq.w	r1, [r8]
 800e3a0:	5162      	str	r2, [r4, r5]
 800e3a2:	604b      	str	r3, [r1, #4]
 800e3a4:	4638      	mov	r0, r7
 800e3a6:	f104 060b 	add.w	r6, r4, #11
 800e3aa:	f000 f829 	bl	800e400 <__malloc_unlock>
 800e3ae:	f026 0607 	bic.w	r6, r6, #7
 800e3b2:	1d23      	adds	r3, r4, #4
 800e3b4:	1af2      	subs	r2, r6, r3
 800e3b6:	d0ae      	beq.n	800e316 <_malloc_r+0x22>
 800e3b8:	1b9b      	subs	r3, r3, r6
 800e3ba:	50a3      	str	r3, [r4, r2]
 800e3bc:	e7ab      	b.n	800e316 <_malloc_r+0x22>
 800e3be:	42a3      	cmp	r3, r4
 800e3c0:	6862      	ldr	r2, [r4, #4]
 800e3c2:	d1dd      	bne.n	800e380 <_malloc_r+0x8c>
 800e3c4:	f8c8 2000 	str.w	r2, [r8]
 800e3c8:	e7ec      	b.n	800e3a4 <_malloc_r+0xb0>
 800e3ca:	4623      	mov	r3, r4
 800e3cc:	6864      	ldr	r4, [r4, #4]
 800e3ce:	e7ac      	b.n	800e32a <_malloc_r+0x36>
 800e3d0:	4634      	mov	r4, r6
 800e3d2:	6876      	ldr	r6, [r6, #4]
 800e3d4:	e7b4      	b.n	800e340 <_malloc_r+0x4c>
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	e7cc      	b.n	800e374 <_malloc_r+0x80>
 800e3da:	230c      	movs	r3, #12
 800e3dc:	603b      	str	r3, [r7, #0]
 800e3de:	4638      	mov	r0, r7
 800e3e0:	f000 f80e 	bl	800e400 <__malloc_unlock>
 800e3e4:	e797      	b.n	800e316 <_malloc_r+0x22>
 800e3e6:	6025      	str	r5, [r4, #0]
 800e3e8:	e7dc      	b.n	800e3a4 <_malloc_r+0xb0>
 800e3ea:	605b      	str	r3, [r3, #4]
 800e3ec:	deff      	udf	#255	; 0xff
 800e3ee:	bf00      	nop
 800e3f0:	20001a10 	.word	0x20001a10

0800e3f4 <__malloc_lock>:
 800e3f4:	4801      	ldr	r0, [pc, #4]	; (800e3fc <__malloc_lock+0x8>)
 800e3f6:	f7ff bf01 	b.w	800e1fc <__retarget_lock_acquire_recursive>
 800e3fa:	bf00      	nop
 800e3fc:	20001a0c 	.word	0x20001a0c

0800e400 <__malloc_unlock>:
 800e400:	4801      	ldr	r0, [pc, #4]	; (800e408 <__malloc_unlock+0x8>)
 800e402:	f7ff befc 	b.w	800e1fe <__retarget_lock_release_recursive>
 800e406:	bf00      	nop
 800e408:	20001a0c 	.word	0x20001a0c

0800e40c <__ssputs_r>:
 800e40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e410:	688e      	ldr	r6, [r1, #8]
 800e412:	461f      	mov	r7, r3
 800e414:	42be      	cmp	r6, r7
 800e416:	680b      	ldr	r3, [r1, #0]
 800e418:	4682      	mov	sl, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	4690      	mov	r8, r2
 800e41e:	d82c      	bhi.n	800e47a <__ssputs_r+0x6e>
 800e420:	898a      	ldrh	r2, [r1, #12]
 800e422:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e426:	d026      	beq.n	800e476 <__ssputs_r+0x6a>
 800e428:	6965      	ldr	r5, [r4, #20]
 800e42a:	6909      	ldr	r1, [r1, #16]
 800e42c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e430:	eba3 0901 	sub.w	r9, r3, r1
 800e434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e438:	1c7b      	adds	r3, r7, #1
 800e43a:	444b      	add	r3, r9
 800e43c:	106d      	asrs	r5, r5, #1
 800e43e:	429d      	cmp	r5, r3
 800e440:	bf38      	it	cc
 800e442:	461d      	movcc	r5, r3
 800e444:	0553      	lsls	r3, r2, #21
 800e446:	d527      	bpl.n	800e498 <__ssputs_r+0x8c>
 800e448:	4629      	mov	r1, r5
 800e44a:	f7ff ff53 	bl	800e2f4 <_malloc_r>
 800e44e:	4606      	mov	r6, r0
 800e450:	b360      	cbz	r0, 800e4ac <__ssputs_r+0xa0>
 800e452:	6921      	ldr	r1, [r4, #16]
 800e454:	464a      	mov	r2, r9
 800e456:	f7ff fed3 	bl	800e200 <memcpy>
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e464:	81a3      	strh	r3, [r4, #12]
 800e466:	6126      	str	r6, [r4, #16]
 800e468:	6165      	str	r5, [r4, #20]
 800e46a:	444e      	add	r6, r9
 800e46c:	eba5 0509 	sub.w	r5, r5, r9
 800e470:	6026      	str	r6, [r4, #0]
 800e472:	60a5      	str	r5, [r4, #8]
 800e474:	463e      	mov	r6, r7
 800e476:	42be      	cmp	r6, r7
 800e478:	d900      	bls.n	800e47c <__ssputs_r+0x70>
 800e47a:	463e      	mov	r6, r7
 800e47c:	6820      	ldr	r0, [r4, #0]
 800e47e:	4632      	mov	r2, r6
 800e480:	4641      	mov	r1, r8
 800e482:	f000 faab 	bl	800e9dc <memmove>
 800e486:	68a3      	ldr	r3, [r4, #8]
 800e488:	1b9b      	subs	r3, r3, r6
 800e48a:	60a3      	str	r3, [r4, #8]
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	4433      	add	r3, r6
 800e490:	6023      	str	r3, [r4, #0]
 800e492:	2000      	movs	r0, #0
 800e494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e498:	462a      	mov	r2, r5
 800e49a:	f000 fac9 	bl	800ea30 <_realloc_r>
 800e49e:	4606      	mov	r6, r0
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d1e0      	bne.n	800e466 <__ssputs_r+0x5a>
 800e4a4:	6921      	ldr	r1, [r4, #16]
 800e4a6:	4650      	mov	r0, sl
 800e4a8:	f7ff feb8 	bl	800e21c <_free_r>
 800e4ac:	230c      	movs	r3, #12
 800e4ae:	f8ca 3000 	str.w	r3, [sl]
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b8:	81a3      	strh	r3, [r4, #12]
 800e4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e4be:	e7e9      	b.n	800e494 <__ssputs_r+0x88>

0800e4c0 <_svfiprintf_r>:
 800e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	4698      	mov	r8, r3
 800e4c6:	898b      	ldrh	r3, [r1, #12]
 800e4c8:	061b      	lsls	r3, r3, #24
 800e4ca:	b09d      	sub	sp, #116	; 0x74
 800e4cc:	4607      	mov	r7, r0
 800e4ce:	460d      	mov	r5, r1
 800e4d0:	4614      	mov	r4, r2
 800e4d2:	d50e      	bpl.n	800e4f2 <_svfiprintf_r+0x32>
 800e4d4:	690b      	ldr	r3, [r1, #16]
 800e4d6:	b963      	cbnz	r3, 800e4f2 <_svfiprintf_r+0x32>
 800e4d8:	2140      	movs	r1, #64	; 0x40
 800e4da:	f7ff ff0b 	bl	800e2f4 <_malloc_r>
 800e4de:	6028      	str	r0, [r5, #0]
 800e4e0:	6128      	str	r0, [r5, #16]
 800e4e2:	b920      	cbnz	r0, 800e4ee <_svfiprintf_r+0x2e>
 800e4e4:	230c      	movs	r3, #12
 800e4e6:	603b      	str	r3, [r7, #0]
 800e4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ec:	e0d0      	b.n	800e690 <_svfiprintf_r+0x1d0>
 800e4ee:	2340      	movs	r3, #64	; 0x40
 800e4f0:	616b      	str	r3, [r5, #20]
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f6:	2320      	movs	r3, #32
 800e4f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e500:	2330      	movs	r3, #48	; 0x30
 800e502:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e6a8 <_svfiprintf_r+0x1e8>
 800e506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e50a:	f04f 0901 	mov.w	r9, #1
 800e50e:	4623      	mov	r3, r4
 800e510:	469a      	mov	sl, r3
 800e512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e516:	b10a      	cbz	r2, 800e51c <_svfiprintf_r+0x5c>
 800e518:	2a25      	cmp	r2, #37	; 0x25
 800e51a:	d1f9      	bne.n	800e510 <_svfiprintf_r+0x50>
 800e51c:	ebba 0b04 	subs.w	fp, sl, r4
 800e520:	d00b      	beq.n	800e53a <_svfiprintf_r+0x7a>
 800e522:	465b      	mov	r3, fp
 800e524:	4622      	mov	r2, r4
 800e526:	4629      	mov	r1, r5
 800e528:	4638      	mov	r0, r7
 800e52a:	f7ff ff6f 	bl	800e40c <__ssputs_r>
 800e52e:	3001      	adds	r0, #1
 800e530:	f000 80a9 	beq.w	800e686 <_svfiprintf_r+0x1c6>
 800e534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e536:	445a      	add	r2, fp
 800e538:	9209      	str	r2, [sp, #36]	; 0x24
 800e53a:	f89a 3000 	ldrb.w	r3, [sl]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	f000 80a1 	beq.w	800e686 <_svfiprintf_r+0x1c6>
 800e544:	2300      	movs	r3, #0
 800e546:	f04f 32ff 	mov.w	r2, #4294967295
 800e54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e54e:	f10a 0a01 	add.w	sl, sl, #1
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	9307      	str	r3, [sp, #28]
 800e556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e55a:	931a      	str	r3, [sp, #104]	; 0x68
 800e55c:	4654      	mov	r4, sl
 800e55e:	2205      	movs	r2, #5
 800e560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e564:	4850      	ldr	r0, [pc, #320]	; (800e6a8 <_svfiprintf_r+0x1e8>)
 800e566:	f7f1 fe3b 	bl	80001e0 <memchr>
 800e56a:	9a04      	ldr	r2, [sp, #16]
 800e56c:	b9d8      	cbnz	r0, 800e5a6 <_svfiprintf_r+0xe6>
 800e56e:	06d0      	lsls	r0, r2, #27
 800e570:	bf44      	itt	mi
 800e572:	2320      	movmi	r3, #32
 800e574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e578:	0711      	lsls	r1, r2, #28
 800e57a:	bf44      	itt	mi
 800e57c:	232b      	movmi	r3, #43	; 0x2b
 800e57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e582:	f89a 3000 	ldrb.w	r3, [sl]
 800e586:	2b2a      	cmp	r3, #42	; 0x2a
 800e588:	d015      	beq.n	800e5b6 <_svfiprintf_r+0xf6>
 800e58a:	9a07      	ldr	r2, [sp, #28]
 800e58c:	4654      	mov	r4, sl
 800e58e:	2000      	movs	r0, #0
 800e590:	f04f 0c0a 	mov.w	ip, #10
 800e594:	4621      	mov	r1, r4
 800e596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e59a:	3b30      	subs	r3, #48	; 0x30
 800e59c:	2b09      	cmp	r3, #9
 800e59e:	d94d      	bls.n	800e63c <_svfiprintf_r+0x17c>
 800e5a0:	b1b0      	cbz	r0, 800e5d0 <_svfiprintf_r+0x110>
 800e5a2:	9207      	str	r2, [sp, #28]
 800e5a4:	e014      	b.n	800e5d0 <_svfiprintf_r+0x110>
 800e5a6:	eba0 0308 	sub.w	r3, r0, r8
 800e5aa:	fa09 f303 	lsl.w	r3, r9, r3
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	9304      	str	r3, [sp, #16]
 800e5b2:	46a2      	mov	sl, r4
 800e5b4:	e7d2      	b.n	800e55c <_svfiprintf_r+0x9c>
 800e5b6:	9b03      	ldr	r3, [sp, #12]
 800e5b8:	1d19      	adds	r1, r3, #4
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	9103      	str	r1, [sp, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	bfbb      	ittet	lt
 800e5c2:	425b      	neglt	r3, r3
 800e5c4:	f042 0202 	orrlt.w	r2, r2, #2
 800e5c8:	9307      	strge	r3, [sp, #28]
 800e5ca:	9307      	strlt	r3, [sp, #28]
 800e5cc:	bfb8      	it	lt
 800e5ce:	9204      	strlt	r2, [sp, #16]
 800e5d0:	7823      	ldrb	r3, [r4, #0]
 800e5d2:	2b2e      	cmp	r3, #46	; 0x2e
 800e5d4:	d10c      	bne.n	800e5f0 <_svfiprintf_r+0x130>
 800e5d6:	7863      	ldrb	r3, [r4, #1]
 800e5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5da:	d134      	bne.n	800e646 <_svfiprintf_r+0x186>
 800e5dc:	9b03      	ldr	r3, [sp, #12]
 800e5de:	1d1a      	adds	r2, r3, #4
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	9203      	str	r2, [sp, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	bfb8      	it	lt
 800e5e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5ec:	3402      	adds	r4, #2
 800e5ee:	9305      	str	r3, [sp, #20]
 800e5f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e6b8 <_svfiprintf_r+0x1f8>
 800e5f4:	7821      	ldrb	r1, [r4, #0]
 800e5f6:	2203      	movs	r2, #3
 800e5f8:	4650      	mov	r0, sl
 800e5fa:	f7f1 fdf1 	bl	80001e0 <memchr>
 800e5fe:	b138      	cbz	r0, 800e610 <_svfiprintf_r+0x150>
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	eba0 000a 	sub.w	r0, r0, sl
 800e606:	2240      	movs	r2, #64	; 0x40
 800e608:	4082      	lsls	r2, r0
 800e60a:	4313      	orrs	r3, r2
 800e60c:	3401      	adds	r4, #1
 800e60e:	9304      	str	r3, [sp, #16]
 800e610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e614:	4825      	ldr	r0, [pc, #148]	; (800e6ac <_svfiprintf_r+0x1ec>)
 800e616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e61a:	2206      	movs	r2, #6
 800e61c:	f7f1 fde0 	bl	80001e0 <memchr>
 800e620:	2800      	cmp	r0, #0
 800e622:	d038      	beq.n	800e696 <_svfiprintf_r+0x1d6>
 800e624:	4b22      	ldr	r3, [pc, #136]	; (800e6b0 <_svfiprintf_r+0x1f0>)
 800e626:	bb1b      	cbnz	r3, 800e670 <_svfiprintf_r+0x1b0>
 800e628:	9b03      	ldr	r3, [sp, #12]
 800e62a:	3307      	adds	r3, #7
 800e62c:	f023 0307 	bic.w	r3, r3, #7
 800e630:	3308      	adds	r3, #8
 800e632:	9303      	str	r3, [sp, #12]
 800e634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e636:	4433      	add	r3, r6
 800e638:	9309      	str	r3, [sp, #36]	; 0x24
 800e63a:	e768      	b.n	800e50e <_svfiprintf_r+0x4e>
 800e63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e640:	460c      	mov	r4, r1
 800e642:	2001      	movs	r0, #1
 800e644:	e7a6      	b.n	800e594 <_svfiprintf_r+0xd4>
 800e646:	2300      	movs	r3, #0
 800e648:	3401      	adds	r4, #1
 800e64a:	9305      	str	r3, [sp, #20]
 800e64c:	4619      	mov	r1, r3
 800e64e:	f04f 0c0a 	mov.w	ip, #10
 800e652:	4620      	mov	r0, r4
 800e654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e658:	3a30      	subs	r2, #48	; 0x30
 800e65a:	2a09      	cmp	r2, #9
 800e65c:	d903      	bls.n	800e666 <_svfiprintf_r+0x1a6>
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d0c6      	beq.n	800e5f0 <_svfiprintf_r+0x130>
 800e662:	9105      	str	r1, [sp, #20]
 800e664:	e7c4      	b.n	800e5f0 <_svfiprintf_r+0x130>
 800e666:	fb0c 2101 	mla	r1, ip, r1, r2
 800e66a:	4604      	mov	r4, r0
 800e66c:	2301      	movs	r3, #1
 800e66e:	e7f0      	b.n	800e652 <_svfiprintf_r+0x192>
 800e670:	ab03      	add	r3, sp, #12
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	462a      	mov	r2, r5
 800e676:	4b0f      	ldr	r3, [pc, #60]	; (800e6b4 <_svfiprintf_r+0x1f4>)
 800e678:	a904      	add	r1, sp, #16
 800e67a:	4638      	mov	r0, r7
 800e67c:	f3af 8000 	nop.w
 800e680:	1c42      	adds	r2, r0, #1
 800e682:	4606      	mov	r6, r0
 800e684:	d1d6      	bne.n	800e634 <_svfiprintf_r+0x174>
 800e686:	89ab      	ldrh	r3, [r5, #12]
 800e688:	065b      	lsls	r3, r3, #25
 800e68a:	f53f af2d 	bmi.w	800e4e8 <_svfiprintf_r+0x28>
 800e68e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e690:	b01d      	add	sp, #116	; 0x74
 800e692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e696:	ab03      	add	r3, sp, #12
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	462a      	mov	r2, r5
 800e69c:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <_svfiprintf_r+0x1f4>)
 800e69e:	a904      	add	r1, sp, #16
 800e6a0:	4638      	mov	r0, r7
 800e6a2:	f000 f879 	bl	800e798 <_printf_i>
 800e6a6:	e7eb      	b.n	800e680 <_svfiprintf_r+0x1c0>
 800e6a8:	0800ec0c 	.word	0x0800ec0c
 800e6ac:	0800ec16 	.word	0x0800ec16
 800e6b0:	00000000 	.word	0x00000000
 800e6b4:	0800e40d 	.word	0x0800e40d
 800e6b8:	0800ec12 	.word	0x0800ec12

0800e6bc <_printf_common>:
 800e6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c0:	4616      	mov	r6, r2
 800e6c2:	4699      	mov	r9, r3
 800e6c4:	688a      	ldr	r2, [r1, #8]
 800e6c6:	690b      	ldr	r3, [r1, #16]
 800e6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	bfb8      	it	lt
 800e6d0:	4613      	movlt	r3, r2
 800e6d2:	6033      	str	r3, [r6, #0]
 800e6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6d8:	4607      	mov	r7, r0
 800e6da:	460c      	mov	r4, r1
 800e6dc:	b10a      	cbz	r2, 800e6e2 <_printf_common+0x26>
 800e6de:	3301      	adds	r3, #1
 800e6e0:	6033      	str	r3, [r6, #0]
 800e6e2:	6823      	ldr	r3, [r4, #0]
 800e6e4:	0699      	lsls	r1, r3, #26
 800e6e6:	bf42      	ittt	mi
 800e6e8:	6833      	ldrmi	r3, [r6, #0]
 800e6ea:	3302      	addmi	r3, #2
 800e6ec:	6033      	strmi	r3, [r6, #0]
 800e6ee:	6825      	ldr	r5, [r4, #0]
 800e6f0:	f015 0506 	ands.w	r5, r5, #6
 800e6f4:	d106      	bne.n	800e704 <_printf_common+0x48>
 800e6f6:	f104 0a19 	add.w	sl, r4, #25
 800e6fa:	68e3      	ldr	r3, [r4, #12]
 800e6fc:	6832      	ldr	r2, [r6, #0]
 800e6fe:	1a9b      	subs	r3, r3, r2
 800e700:	42ab      	cmp	r3, r5
 800e702:	dc26      	bgt.n	800e752 <_printf_common+0x96>
 800e704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e708:	1e13      	subs	r3, r2, #0
 800e70a:	6822      	ldr	r2, [r4, #0]
 800e70c:	bf18      	it	ne
 800e70e:	2301      	movne	r3, #1
 800e710:	0692      	lsls	r2, r2, #26
 800e712:	d42b      	bmi.n	800e76c <_printf_common+0xb0>
 800e714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e718:	4649      	mov	r1, r9
 800e71a:	4638      	mov	r0, r7
 800e71c:	47c0      	blx	r8
 800e71e:	3001      	adds	r0, #1
 800e720:	d01e      	beq.n	800e760 <_printf_common+0xa4>
 800e722:	6823      	ldr	r3, [r4, #0]
 800e724:	6922      	ldr	r2, [r4, #16]
 800e726:	f003 0306 	and.w	r3, r3, #6
 800e72a:	2b04      	cmp	r3, #4
 800e72c:	bf02      	ittt	eq
 800e72e:	68e5      	ldreq	r5, [r4, #12]
 800e730:	6833      	ldreq	r3, [r6, #0]
 800e732:	1aed      	subeq	r5, r5, r3
 800e734:	68a3      	ldr	r3, [r4, #8]
 800e736:	bf0c      	ite	eq
 800e738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e73c:	2500      	movne	r5, #0
 800e73e:	4293      	cmp	r3, r2
 800e740:	bfc4      	itt	gt
 800e742:	1a9b      	subgt	r3, r3, r2
 800e744:	18ed      	addgt	r5, r5, r3
 800e746:	2600      	movs	r6, #0
 800e748:	341a      	adds	r4, #26
 800e74a:	42b5      	cmp	r5, r6
 800e74c:	d11a      	bne.n	800e784 <_printf_common+0xc8>
 800e74e:	2000      	movs	r0, #0
 800e750:	e008      	b.n	800e764 <_printf_common+0xa8>
 800e752:	2301      	movs	r3, #1
 800e754:	4652      	mov	r2, sl
 800e756:	4649      	mov	r1, r9
 800e758:	4638      	mov	r0, r7
 800e75a:	47c0      	blx	r8
 800e75c:	3001      	adds	r0, #1
 800e75e:	d103      	bne.n	800e768 <_printf_common+0xac>
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e768:	3501      	adds	r5, #1
 800e76a:	e7c6      	b.n	800e6fa <_printf_common+0x3e>
 800e76c:	18e1      	adds	r1, r4, r3
 800e76e:	1c5a      	adds	r2, r3, #1
 800e770:	2030      	movs	r0, #48	; 0x30
 800e772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e776:	4422      	add	r2, r4
 800e778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e77c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e780:	3302      	adds	r3, #2
 800e782:	e7c7      	b.n	800e714 <_printf_common+0x58>
 800e784:	2301      	movs	r3, #1
 800e786:	4622      	mov	r2, r4
 800e788:	4649      	mov	r1, r9
 800e78a:	4638      	mov	r0, r7
 800e78c:	47c0      	blx	r8
 800e78e:	3001      	adds	r0, #1
 800e790:	d0e6      	beq.n	800e760 <_printf_common+0xa4>
 800e792:	3601      	adds	r6, #1
 800e794:	e7d9      	b.n	800e74a <_printf_common+0x8e>
	...

0800e798 <_printf_i>:
 800e798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e79c:	7e0f      	ldrb	r7, [r1, #24]
 800e79e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e7a0:	2f78      	cmp	r7, #120	; 0x78
 800e7a2:	4691      	mov	r9, r2
 800e7a4:	4680      	mov	r8, r0
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	469a      	mov	sl, r3
 800e7aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e7ae:	d807      	bhi.n	800e7c0 <_printf_i+0x28>
 800e7b0:	2f62      	cmp	r7, #98	; 0x62
 800e7b2:	d80a      	bhi.n	800e7ca <_printf_i+0x32>
 800e7b4:	2f00      	cmp	r7, #0
 800e7b6:	f000 80d4 	beq.w	800e962 <_printf_i+0x1ca>
 800e7ba:	2f58      	cmp	r7, #88	; 0x58
 800e7bc:	f000 80c0 	beq.w	800e940 <_printf_i+0x1a8>
 800e7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7c8:	e03a      	b.n	800e840 <_printf_i+0xa8>
 800e7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ce:	2b15      	cmp	r3, #21
 800e7d0:	d8f6      	bhi.n	800e7c0 <_printf_i+0x28>
 800e7d2:	a101      	add	r1, pc, #4	; (adr r1, 800e7d8 <_printf_i+0x40>)
 800e7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7d8:	0800e831 	.word	0x0800e831
 800e7dc:	0800e845 	.word	0x0800e845
 800e7e0:	0800e7c1 	.word	0x0800e7c1
 800e7e4:	0800e7c1 	.word	0x0800e7c1
 800e7e8:	0800e7c1 	.word	0x0800e7c1
 800e7ec:	0800e7c1 	.word	0x0800e7c1
 800e7f0:	0800e845 	.word	0x0800e845
 800e7f4:	0800e7c1 	.word	0x0800e7c1
 800e7f8:	0800e7c1 	.word	0x0800e7c1
 800e7fc:	0800e7c1 	.word	0x0800e7c1
 800e800:	0800e7c1 	.word	0x0800e7c1
 800e804:	0800e949 	.word	0x0800e949
 800e808:	0800e871 	.word	0x0800e871
 800e80c:	0800e903 	.word	0x0800e903
 800e810:	0800e7c1 	.word	0x0800e7c1
 800e814:	0800e7c1 	.word	0x0800e7c1
 800e818:	0800e96b 	.word	0x0800e96b
 800e81c:	0800e7c1 	.word	0x0800e7c1
 800e820:	0800e871 	.word	0x0800e871
 800e824:	0800e7c1 	.word	0x0800e7c1
 800e828:	0800e7c1 	.word	0x0800e7c1
 800e82c:	0800e90b 	.word	0x0800e90b
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	1d1a      	adds	r2, r3, #4
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	602a      	str	r2, [r5, #0]
 800e838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e840:	2301      	movs	r3, #1
 800e842:	e09f      	b.n	800e984 <_printf_i+0x1ec>
 800e844:	6820      	ldr	r0, [r4, #0]
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	0607      	lsls	r7, r0, #24
 800e84a:	f103 0104 	add.w	r1, r3, #4
 800e84e:	6029      	str	r1, [r5, #0]
 800e850:	d501      	bpl.n	800e856 <_printf_i+0xbe>
 800e852:	681e      	ldr	r6, [r3, #0]
 800e854:	e003      	b.n	800e85e <_printf_i+0xc6>
 800e856:	0646      	lsls	r6, r0, #25
 800e858:	d5fb      	bpl.n	800e852 <_printf_i+0xba>
 800e85a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e85e:	2e00      	cmp	r6, #0
 800e860:	da03      	bge.n	800e86a <_printf_i+0xd2>
 800e862:	232d      	movs	r3, #45	; 0x2d
 800e864:	4276      	negs	r6, r6
 800e866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e86a:	485a      	ldr	r0, [pc, #360]	; (800e9d4 <_printf_i+0x23c>)
 800e86c:	230a      	movs	r3, #10
 800e86e:	e012      	b.n	800e896 <_printf_i+0xfe>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	6820      	ldr	r0, [r4, #0]
 800e874:	1d19      	adds	r1, r3, #4
 800e876:	6029      	str	r1, [r5, #0]
 800e878:	0605      	lsls	r5, r0, #24
 800e87a:	d501      	bpl.n	800e880 <_printf_i+0xe8>
 800e87c:	681e      	ldr	r6, [r3, #0]
 800e87e:	e002      	b.n	800e886 <_printf_i+0xee>
 800e880:	0641      	lsls	r1, r0, #25
 800e882:	d5fb      	bpl.n	800e87c <_printf_i+0xe4>
 800e884:	881e      	ldrh	r6, [r3, #0]
 800e886:	4853      	ldr	r0, [pc, #332]	; (800e9d4 <_printf_i+0x23c>)
 800e888:	2f6f      	cmp	r7, #111	; 0x6f
 800e88a:	bf0c      	ite	eq
 800e88c:	2308      	moveq	r3, #8
 800e88e:	230a      	movne	r3, #10
 800e890:	2100      	movs	r1, #0
 800e892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e896:	6865      	ldr	r5, [r4, #4]
 800e898:	60a5      	str	r5, [r4, #8]
 800e89a:	2d00      	cmp	r5, #0
 800e89c:	bfa2      	ittt	ge
 800e89e:	6821      	ldrge	r1, [r4, #0]
 800e8a0:	f021 0104 	bicge.w	r1, r1, #4
 800e8a4:	6021      	strge	r1, [r4, #0]
 800e8a6:	b90e      	cbnz	r6, 800e8ac <_printf_i+0x114>
 800e8a8:	2d00      	cmp	r5, #0
 800e8aa:	d04b      	beq.n	800e944 <_printf_i+0x1ac>
 800e8ac:	4615      	mov	r5, r2
 800e8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800e8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800e8b6:	5dc7      	ldrb	r7, [r0, r7]
 800e8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8bc:	4637      	mov	r7, r6
 800e8be:	42bb      	cmp	r3, r7
 800e8c0:	460e      	mov	r6, r1
 800e8c2:	d9f4      	bls.n	800e8ae <_printf_i+0x116>
 800e8c4:	2b08      	cmp	r3, #8
 800e8c6:	d10b      	bne.n	800e8e0 <_printf_i+0x148>
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	07de      	lsls	r6, r3, #31
 800e8cc:	d508      	bpl.n	800e8e0 <_printf_i+0x148>
 800e8ce:	6923      	ldr	r3, [r4, #16]
 800e8d0:	6861      	ldr	r1, [r4, #4]
 800e8d2:	4299      	cmp	r1, r3
 800e8d4:	bfde      	ittt	le
 800e8d6:	2330      	movle	r3, #48	; 0x30
 800e8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e8e0:	1b52      	subs	r2, r2, r5
 800e8e2:	6122      	str	r2, [r4, #16]
 800e8e4:	f8cd a000 	str.w	sl, [sp]
 800e8e8:	464b      	mov	r3, r9
 800e8ea:	aa03      	add	r2, sp, #12
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	4640      	mov	r0, r8
 800e8f0:	f7ff fee4 	bl	800e6bc <_printf_common>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d14a      	bne.n	800e98e <_printf_i+0x1f6>
 800e8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fc:	b004      	add	sp, #16
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	f043 0320 	orr.w	r3, r3, #32
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	4833      	ldr	r0, [pc, #204]	; (800e9d8 <_printf_i+0x240>)
 800e90c:	2778      	movs	r7, #120	; 0x78
 800e90e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e912:	6823      	ldr	r3, [r4, #0]
 800e914:	6829      	ldr	r1, [r5, #0]
 800e916:	061f      	lsls	r7, r3, #24
 800e918:	f851 6b04 	ldr.w	r6, [r1], #4
 800e91c:	d402      	bmi.n	800e924 <_printf_i+0x18c>
 800e91e:	065f      	lsls	r7, r3, #25
 800e920:	bf48      	it	mi
 800e922:	b2b6      	uxthmi	r6, r6
 800e924:	07df      	lsls	r7, r3, #31
 800e926:	bf48      	it	mi
 800e928:	f043 0320 	orrmi.w	r3, r3, #32
 800e92c:	6029      	str	r1, [r5, #0]
 800e92e:	bf48      	it	mi
 800e930:	6023      	strmi	r3, [r4, #0]
 800e932:	b91e      	cbnz	r6, 800e93c <_printf_i+0x1a4>
 800e934:	6823      	ldr	r3, [r4, #0]
 800e936:	f023 0320 	bic.w	r3, r3, #32
 800e93a:	6023      	str	r3, [r4, #0]
 800e93c:	2310      	movs	r3, #16
 800e93e:	e7a7      	b.n	800e890 <_printf_i+0xf8>
 800e940:	4824      	ldr	r0, [pc, #144]	; (800e9d4 <_printf_i+0x23c>)
 800e942:	e7e4      	b.n	800e90e <_printf_i+0x176>
 800e944:	4615      	mov	r5, r2
 800e946:	e7bd      	b.n	800e8c4 <_printf_i+0x12c>
 800e948:	682b      	ldr	r3, [r5, #0]
 800e94a:	6826      	ldr	r6, [r4, #0]
 800e94c:	6961      	ldr	r1, [r4, #20]
 800e94e:	1d18      	adds	r0, r3, #4
 800e950:	6028      	str	r0, [r5, #0]
 800e952:	0635      	lsls	r5, r6, #24
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	d501      	bpl.n	800e95c <_printf_i+0x1c4>
 800e958:	6019      	str	r1, [r3, #0]
 800e95a:	e002      	b.n	800e962 <_printf_i+0x1ca>
 800e95c:	0670      	lsls	r0, r6, #25
 800e95e:	d5fb      	bpl.n	800e958 <_printf_i+0x1c0>
 800e960:	8019      	strh	r1, [r3, #0]
 800e962:	2300      	movs	r3, #0
 800e964:	6123      	str	r3, [r4, #16]
 800e966:	4615      	mov	r5, r2
 800e968:	e7bc      	b.n	800e8e4 <_printf_i+0x14c>
 800e96a:	682b      	ldr	r3, [r5, #0]
 800e96c:	1d1a      	adds	r2, r3, #4
 800e96e:	602a      	str	r2, [r5, #0]
 800e970:	681d      	ldr	r5, [r3, #0]
 800e972:	6862      	ldr	r2, [r4, #4]
 800e974:	2100      	movs	r1, #0
 800e976:	4628      	mov	r0, r5
 800e978:	f7f1 fc32 	bl	80001e0 <memchr>
 800e97c:	b108      	cbz	r0, 800e982 <_printf_i+0x1ea>
 800e97e:	1b40      	subs	r0, r0, r5
 800e980:	6060      	str	r0, [r4, #4]
 800e982:	6863      	ldr	r3, [r4, #4]
 800e984:	6123      	str	r3, [r4, #16]
 800e986:	2300      	movs	r3, #0
 800e988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e98c:	e7aa      	b.n	800e8e4 <_printf_i+0x14c>
 800e98e:	6923      	ldr	r3, [r4, #16]
 800e990:	462a      	mov	r2, r5
 800e992:	4649      	mov	r1, r9
 800e994:	4640      	mov	r0, r8
 800e996:	47d0      	blx	sl
 800e998:	3001      	adds	r0, #1
 800e99a:	d0ad      	beq.n	800e8f8 <_printf_i+0x160>
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	079b      	lsls	r3, r3, #30
 800e9a0:	d413      	bmi.n	800e9ca <_printf_i+0x232>
 800e9a2:	68e0      	ldr	r0, [r4, #12]
 800e9a4:	9b03      	ldr	r3, [sp, #12]
 800e9a6:	4298      	cmp	r0, r3
 800e9a8:	bfb8      	it	lt
 800e9aa:	4618      	movlt	r0, r3
 800e9ac:	e7a6      	b.n	800e8fc <_printf_i+0x164>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	4632      	mov	r2, r6
 800e9b2:	4649      	mov	r1, r9
 800e9b4:	4640      	mov	r0, r8
 800e9b6:	47d0      	blx	sl
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d09d      	beq.n	800e8f8 <_printf_i+0x160>
 800e9bc:	3501      	adds	r5, #1
 800e9be:	68e3      	ldr	r3, [r4, #12]
 800e9c0:	9903      	ldr	r1, [sp, #12]
 800e9c2:	1a5b      	subs	r3, r3, r1
 800e9c4:	42ab      	cmp	r3, r5
 800e9c6:	dcf2      	bgt.n	800e9ae <_printf_i+0x216>
 800e9c8:	e7eb      	b.n	800e9a2 <_printf_i+0x20a>
 800e9ca:	2500      	movs	r5, #0
 800e9cc:	f104 0619 	add.w	r6, r4, #25
 800e9d0:	e7f5      	b.n	800e9be <_printf_i+0x226>
 800e9d2:	bf00      	nop
 800e9d4:	0800ec1d 	.word	0x0800ec1d
 800e9d8:	0800ec2e 	.word	0x0800ec2e

0800e9dc <memmove>:
 800e9dc:	4288      	cmp	r0, r1
 800e9de:	b510      	push	{r4, lr}
 800e9e0:	eb01 0402 	add.w	r4, r1, r2
 800e9e4:	d902      	bls.n	800e9ec <memmove+0x10>
 800e9e6:	4284      	cmp	r4, r0
 800e9e8:	4623      	mov	r3, r4
 800e9ea:	d807      	bhi.n	800e9fc <memmove+0x20>
 800e9ec:	1e43      	subs	r3, r0, #1
 800e9ee:	42a1      	cmp	r1, r4
 800e9f0:	d008      	beq.n	800ea04 <memmove+0x28>
 800e9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9fa:	e7f8      	b.n	800e9ee <memmove+0x12>
 800e9fc:	4402      	add	r2, r0
 800e9fe:	4601      	mov	r1, r0
 800ea00:	428a      	cmp	r2, r1
 800ea02:	d100      	bne.n	800ea06 <memmove+0x2a>
 800ea04:	bd10      	pop	{r4, pc}
 800ea06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea0e:	e7f7      	b.n	800ea00 <memmove+0x24>

0800ea10 <_sbrk_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d06      	ldr	r5, [pc, #24]	; (800ea2c <_sbrk_r+0x1c>)
 800ea14:	2300      	movs	r3, #0
 800ea16:	4604      	mov	r4, r0
 800ea18:	4608      	mov	r0, r1
 800ea1a:	602b      	str	r3, [r5, #0]
 800ea1c:	f7f3 fa78 	bl	8001f10 <_sbrk>
 800ea20:	1c43      	adds	r3, r0, #1
 800ea22:	d102      	bne.n	800ea2a <_sbrk_r+0x1a>
 800ea24:	682b      	ldr	r3, [r5, #0]
 800ea26:	b103      	cbz	r3, 800ea2a <_sbrk_r+0x1a>
 800ea28:	6023      	str	r3, [r4, #0]
 800ea2a:	bd38      	pop	{r3, r4, r5, pc}
 800ea2c:	20001a08 	.word	0x20001a08

0800ea30 <_realloc_r>:
 800ea30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea34:	4680      	mov	r8, r0
 800ea36:	4614      	mov	r4, r2
 800ea38:	460e      	mov	r6, r1
 800ea3a:	b921      	cbnz	r1, 800ea46 <_realloc_r+0x16>
 800ea3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	4611      	mov	r1, r2
 800ea42:	f7ff bc57 	b.w	800e2f4 <_malloc_r>
 800ea46:	b92a      	cbnz	r2, 800ea54 <_realloc_r+0x24>
 800ea48:	f7ff fbe8 	bl	800e21c <_free_r>
 800ea4c:	4625      	mov	r5, r4
 800ea4e:	4628      	mov	r0, r5
 800ea50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea54:	f000 f81b 	bl	800ea8e <_malloc_usable_size_r>
 800ea58:	4284      	cmp	r4, r0
 800ea5a:	4607      	mov	r7, r0
 800ea5c:	d802      	bhi.n	800ea64 <_realloc_r+0x34>
 800ea5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea62:	d812      	bhi.n	800ea8a <_realloc_r+0x5a>
 800ea64:	4621      	mov	r1, r4
 800ea66:	4640      	mov	r0, r8
 800ea68:	f7ff fc44 	bl	800e2f4 <_malloc_r>
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d0ed      	beq.n	800ea4e <_realloc_r+0x1e>
 800ea72:	42bc      	cmp	r4, r7
 800ea74:	4622      	mov	r2, r4
 800ea76:	4631      	mov	r1, r6
 800ea78:	bf28      	it	cs
 800ea7a:	463a      	movcs	r2, r7
 800ea7c:	f7ff fbc0 	bl	800e200 <memcpy>
 800ea80:	4631      	mov	r1, r6
 800ea82:	4640      	mov	r0, r8
 800ea84:	f7ff fbca 	bl	800e21c <_free_r>
 800ea88:	e7e1      	b.n	800ea4e <_realloc_r+0x1e>
 800ea8a:	4635      	mov	r5, r6
 800ea8c:	e7df      	b.n	800ea4e <_realloc_r+0x1e>

0800ea8e <_malloc_usable_size_r>:
 800ea8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea92:	1f18      	subs	r0, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	bfbc      	itt	lt
 800ea98:	580b      	ldrlt	r3, [r1, r0]
 800ea9a:	18c0      	addlt	r0, r0, r3
 800ea9c:	4770      	bx	lr
	...

0800eaa0 <trunc>:
 800eaa0:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800eaa4:	ec5c bb10 	vmov	fp, ip, d0
 800eaa8:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800eaac:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800eab0:	2913      	cmp	r1, #19
 800eab2:	4664      	mov	r4, ip
 800eab4:	dc11      	bgt.n	800eada <trunc+0x3a>
 800eab6:	2900      	cmp	r1, #0
 800eab8:	bfa7      	ittee	ge
 800eaba:	4b15      	ldrge	r3, [pc, #84]	; (800eb10 <trunc+0x70>)
 800eabc:	fa43 f101 	asrge.w	r1, r3, r1
 800eac0:	2200      	movlt	r2, #0
 800eac2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800eac6:	bfa4      	itt	ge
 800eac8:	2200      	movge	r2, #0
 800eaca:	ea01 030c 	andge.w	r3, r1, ip
 800eace:	4693      	mov	fp, r2
 800ead0:	469c      	mov	ip, r3
 800ead2:	ec4c bb10 	vmov	d0, fp, ip
 800ead6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800eada:	2933      	cmp	r1, #51	; 0x33
 800eadc:	dd0d      	ble.n	800eafa <trunc+0x5a>
 800eade:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800eae2:	d1f6      	bne.n	800ead2 <trunc+0x32>
 800eae4:	4663      	mov	r3, ip
 800eae6:	ee10 2a10 	vmov	r2, s0
 800eaea:	ee10 0a10 	vmov	r0, s0
 800eaee:	4621      	mov	r1, r4
 800eaf0:	f7f1 fbcc 	bl	800028c <__adddf3>
 800eaf4:	4683      	mov	fp, r0
 800eaf6:	468c      	mov	ip, r1
 800eaf8:	e7eb      	b.n	800ead2 <trunc+0x32>
 800eafa:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	40c3      	lsrs	r3, r0
 800eb04:	ea2b 0603 	bic.w	r6, fp, r3
 800eb08:	46b3      	mov	fp, r6
 800eb0a:	46a4      	mov	ip, r4
 800eb0c:	e7e1      	b.n	800ead2 <trunc+0x32>
 800eb0e:	bf00      	nop
 800eb10:	fff00000 	.word	0xfff00000

0800eb14 <_init>:
 800eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb16:	bf00      	nop
 800eb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb1a:	bc08      	pop	{r3}
 800eb1c:	469e      	mov	lr, r3
 800eb1e:	4770      	bx	lr

0800eb20 <_fini>:
 800eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb22:	bf00      	nop
 800eb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb26:	bc08      	pop	{r3}
 800eb28:	469e      	mov	lr, r3
 800eb2a:	4770      	bx	lr
